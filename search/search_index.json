{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce \u4e2a\u4eba\u7684\u7ecf\u9a8c\u5177\u6709\u4e2a\u4eba\u7684\u70d9\u5370,\u4f5c\u4e3a\u6280\u672f\u6216\u8005\u7ba1\u7406\uff0c\u90fd\u5e94\u5c06\u4e2a\u4eba\u95ee\u9898\u521d\u8c61\u5316. \u6211\u4eec\u5173\u5fc3\u7684\u662f\u4e16\u754c\uff0c\u5173\u5fc3\u7684\u662f\u89e3\u51b3\u95ee\u9898. \u5fae\u89c2\u7684\u4e16\u754c\u91cc\uff0c\u8981\u5411\u4e0a\u62ac\u5934\u770b\u5230\u5b8f\u89c2\u4e16\u754c, \u5b8f\u89c2\u7684\u4e16\u754c\u91cc\uff0c\u8981\u5411\u4e0b\u4f4e\u5934\u770b\u5230\u5fae\u89c2\u4e16\u754cFor>\u628a\u81ea\u5df1 \u628a\u81ea\u5df1\u7684\u7ecf\u9a8c\u8bb0\u5f55\u4e0b\u6765,\u5174\u8bb8\u5c31\u662f\u4e86\u89e3\u4e16\u754c\u7684\u5f00\u59cb \u4f60\u548c\u6211,\u5728\u8fd9\u91cc\u76f8\u9047,\u4e00\u8d77\u5b66\u4e60 \u533a\u5757\u5f15\u7528 \u83dc\u9e1f\u6559\u7a0b \u5b66\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u66f4\u662f\u68a6\u60f3 ---wgjflyup We're living the future so the present is our past. \u5e38\u7528\u547d\u4ee4 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. \u591a\u7ea7\u76ee\u5f55 mkdocs.yml \u591a\u7ea7\u76ee\u5f55\u94fe\u63a5: write your docs \u76ee\u5f55\u5e03\u5c40 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. \u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u8bf7\u53c2\u7167 \u4e00\u3001\u6807\u9898\u5199\u6cd5\uff1a \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a 1\u3001\u5728\u6587\u672c\u4e0b\u9762\u52a0\u4e0a \u7b49\u4e8e\u53f7 = \uff0c\u90a3\u4e48\u4e0a\u65b9\u7684\u6587\u672c\u5c31\u53d8\u6210\u4e86\u5927\u6807\u9898\u3002\u7b49\u4e8e\u53f7\u7684\u4e2a\u6570\u65e0\u9650\u5236\uff0c\u4f46\u4e00\u5b9a\u8981\u5927\u4e8e0\u4e2a\u54e6\u3002\u3002 2\u3001\u5728\u6587\u672c\u4e0b\u9762\u52a0\u4e0a \u4e0b\u5212\u7ebf - \uff0c\u90a3\u4e48\u4e0a\u65b9\u7684\u6587\u672c\u5c31\u53d8\u6210\u4e86\u4e2d\u6807\u9898\uff0c\u540c\u6837\u7684 \u4e0b\u5212\u7ebf\u4e2a\u6570\u65e0\u9650\u5236\u3002 3\u3001\u8981\u60f3\u8f93\u5165=\u53f7\uff0c\u4e0a\u9762\u6709\u6587\u672c\u800c\u4e0d\u8ba9\u5176\u8f6c\u5316\u4e3a\u5927\u6807\u9898\uff0c\u5219\u9700\u8981\u5728\u4e24\u8005\u4e4b\u95f4\u52a0\u4e00\u4e2a\u7a7a\u884c\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\uff08\u63a8\u8350\u8fd9\u79cd\u65b9\u6cd5\uff1b\u6ce8\u610f\u26a0\ufe0f\u4e2d\u95f4\u9700\u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff09 \u5173\u4e8e\u6807\u9898\u8fd8\u6709\u7b49\u7ea7\u8868\u793a\u6cd5\uff0c\u5206\u4e3a\u516d\u4e2a\u7b49\u7ea7\uff0c\u663e\u793a\u7684\u6587\u672c\u5927\u5c0f\u4f9d\u6b21\u51cf\u5c0f\u3002\u4e0d\u540c\u7b49\u7ea7\u4e4b\u95f4\u662f\u4ee5\u4e95\u53f7 # \u7684\u4e2a\u6570\u6765\u6807\u8bc6\u7684\u3002\u4e00\u7ea7\u6807\u9898\u6709\u4e00\u4e2a #\uff0c\u4e8c\u7ea7\u6807\u9898\u6709\u4e24\u4e2a# \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u4f8b\u5982\uff1a \u4e00\u7ea7\u6807\u9898 \u4e8c\u7ea7\u6807\u9898 \u4e09\u7ea7\u6807\u9898 \u56db\u7ea7\u6807\u9898 \u4e94\u7ea7\u6807\u9898 \u516d\u7ea7\u6807\u9898 \u4e8c\u3001\u7f16\u8f91\u57fa\u672c\u8bed\u6cd5 1\u3001\u5b57\u4f53\u683c\u5f0f\u5f3a\u8c03 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u7ed9\u6211\u4eec\u7684\u6587\u672c\u6dfb\u52a0\u5f3a\u8c03\u7684\u6548\u679c \u5f3a\u8c03 (\u793a\u4f8b\uff1a\u659c\u4f53) \u5f3a\u8c03 (\u793a\u4f8b\uff1a\u659c\u4f53) \u52a0\u91cd\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u4f53) \u52a0\u91cd\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u4f53) \u7279\u522b\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u659c\u4f53) \u7279\u522b\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u659c\u4f53) 2\u3001\u4ee3\u7801 <hello world> 3\u3001\u4ee3\u7801\u5757\u9ad8\u4eae @Override protected void onDestroy() { EventBus.getDefault().unregister(this); super.onDestroy(); } 4\u3001\u8868\u683c \uff08\u5efa\u8bae\u5728\u8868\u683c\u524d\u7a7a\u4e00\u884c\uff0c\u5426\u5219\u53ef\u80fd\u5f71\u54cd\u8868\u683c\u65e0\u6cd5\u663e\u793a\uff09 \u8868\u5934 \u8868\u5934 \u8868\u5934 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 5\u3001\u5176\u4ed6\u5f15\u7528 \u56fe\u7247 \u94fe\u63a5 \u94fe\u63a5\u540d\u79f0 6\u3001\u5217\u8868 1. \u9879\u76ee1 2. \u9879\u76ee2 3. \u9879\u76ee3 * \u9879\u76ee1 \uff08\u4e00\u4e2a \u53f7\u4f1a\u663e\u793a\u4e3a\u4e00\u4e2a\u9ed1\u70b9\uff0c\u6ce8\u610f\u26a0\ufe0f\u6709\u7a7a\u683c\uff0c\u5426\u5219\u76f4\u63a5\u663e\u793a\u4e3a \u9879\u76ee1\uff09 * \u9879\u76ee2 7\u3001\u6362\u884c\uff08\u5efa\u8bae\u76f4\u63a5\u5728\u524d\u4e00\u884c\u540e\u9762\u8865\u4e24\u4e2a\u7a7a\u683c\uff09 \u76f4\u63a5\u56de\u8f66\u4e0d\u80fd\u6362\u884c\uff0c \u53ef\u4ee5\u5728\u4e0a\u4e00\u884c\u6587\u672c\u540e\u9762\u8865\u4e24\u4e2a\u7a7a\u683c\uff0c \u8fd9\u6837\u4e0b\u4e00\u884c\u7684\u6587\u672c\u5c31\u6362\u884c\u4e86\u3002 \u6216\u8005\u5c31\u662f\u5728\u4e24\u884c\u6587\u672c\u76f4\u63a5\u52a0\u4e00\u4e2a\u7a7a\u884c\u3002 \u4e5f\u80fd\u5b9e\u73b0\u6362\u884c\u6548\u679c\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u884c\u95f4\u8ddd\u6709\u70b9\u5927\u3002 8\u3001\u5f15\u7528 \u7b2c\u4e00\u884c\u5f15\u7528\u6587\u5b57 \u7b2c\u4e8c\u884c\u5f15\u7528\u6587\u5b57","title":"\u9996\u9875"},{"location":"#_1","text":"\u4e2a\u4eba\u7684\u7ecf\u9a8c\u5177\u6709\u4e2a\u4eba\u7684\u70d9\u5370,\u4f5c\u4e3a\u6280\u672f\u6216\u8005\u7ba1\u7406\uff0c\u90fd\u5e94\u5c06\u4e2a\u4eba\u95ee\u9898\u521d\u8c61\u5316. \u6211\u4eec\u5173\u5fc3\u7684\u662f\u4e16\u754c\uff0c\u5173\u5fc3\u7684\u662f\u89e3\u51b3\u95ee\u9898. \u5fae\u89c2\u7684\u4e16\u754c\u91cc\uff0c\u8981\u5411\u4e0a\u62ac\u5934\u770b\u5230\u5b8f\u89c2\u4e16\u754c, \u5b8f\u89c2\u7684\u4e16\u754c\u91cc\uff0c\u8981\u5411\u4e0b\u4f4e\u5934\u770b\u5230\u5fae\u89c2\u4e16\u754cFor>\u628a\u81ea\u5df1 \u628a\u81ea\u5df1\u7684\u7ecf\u9a8c\u8bb0\u5f55\u4e0b\u6765,\u5174\u8bb8\u5c31\u662f\u4e86\u89e3\u4e16\u754c\u7684\u5f00\u59cb \u4f60\u548c\u6211,\u5728\u8fd9\u91cc\u76f8\u9047,\u4e00\u8d77\u5b66\u4e60 \u533a\u5757\u5f15\u7528 \u83dc\u9e1f\u6559\u7a0b \u5b66\u7684\u4e0d\u4ec5\u662f\u6280\u672f\u66f4\u662f\u68a6\u60f3 ---wgjflyup We're living the future so the present is our past.","title":"\u6b22\u8fce"},{"location":"#_2","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"\u5e38\u7528\u547d\u4ee4"},{"location":"#_3","text":"mkdocs.yml \u591a\u7ea7\u76ee\u5f55\u94fe\u63a5: write your docs","title":"\u591a\u7ea7\u76ee\u5f55"},{"location":"#_4","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u76ee\u5f55\u5e03\u5c40"},{"location":"#_5","text":"\u4e00\u3001\u6807\u9898\u5199\u6cd5\uff1a \u7b2c\u4e00\u79cd\u65b9\u6cd5\uff1a 1\u3001\u5728\u6587\u672c\u4e0b\u9762\u52a0\u4e0a \u7b49\u4e8e\u53f7 = \uff0c\u90a3\u4e48\u4e0a\u65b9\u7684\u6587\u672c\u5c31\u53d8\u6210\u4e86\u5927\u6807\u9898\u3002\u7b49\u4e8e\u53f7\u7684\u4e2a\u6570\u65e0\u9650\u5236\uff0c\u4f46\u4e00\u5b9a\u8981\u5927\u4e8e0\u4e2a\u54e6\u3002\u3002 2\u3001\u5728\u6587\u672c\u4e0b\u9762\u52a0\u4e0a \u4e0b\u5212\u7ebf - \uff0c\u90a3\u4e48\u4e0a\u65b9\u7684\u6587\u672c\u5c31\u53d8\u6210\u4e86\u4e2d\u6807\u9898\uff0c\u540c\u6837\u7684 \u4e0b\u5212\u7ebf\u4e2a\u6570\u65e0\u9650\u5236\u3002 3\u3001\u8981\u60f3\u8f93\u5165=\u53f7\uff0c\u4e0a\u9762\u6709\u6587\u672c\u800c\u4e0d\u8ba9\u5176\u8f6c\u5316\u4e3a\u5927\u6807\u9898\uff0c\u5219\u9700\u8981\u5728\u4e24\u8005\u4e4b\u95f4\u52a0\u4e00\u4e2a\u7a7a\u884c\u3002 \u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a\uff08\u63a8\u8350\u8fd9\u79cd\u65b9\u6cd5\uff1b\u6ce8\u610f\u26a0\ufe0f\u4e2d\u95f4\u9700\u8981\u6709\u4e00\u4e2a\u7a7a\u683c\uff09 \u5173\u4e8e\u6807\u9898\u8fd8\u6709\u7b49\u7ea7\u8868\u793a\u6cd5\uff0c\u5206\u4e3a\u516d\u4e2a\u7b49\u7ea7\uff0c\u663e\u793a\u7684\u6587\u672c\u5927\u5c0f\u4f9d\u6b21\u51cf\u5c0f\u3002\u4e0d\u540c\u7b49\u7ea7\u4e4b\u95f4\u662f\u4ee5\u4e95\u53f7 # \u7684\u4e2a\u6570\u6765\u6807\u8bc6\u7684\u3002\u4e00\u7ea7\u6807\u9898\u6709\u4e00\u4e2a #\uff0c\u4e8c\u7ea7\u6807\u9898\u6709\u4e24\u4e2a# \uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u4f8b\u5982\uff1a","title":"\u4ee5\u4e0b\u662f\u4ee3\u7801\uff0c\u8bf7\u53c2\u7167"},{"location":"#_6","text":"","title":"\u4e00\u7ea7\u6807\u9898"},{"location":"#_7","text":"","title":"\u4e8c\u7ea7\u6807\u9898"},{"location":"#_8","text":"","title":"\u4e09\u7ea7\u6807\u9898"},{"location":"#_9","text":"","title":"\u56db\u7ea7\u6807\u9898"},{"location":"#_10","text":"","title":"\u4e94\u7ea7\u6807\u9898"},{"location":"#_11","text":"\u4e8c\u3001\u7f16\u8f91\u57fa\u672c\u8bed\u6cd5 1\u3001\u5b57\u4f53\u683c\u5f0f\u5f3a\u8c03 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u7ed9\u6211\u4eec\u7684\u6587\u672c\u6dfb\u52a0\u5f3a\u8c03\u7684\u6548\u679c \u5f3a\u8c03 (\u793a\u4f8b\uff1a\u659c\u4f53) \u5f3a\u8c03 (\u793a\u4f8b\uff1a\u659c\u4f53) \u52a0\u91cd\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u4f53) \u52a0\u91cd\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u4f53) \u7279\u522b\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u659c\u4f53) \u7279\u522b\u5f3a\u8c03 (\u793a\u4f8b\uff1a\u7c97\u659c\u4f53) 2\u3001\u4ee3\u7801 <hello world> 3\u3001\u4ee3\u7801\u5757\u9ad8\u4eae @Override protected void onDestroy() { EventBus.getDefault().unregister(this); super.onDestroy(); } 4\u3001\u8868\u683c \uff08\u5efa\u8bae\u5728\u8868\u683c\u524d\u7a7a\u4e00\u884c\uff0c\u5426\u5219\u53ef\u80fd\u5f71\u54cd\u8868\u683c\u65e0\u6cd5\u663e\u793a\uff09 \u8868\u5934 \u8868\u5934 \u8868\u5934 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 \u5355\u5143\u683c\u5185\u5bb9 5\u3001\u5176\u4ed6\u5f15\u7528 \u56fe\u7247 \u94fe\u63a5 \u94fe\u63a5\u540d\u79f0 6\u3001\u5217\u8868 1. \u9879\u76ee1 2. \u9879\u76ee2 3. \u9879\u76ee3 * \u9879\u76ee1 \uff08\u4e00\u4e2a \u53f7\u4f1a\u663e\u793a\u4e3a\u4e00\u4e2a\u9ed1\u70b9\uff0c\u6ce8\u610f\u26a0\ufe0f\u6709\u7a7a\u683c\uff0c\u5426\u5219\u76f4\u63a5\u663e\u793a\u4e3a \u9879\u76ee1\uff09 * \u9879\u76ee2 7\u3001\u6362\u884c\uff08\u5efa\u8bae\u76f4\u63a5\u5728\u524d\u4e00\u884c\u540e\u9762\u8865\u4e24\u4e2a\u7a7a\u683c\uff09 \u76f4\u63a5\u56de\u8f66\u4e0d\u80fd\u6362\u884c\uff0c \u53ef\u4ee5\u5728\u4e0a\u4e00\u884c\u6587\u672c\u540e\u9762\u8865\u4e24\u4e2a\u7a7a\u683c\uff0c \u8fd9\u6837\u4e0b\u4e00\u884c\u7684\u6587\u672c\u5c31\u6362\u884c\u4e86\u3002 \u6216\u8005\u5c31\u662f\u5728\u4e24\u884c\u6587\u672c\u76f4\u63a5\u52a0\u4e00\u4e2a\u7a7a\u884c\u3002 \u4e5f\u80fd\u5b9e\u73b0\u6362\u884c\u6548\u679c\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u884c\u95f4\u8ddd\u6709\u70b9\u5927\u3002 8\u3001\u5f15\u7528 \u7b2c\u4e00\u884c\u5f15\u7528\u6587\u5b57 \u7b2c\u4e8c\u884c\u5f15\u7528\u6587\u5b57","title":"\u516d\u7ea7\u6807\u9898"},{"location":"markdown/","text":"markdown\u5e38\u7528\u8bed\u6cd5\u89e3\u91ca\u548c\u8bf4\u660e \u6f14\u793aMarkdown\u7684\u57fa\u672c\u8bed\u6cd5, \u70b9\u51fbRaw \u53ef\u4ee5\u770b\u6e90\u4ee3\u7801\uff0c\u66f4\u597d\u7684\u638c\u63e1\u3002 \u5927\u6807\u9898 \u5927\u6807\u9898\uff0c\u7c7b\u4f3chtml\u7684\\<h1> \u4f60\u53ea\u8981\u5728\u6807\u9898\u4e0b\u9762\u4e00\u884c\u7d27\u8ddf\u8f93\u5165=====\u5373\u53ef \u5927\u6807\u9898 \u5927\u6807\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 # \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\uff0c\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h1> \u4e2d\u6807\u9898 \u4e2d\u6807\u9898\uff0c\u7c7b\u4f3chtml\u7684\\<h2> \u4f60\u53ea\u8981\u5728\u6807\u9898\u4e0b\u9762\u4e00\u884c\u7d27\u8ddf\u8f93\u5165------\u5373\u53ef \u4e2d\u6807\u9898 \u4e2d\u6807\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 ## \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h2> \u5c0f\u6807\u9898 \u5c0f\u6807\u9898\u7684\u683c\u5f0f\u5982\u4e0b ### \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\uff0c\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h3> \u5355\u884c\u6587\u672c\u6846 \u8fd9\u662f\u4e00\u4e2a\u5355\u884c\u7684\u6587\u672c\u6846,\u53ea\u89811\u4e2aTab\u6216\u80054\u4e2a\u7a7a\u683c\u518d\u8f93\u5165\u6587\u5b57\u5373\u53ef \u591a\u884c\u6587\u672c\u6846 \u8fd9\u662f\u4e00\u4e2a\u6709\u591a\u884c\u7684\u6587\u672c\u6846 \u4f60\u53ef\u4ee5\u5199\u5165\u4ee3\u7801\u7b49,\u6bcf\u884c\u6587\u5b57\u53ea\u8981\u8f93\u51651\u4e2aTab\u6216\u80054\u4e2a\u7a7a\u683c\u518d\u8f93\u5165\u6587\u5b57\u5373\u53ef \u5728\u591a\u884c\u6587\u672c\u6846\u91cc\u8f93\u5165\u4e00\u6bb5\u4ee3\u7801,\u6765\u4e00\u4e2aPHP\u7248\u672c\u7684HelloWorld\u5427 public function helloword() { echo 'Hello word'; } \u52a0\u5f3a\u7684\u4ee3\u7801\u5757,\u5b9a\u683c\u7528``` \u5f00\u5934\u548c ```\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5199\u4ee3\u7801\u3002\u6709\u884c\u6570\u548c\u9ad8\u4eae\u63d0\u793a echo 333; \u94fe\u63a5 \u7528[\u6587\u5b57\u8bf4\u660e] (\u94fe\u63a5\\ \"Title\") \u6765\u8868\u793a\uff1a 1. \u70b9\u51fb\u8fd9\u91cc\u4f60\u53ef\u4ee5\u94fe\u63a5\u5230www.google.com 2. \u70b9\u51fb\u8fd9\u91cc\u6211\u4f60\u53ef\u4ee5\u94fe\u63a5\u5230\u6211\u7684\u4e3b\u9875\uff0c\u9f20\u6807\u653e\u4e0a\u53bb\u6709title \u53ea\u662f\u663e\u793a\u56fe\u7247 \u7528![] (\u56fe\u7247\u5730\u5740 \"\u56fe\u7247title\u8bf4\u660e\") \u6765\u8868\u793a\uff1a \u60f3\u70b9\u51fb\u67d0\u4e2a\u56fe\u7247\u8fdb\u5165\u4e00\u4e2a\u7f51\u9875,\u6bd4\u5982\u6211\u60f3\u70b9\u51fbgithub\u7684icorn\u7136\u540e\u518d\u8fdb\u5165www.github.com \u533a\u5757\u5f15\u7528 \u6587\u5b57\u88ab\u4e9b\u5b57\u7b26\u5305\u56f4 \u53ea\u8981\u5728\u6587\u5b57\u524d\u9762\u52a0\u4e0a>\u7a7a\u683c\u5373\u53ef \u5982\u679c\u4f60\u8981\u6362\u884c\u7684\u8bdd,\u65b0\u8d77\u4e00\u884c,\u8f93\u5165>\u7a7a\u683c\u5373\u53ef,\u540e\u9762\u4e0d\u63a5\u6587\u5b57 \u6216\u8005\u8fd9\u4e00\u884c\u540e\u9762\u52a0\\<br>,\u4e0b\u4e00\u884c\u4e5f\u5c31\u80fd\u81ea\u52a8\u6362\u884c\u4e86 \u4f46> \u53ea\u80fd\u653e\u5728\u884c\u9996\u624d\u6709\u6548 \u533a\u5757\u591a\u91cd\u5305\u56f4\u5f15\u7528 \u6587\u5b57\u88ab\u4e9b\u5b57\u7b26\u5305\u56f4\u5f00\u59cb \u53ea\u8981\u518d\u6587\u5b57\u524d\u9762\u52a0\u4e0a>\u7a7a\u683c\u5373\u53ef \u5982\u679c\u4f60\u8981\u6362\u884c\u7684\u8bdd,\u65b0\u8d77\u4e00\u884c,\u8f93\u5165>\u7a7a\u683c\u5373\u53ef,\u540e\u9762\u4e0d\u63a5\u6587\u5b57 \u4f46> \u53ea\u80fd\u653e\u5728\u884c\u9996\u624d\u6709\u6548 \u7279\u6b8a\u5b57\u7b26\u5904\u7406 \u6709\u4e00\u4e9b\u7279\u6b8a\u5b57\u7b26\u5982<,#\u7b49,\u53ea\u8981\u5728\u7279\u6b8a\u5b57\u7b26\u524d\u9762\u52a0\u4e0a\u8f6c\u4e49\u5b57\u7b26\\\u5373\u53ef \u4f60\u60f3\u6362\u884c\u7684\u8bdd\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7528html\u6807\u7b7e\\<br /> \u65e0\u5e8f\u5217\u8868 \u7528 * \u6216\u8005 - \u6216\u8005+ \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9 \uff0c\u5373\u53ef\u663e\u793a\u65e0\u5e8f\u5217\u8868\uff0c\u7c7b\u4f3chtml\u7684\\<ul> \u5728\u884c\u9996\u52a0* \uff0c\u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef \u6216\u8005\u5728\u884c\u9996\u52a0-\uff0c \u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef \u6216\u8005\u5728\u884c\u9996\u5904\u52a0+\uff0c\u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef \u6709\u5e8f\u5217\u8868 \u7528\u6570\u5b57(1,2,3,4.....)\u52a0. \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\u5373\u53ef\uff0c \u7c7b\u4f3c\u4e8e\u4f3chtml\u7684\\<ol> \u8fd9\u662f1 \u8fd9\u662f2 \u8fd9\u662f8\uff0c\u4f46\u662f\u4f1a\u663e\u793a3 \u5206\u5757\u663e\u793a 2\u5757\u4e4b\u95f4\uff0c\u8f93\u5165\u4e00\u957f\u4e32\u7684----\u5373\u53ef\u3002\u8bb0\u4f4f\uff1a----\u4e0a\u4e0b\u90fd\u8981\u6709\u7a7a\u683c\uff0c\u4e0d\u7136\u5c31\u53d8\u6210\u4e86\u5927\u6807\u9898\u4e86\u3002 \u8fd9\u662f\u4e00\u5757 \u8fd9\u662f\u53e6\u4e00\u5757 \u5c0f\u4ee3\u7801\u5757\u6846\u6846\u6807\u8bc6 \u7528`const php ` \u8868\u793a\u5373\u53ef\uff0c\u663e\u793a\u5f88\u6f02\u4eae\u5f88\u663e\u8457 \u6bd4\u5982\u6211\u4eec\u7528 git init \u6765\u521d\u59cb\u5316git \u7248\u672c\u5e93 \u7c97\u4f53\u5b57 \u7528** \u6587\u5b57 ** \u6765\u6807\u8bc6\u4e00\u4e2a\u7c97\u4f53\u5b57\uff0c\u7c7b\u4f3chtml\u7684\\<strong>\\</strong> \u8fd9\u662f\u7c97\u4f53 \u659c\u4f53 \u7528* \u6587\u5b57 * \u6765\u6807\u8bc6\u4e00\u4e2a\u659c\u4f53\uff1a \u8fd9\u662f\u659c\u4f53 \u5220\u9664\u7ebf \u7528\\~\\~ \u6587\u5b57 \\~\\~ \u6765\u6807\u8bc6\u4e00\u4e2a\u5e26\u6709\u5220\u9664\u7ebf\u7684\u5b57\u4f53\uff1a~~\u6709\u5220\u9664~~ \u8868\u683c \u5c31\u53ef\u4ee5\u7ed8\u5236\u51fa\u4e00\u4e2a\u4e0b\u9762\u7684\u8868\u683c\u4e86\uff1b \u9879\u76ee \u4ef7\u683c \u6570\u91cf \u8ba1\u7b97\u673a $1600 5 \u624b\u673a $12 12 \u7ba1\u7ebf $1 234 \u53c2\u8003\u8bed\u6cd5MarkDown MarkDown\u8bed\u6cd5 \u5728\u7ebf\u7f16\u8f91\u5668 MaHua 4ye zybuluo","title":"\u6d4b\u8bd5"},{"location":"markdown/#markdown","text":"\u6f14\u793aMarkdown\u7684\u57fa\u672c\u8bed\u6cd5, \u70b9\u51fbRaw \u53ef\u4ee5\u770b\u6e90\u4ee3\u7801\uff0c\u66f4\u597d\u7684\u638c\u63e1\u3002","title":"markdown\u5e38\u7528\u8bed\u6cd5\u89e3\u91ca\u548c\u8bf4\u660e"},{"location":"markdown/#_1","text":"\u5927\u6807\u9898\uff0c\u7c7b\u4f3chtml\u7684\\<h1> \u4f60\u53ea\u8981\u5728\u6807\u9898\u4e0b\u9762\u4e00\u884c\u7d27\u8ddf\u8f93\u5165=====\u5373\u53ef","title":"\u5927\u6807\u9898"},{"location":"markdown/#_2","text":"\u5927\u6807\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 # \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\uff0c\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h1>","title":"\u5927\u6807\u9898"},{"location":"markdown/#_3","text":"\u4e2d\u6807\u9898\uff0c\u7c7b\u4f3chtml\u7684\\<h2> \u4f60\u53ea\u8981\u5728\u6807\u9898\u4e0b\u9762\u4e00\u884c\u7d27\u8ddf\u8f93\u5165------\u5373\u53ef","title":"\u4e2d\u6807\u9898"},{"location":"markdown/#_4","text":"\u4e2d\u6807\u9898\u4e5f\u53ef\u4ee5\u4f7f\u7528 ## \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h2>","title":"\u4e2d\u6807\u9898"},{"location":"markdown/#_5","text":"\u5c0f\u6807\u9898\u7684\u683c\u5f0f\u5982\u4e0b ### \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\uff0c\u6765\u8868\u793a\uff0c\u7c7b\u4f3chtml\u7684\\<h3>","title":"\u5c0f\u6807\u9898"},{"location":"markdown/#_6","text":"\u8fd9\u662f\u4e00\u4e2a\u5355\u884c\u7684\u6587\u672c\u6846,\u53ea\u89811\u4e2aTab\u6216\u80054\u4e2a\u7a7a\u683c\u518d\u8f93\u5165\u6587\u5b57\u5373\u53ef","title":"\u5355\u884c\u6587\u672c\u6846"},{"location":"markdown/#_7","text":"\u8fd9\u662f\u4e00\u4e2a\u6709\u591a\u884c\u7684\u6587\u672c\u6846 \u4f60\u53ef\u4ee5\u5199\u5165\u4ee3\u7801\u7b49,\u6bcf\u884c\u6587\u5b57\u53ea\u8981\u8f93\u51651\u4e2aTab\u6216\u80054\u4e2a\u7a7a\u683c\u518d\u8f93\u5165\u6587\u5b57\u5373\u53ef","title":"\u591a\u884c\u6587\u672c\u6846"},{"location":"markdown/#phphelloworld","text":"public function helloword() { echo 'Hello word'; }","title":"\u5728\u591a\u884c\u6587\u672c\u6846\u91cc\u8f93\u5165\u4e00\u6bb5\u4ee3\u7801,\u6765\u4e00\u4e2aPHP\u7248\u672c\u7684HelloWorld\u5427"},{"location":"markdown/#_8","text":"echo 333;","title":"\u52a0\u5f3a\u7684\u4ee3\u7801\u5757,\u5b9a\u683c\u7528``` \u5f00\u5934\u548c ```\u7ed3\u5c3e\uff0c\u4e2d\u95f4\u5199\u4ee3\u7801\u3002\u6709\u884c\u6570\u548c\u9ad8\u4eae\u63d0\u793a"},{"location":"markdown/#_9","text":"\u7528[\u6587\u5b57\u8bf4\u660e] (\u94fe\u63a5\\ \"Title\") \u6765\u8868\u793a\uff1a 1. \u70b9\u51fb\u8fd9\u91cc\u4f60\u53ef\u4ee5\u94fe\u63a5\u5230www.google.com 2. \u70b9\u51fb\u8fd9\u91cc\u6211\u4f60\u53ef\u4ee5\u94fe\u63a5\u5230\u6211\u7684\u4e3b\u9875\uff0c\u9f20\u6807\u653e\u4e0a\u53bb\u6709title","title":"\u94fe\u63a5"},{"location":"markdown/#_10","text":"\u7528![] (\u56fe\u7247\u5730\u5740 \"\u56fe\u7247title\u8bf4\u660e\") \u6765\u8868\u793a\uff1a","title":"\u53ea\u662f\u663e\u793a\u56fe\u7247"},{"location":"markdown/#githubicornwwwgithubcom","text":"","title":"\u60f3\u70b9\u51fb\u67d0\u4e2a\u56fe\u7247\u8fdb\u5165\u4e00\u4e2a\u7f51\u9875,\u6bd4\u5982\u6211\u60f3\u70b9\u51fbgithub\u7684icorn\u7136\u540e\u518d\u8fdb\u5165www.github.com"},{"location":"markdown/#_11","text":"\u6587\u5b57\u88ab\u4e9b\u5b57\u7b26\u5305\u56f4 \u53ea\u8981\u5728\u6587\u5b57\u524d\u9762\u52a0\u4e0a>\u7a7a\u683c\u5373\u53ef \u5982\u679c\u4f60\u8981\u6362\u884c\u7684\u8bdd,\u65b0\u8d77\u4e00\u884c,\u8f93\u5165>\u7a7a\u683c\u5373\u53ef,\u540e\u9762\u4e0d\u63a5\u6587\u5b57 \u6216\u8005\u8fd9\u4e00\u884c\u540e\u9762\u52a0\\<br>,\u4e0b\u4e00\u884c\u4e5f\u5c31\u80fd\u81ea\u52a8\u6362\u884c\u4e86 \u4f46> \u53ea\u80fd\u653e\u5728\u884c\u9996\u624d\u6709\u6548","title":"\u533a\u5757\u5f15\u7528"},{"location":"markdown/#_12","text":"\u6587\u5b57\u88ab\u4e9b\u5b57\u7b26\u5305\u56f4\u5f00\u59cb \u53ea\u8981\u518d\u6587\u5b57\u524d\u9762\u52a0\u4e0a>\u7a7a\u683c\u5373\u53ef \u5982\u679c\u4f60\u8981\u6362\u884c\u7684\u8bdd,\u65b0\u8d77\u4e00\u884c,\u8f93\u5165>\u7a7a\u683c\u5373\u53ef,\u540e\u9762\u4e0d\u63a5\u6587\u5b57 \u4f46> \u53ea\u80fd\u653e\u5728\u884c\u9996\u624d\u6709\u6548","title":"\u533a\u5757\u591a\u91cd\u5305\u56f4\u5f15\u7528"},{"location":"markdown/#_13","text":"\u6709\u4e00\u4e9b\u7279\u6b8a\u5b57\u7b26\u5982<,#\u7b49,\u53ea\u8981\u5728\u7279\u6b8a\u5b57\u7b26\u524d\u9762\u52a0\u4e0a\u8f6c\u4e49\u5b57\u7b26\\\u5373\u53ef \u4f60\u60f3\u6362\u884c\u7684\u8bdd\u5176\u5b9e\u53ef\u4ee5\u76f4\u63a5\u7528html\u6807\u7b7e\\<br />","title":"\u7279\u6b8a\u5b57\u7b26\u5904\u7406"},{"location":"markdown/#_14","text":"\u7528 * \u6216\u8005 - \u6216\u8005+ \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9 \uff0c\u5373\u53ef\u663e\u793a\u65e0\u5e8f\u5217\u8868\uff0c\u7c7b\u4f3chtml\u7684\\<ul> \u5728\u884c\u9996\u52a0* \uff0c\u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef \u6216\u8005\u5728\u884c\u9996\u52a0-\uff0c \u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef \u6216\u8005\u5728\u884c\u9996\u5904\u52a0+\uff0c\u7a7a\u683c\u540e\u8f93\u5165\u5185\u5bb9\u5373\u53ef","title":"\u65e0\u5e8f\u5217\u8868"},{"location":"markdown/#_15","text":"\u7528\u6570\u5b57(1,2,3,4.....)\u52a0. \u7a7a\u683c\u540e\uff0c\u8f93\u5165\u5185\u5bb9\u5373\u53ef\uff0c \u7c7b\u4f3c\u4e8e\u4f3chtml\u7684\\<ol> \u8fd9\u662f1 \u8fd9\u662f2 \u8fd9\u662f8\uff0c\u4f46\u662f\u4f1a\u663e\u793a3","title":"\u6709\u5e8f\u5217\u8868"},{"location":"markdown/#_16","text":"2\u5757\u4e4b\u95f4\uff0c\u8f93\u5165\u4e00\u957f\u4e32\u7684----\u5373\u53ef\u3002\u8bb0\u4f4f\uff1a----\u4e0a\u4e0b\u90fd\u8981\u6709\u7a7a\u683c\uff0c\u4e0d\u7136\u5c31\u53d8\u6210\u4e86\u5927\u6807\u9898\u4e86\u3002 \u8fd9\u662f\u4e00\u5757 \u8fd9\u662f\u53e6\u4e00\u5757","title":"\u5206\u5757\u663e\u793a"},{"location":"markdown/#_17","text":"\u7528`const php ` \u8868\u793a\u5373\u53ef\uff0c\u663e\u793a\u5f88\u6f02\u4eae\u5f88\u663e\u8457 \u6bd4\u5982\u6211\u4eec\u7528 git init \u6765\u521d\u59cb\u5316git \u7248\u672c\u5e93","title":"\u5c0f\u4ee3\u7801\u5757\u6846\u6846\u6807\u8bc6"},{"location":"markdown/#_18","text":"\u7528** \u6587\u5b57 ** \u6765\u6807\u8bc6\u4e00\u4e2a\u7c97\u4f53\u5b57\uff0c\u7c7b\u4f3chtml\u7684\\<strong>\\</strong> \u8fd9\u662f\u7c97\u4f53","title":"\u7c97\u4f53\u5b57"},{"location":"markdown/#_19","text":"\u7528* \u6587\u5b57 * \u6765\u6807\u8bc6\u4e00\u4e2a\u659c\u4f53\uff1a \u8fd9\u662f\u659c\u4f53","title":"\u659c\u4f53"},{"location":"markdown/#_20","text":"\u7528\\~\\~ \u6587\u5b57 \\~\\~ \u6765\u6807\u8bc6\u4e00\u4e2a\u5e26\u6709\u5220\u9664\u7ebf\u7684\u5b57\u4f53\uff1a~~\u6709\u5220\u9664~~","title":"\u5220\u9664\u7ebf"},{"location":"markdown/#_21","text":"\u5c31\u53ef\u4ee5\u7ed8\u5236\u51fa\u4e00\u4e2a\u4e0b\u9762\u7684\u8868\u683c\u4e86\uff1b \u9879\u76ee \u4ef7\u683c \u6570\u91cf \u8ba1\u7b97\u673a $1600 5 \u624b\u673a $12 12 \u7ba1\u7ebf $1 234","title":"\u8868\u683c"},{"location":"markdown/#markdown_1","text":"MarkDown\u8bed\u6cd5","title":"\u53c2\u8003\u8bed\u6cd5MarkDown"},{"location":"markdown/#_22","text":"MaHua 4ye zybuluo","title":"\u5728\u7ebf\u7f16\u8f91\u5668"},{"location":"aaa/a1/","text":"\u7cfb\u7edf\u8bbe\u8ba1\u57fa\u7840 \u4e00\u3001\u6027\u80fd \u6027\u80fd\u6307\u6807 1. \u54cd\u5e94\u65f6\u95f4 \u6307\u67d0\u4e2a\u8bf7\u6c42\u4ece\u53d1\u51fa\u5230\u63a5\u6536\u5230\u54cd\u5e94\u6d88\u8017\u7684\u65f6\u95f4\u3002 \u5728\u5bf9\u54cd\u5e94\u65f6\u95f4\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u901a\u5e38\u91c7\u7528\u91cd\u590d\u8bf7\u6c42\u7684\u65b9\u5f0f\uff0c\u7136\u540e\u8ba1\u7b97\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u3002 2. \u541e\u5410\u91cf \u6307\u7cfb\u7edf\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u53ef\u4ee5\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u901a\u5e38\u4f7f\u7528\u6bcf\u79d2\u7684\u8bf7\u6c42\u6570\u6765\u8861\u91cf\u3002 3. \u5e76\u53d1\u7528\u6237\u6570 \u6307\u7cfb\u7edf\u80fd\u540c\u65f6\u5904\u7406\u7684\u5e76\u53d1\u7528\u6237\u8bf7\u6c42\u6570\u91cf\u3002 \u5728\u6ca1\u6709\u5e76\u53d1\u5b58\u5728\u7684\u7cfb\u7edf\u4e2d\uff0c\u8bf7\u6c42\u88ab\u987a\u5e8f\u6267\u884c\uff0c\u6b64\u65f6\u54cd\u5e94\u65f6\u95f4\u4e3a\u541e\u5410\u91cf\u7684\u5012\u6570\u3002\u4f8b\u5982\u7cfb\u7edf\u652f\u6301\u7684\u541e\u5410\u91cf\u4e3a 100 req/s\uff0c\u90a3\u4e48\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u5e94\u8be5\u4e3a 0.01s\u3002 \u76ee\u524d\u7684\u5927\u578b\u7cfb\u7edf\u90fd\u652f\u6301\u591a\u7ebf\u7a0b\u6765\u5904\u7406\u5e76\u53d1\u8bf7\u6c42\uff0c\u591a\u7ebf\u7a0b\u80fd\u591f\u63d0\u9ad8\u541e\u5410\u91cf\u4ee5\u53ca\u7f29\u77ed\u54cd\u5e94\u65f6\u95f4\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\uff1a \u591a CPU IO \u7b49\u5f85\u65f6\u95f4 \u4f7f\u7528 IO \u591a\u8def\u590d\u7528\u7b49\u65b9\u5f0f\uff0c\u7cfb\u7edf\u5728\u7b49\u5f85\u4e00\u4e2a IO \u64cd\u4f5c\u5b8c\u6210\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\u4e0d\u9700\u8981\u88ab\u963b\u585e\uff0c\u53ef\u4ee5\u53bb\u5904\u7406\u5176\u5b83\u8bf7\u6c42\u3002\u901a\u8fc7\u5c06\u8fd9\u4e2a\u7b49\u5f85\u65f6\u95f4\u5229\u7528\u8d77\u6765\uff0c\u4f7f\u5f97 CPU \u5229\u7528\u7387\u5927\u5927\u63d0\u9ad8\u3002 \u5e76\u53d1\u7528\u6237\u6570\u4e0d\u662f\u8d8a\u9ad8\u8d8a\u597d\uff0c\u56e0\u4e3a\u5982\u679c\u5e76\u53d1\u7528\u6237\u6570\u592a\u9ad8\uff0c\u7cfb\u7edf\u6765\u4e0d\u53ca\u5904\u7406\u8fd9\u4e48\u591a\u7684\u8bf7\u6c42\uff0c\u4f1a\u4f7f\u5f97\u8fc7\u591a\u7684\u8bf7\u6c42\u9700\u8981\u7b49\u5f85\uff0c\u90a3\u4e48\u54cd\u5e94\u65f6\u95f4\u5c31\u4f1a\u5927\u5927\u63d0\u9ad8\u3002 \u6027\u80fd\u4f18\u5316 1. \u96c6\u7fa4 \u5c06\u591a\u53f0\u670d\u52a1\u5668\u7ec4\u6210\u96c6\u7fa4\uff0c\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u96c6\u7fa4\u4e2d\uff0c\u907f\u514d\u5355\u4e00\u670d\u52a1\u5668\u7684\u8d1f\u8f7d\u538b\u529b\u8fc7\u5927\u5bfc\u81f4\u6027\u80fd\u964d\u4f4e\u3002 2. \u7f13\u5b58 \u7f13\u5b58\u80fd\u591f\u63d0\u9ad8\u6027\u80fd\u7684\u539f\u56e0\u5982\u4e0b\uff1a \u7f13\u5b58\u6570\u636e\u901a\u5e38\u4f4d\u4e8e\u5185\u5b58\u7b49\u4ecb\u8d28\u4e2d\uff0c\u8fd9\u79cd\u4ecb\u8d28\u5bf9\u4e8e\u8bfb\u64cd\u4f5c\u7279\u522b\u5feb\uff1b \u7f13\u5b58\u6570\u636e\u53ef\u4ee5\u4f4d\u4e8e\u9760\u8fd1\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u4e0a\uff1b \u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u8fdb\u884c\u7f13\u5b58\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002 3. \u5f02\u6b65 \u67d0\u4e9b\u6d41\u7a0b\u53ef\u4ee5\u5c06\u64cd\u4f5c\u8f6c\u6362\u4e3a\u6d88\u606f\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u4e4b\u540e\u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u88ab\u5f02\u6b65\u5904\u7406\u3002 \u4e8c\u3001\u4f38\u7f29\u6027 \u6307\u4e0d\u65ad\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u670d\u52a1\u5668\u6765\u7f13\u89e3\u4e0d\u65ad\u4e0a\u5347\u7684\u7528\u6237\u5e76\u53d1\u8bbf\u95ee\u538b\u529b\u548c\u4e0d\u65ad\u589e\u957f\u7684\u6570\u636e\u5b58\u50a8\u9700\u6c42\u3002 \u4f38\u7f29\u6027\u4e0e\u6027\u80fd \u5982\u679c\u7cfb\u7edf\u5b58\u5728\u6027\u80fd\u95ee\u9898\uff0c\u90a3\u4e48\u5355\u4e2a\u7528\u6237\u7684\u8bf7\u6c42\u603b\u662f\u5f88\u6162\u7684\uff1b \u5982\u679c\u7cfb\u7edf\u5b58\u5728\u4f38\u7f29\u6027\u95ee\u9898\uff0c\u90a3\u4e48\u5355\u4e2a\u7528\u6237\u7684\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5f88\u5feb\uff0c\u4f46\u662f\u5728\u5e76\u53d1\u6570\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\u7cfb\u7edf\u4f1a\u5f88\u6162\u3002 \u5b9e\u73b0\u4f38\u7f29\u6027 \u5e94\u7528\u670d\u52a1\u5668\u53ea\u8981\u4e0d\u5177\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u65b0\u7684\u670d\u52a1\u5668\u3002 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f38\u7f29\u6027\u901a\u8fc7 Sharding \u6765\u5b9e\u73b0\uff0c\u5c06\u6570\u636e\u6309\u4e00\u5b9a\u7684\u89c4\u5219\u5206\u5e03\u5230\u4e0d\u540c\u7684\u8282\u70b9\u4e0a\uff0c\u4ece\u800c\u89e3\u51b3\u5355\u53f0\u5b58\u50a8\u670d\u52a1\u5668\u7684\u5b58\u50a8\u7a7a\u95f4\u9650\u5236\u3002 \u5bf9\u4e8e\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5b83\u4eec\u5929\u751f\u5c31\u662f\u4e3a\u6d77\u91cf\u6570\u636e\u800c\u8bde\u751f\uff0c\u5bf9\u4f38\u7f29\u6027\u7684\u652f\u6301\u7279\u522b\u597d\u3002 \u4e09\u3001\u6269\u5c55\u6027 \u6307\u7684\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u5bf9\u73b0\u6709\u7cfb\u7edf\u7684\u5176\u5b83\u5e94\u7528\u65e0\u5f71\u54cd\uff0c\u8fd9\u5c31\u8981\u6c42\u4e0d\u540c\u5e94\u7528\u5177\u5907\u4f4e\u8026\u5408\u7684\u7279\u70b9\u3002 \u5b9e\u73b0\u53ef\u6269\u5c55\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u6d88\u606f\u961f\u5217\u8fdb\u884c\u89e3\u8026\uff0c\u5e94\u7528\u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u8fdb\u884c\u901a\u4fe1\uff1b \u4f7f\u7528\u5206\u5e03\u5f0f\u670d\u52a1\u5c06\u4e1a\u52a1\u548c\u53ef\u590d\u7528\u7684\u670d\u52a1\u5206\u79bb\u5f00\u6765\uff0c\u4e1a\u52a1\u4f7f\u7528\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u8c03\u7528\u53ef\u590d\u7528\u7684\u670d\u52a1\u3002\u65b0\u589e\u7684\u4ea7\u54c1\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u53ef\u590d\u7528\u7684\u670d\u52a1\u6765\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u5bf9\u5176\u5b83\u4ea7\u54c1\u6ca1\u6709\u5f71\u54cd\u3002 \u56db\u3001\u53ef\u7528\u6027 \u5197\u4f59 \u4fdd\u8bc1\u9ad8\u53ef\u7528\u7684\u4e3b\u8981\u624b\u6bb5\u662f\u4f7f\u7528\u5197\u4f59\uff0c\u5f53\u67d0\u4e2a\u670d\u52a1\u5668\u6545\u969c\u65f6\u5c31\u8bf7\u6c42\u5176\u5b83\u670d\u52a1\u5668\u3002 \u5e94\u7528\u670d\u52a1\u5668\u7684\u5197\u4f59\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\uff0c\u53ea\u8981\u4fdd\u8bc1\u5e94\u7528\u670d\u52a1\u5668\u4e0d\u5177\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u67d0\u4e2a\u5e94\u7528\u670d\u52a1\u5668\u6545\u969c\u65f6\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u8be5\u5e94\u7528\u670d\u52a1\u5668\u539f\u5148\u7684\u7528\u6237\u8bf7\u6c42\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u670d\u52a1\u5668\u4e0a\uff0c\u4e0d\u4f1a\u5bf9\u7528\u6237\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u5b58\u50a8\u670d\u52a1\u5668\u7684\u5197\u4f59\u9700\u8981\u4f7f\u7528\u4e3b\u4ece\u590d\u5236\u6765\u5b9e\u73b0\uff0c\u5f53\u4e3b\u670d\u52a1\u5668\u6545\u969c\u65f6\uff0c\u9700\u8981\u63d0\u5347\u4ece\u670d\u52a1\u5668\u4e3a\u4e3b\u670d\u52a1\u5668\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5207\u6362\u3002 \u76d1\u63a7 \u5bf9 CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u3001\u7f51\u7edc\u7b49\u7cfb\u7edf\u8d1f\u8f7d\u4fe1\u606f\u8fdb\u884c\u76d1\u63a7\uff0c\u5f53\u67d0\u4e2a\u4fe1\u606f\u8fbe\u5230\u4e00\u5b9a\u9608\u503c\u65f6\u901a\u77e5\u8fd0\u7ef4\u4eba\u5458\uff0c\u4ece\u800c\u5728\u7cfb\u7edf\u53d1\u751f\u6545\u969c\u4e4b\u524d\u53ca\u65f6\u53d1\u73b0\u95ee\u9898\u3002 \u670d\u52a1\u964d\u7ea7 \u670d\u52a1\u964d\u7ea7\u662f\u7cfb\u7edf\u4e3a\u4e86\u5e94\u5bf9\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u4e3b\u52a8\u5173\u95ed\u90e8\u5206\u529f\u80fd\uff0c\u4ece\u800c\u4fdd\u8bc1\u6838\u5fc3\u529f\u80fd\u53ef\u7528\u3002 \u4e94\u3001\u5b89\u5168\u6027 \u8981\u6c42\u7cfb\u7edf\u5728\u5e94\u5bf9\u5404\u79cd\u653b\u51fb\u624b\u6bb5\u65f6\u80fd\u591f\u6709\u53ef\u9760\u7684\u5e94\u5bf9\u63aa\u65bd\u3002 \u53c2\u8003\u8d44\u6599 \u5927\u578b\u7f51\u7ad9\u6280\u672f\u67b6\u6784\uff1a\u6838\u5fc3\u539f\u7406\u4e0e\u6848\u4f8b\u5206\u6790","title":"\u6d4b\u8bd5.1"},{"location":"aaa/a1/#_1","text":"","title":"\u7cfb\u7edf\u8bbe\u8ba1\u57fa\u7840"},{"location":"aaa/a1/#_2","text":"","title":"\u4e00\u3001\u6027\u80fd"},{"location":"aaa/a1/#_3","text":"","title":"\u6027\u80fd\u6307\u6807"},{"location":"aaa/a1/#1","text":"\u6307\u67d0\u4e2a\u8bf7\u6c42\u4ece\u53d1\u51fa\u5230\u63a5\u6536\u5230\u54cd\u5e94\u6d88\u8017\u7684\u65f6\u95f4\u3002 \u5728\u5bf9\u54cd\u5e94\u65f6\u95f4\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u901a\u5e38\u91c7\u7528\u91cd\u590d\u8bf7\u6c42\u7684\u65b9\u5f0f\uff0c\u7136\u540e\u8ba1\u7b97\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u3002","title":"1. \u54cd\u5e94\u65f6\u95f4"},{"location":"aaa/a1/#2","text":"\u6307\u7cfb\u7edf\u5728\u5355\u4f4d\u65f6\u95f4\u5185\u53ef\u4ee5\u5904\u7406\u7684\u8bf7\u6c42\u6570\u91cf\uff0c\u901a\u5e38\u4f7f\u7528\u6bcf\u79d2\u7684\u8bf7\u6c42\u6570\u6765\u8861\u91cf\u3002","title":"2. \u541e\u5410\u91cf"},{"location":"aaa/a1/#3","text":"\u6307\u7cfb\u7edf\u80fd\u540c\u65f6\u5904\u7406\u7684\u5e76\u53d1\u7528\u6237\u8bf7\u6c42\u6570\u91cf\u3002 \u5728\u6ca1\u6709\u5e76\u53d1\u5b58\u5728\u7684\u7cfb\u7edf\u4e2d\uff0c\u8bf7\u6c42\u88ab\u987a\u5e8f\u6267\u884c\uff0c\u6b64\u65f6\u54cd\u5e94\u65f6\u95f4\u4e3a\u541e\u5410\u91cf\u7684\u5012\u6570\u3002\u4f8b\u5982\u7cfb\u7edf\u652f\u6301\u7684\u541e\u5410\u91cf\u4e3a 100 req/s\uff0c\u90a3\u4e48\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u5e94\u8be5\u4e3a 0.01s\u3002 \u76ee\u524d\u7684\u5927\u578b\u7cfb\u7edf\u90fd\u652f\u6301\u591a\u7ebf\u7a0b\u6765\u5904\u7406\u5e76\u53d1\u8bf7\u6c42\uff0c\u591a\u7ebf\u7a0b\u80fd\u591f\u63d0\u9ad8\u541e\u5410\u91cf\u4ee5\u53ca\u7f29\u77ed\u54cd\u5e94\u65f6\u95f4\uff0c\u4e3b\u8981\u6709\u4e24\u4e2a\u539f\u56e0\uff1a \u591a CPU IO \u7b49\u5f85\u65f6\u95f4 \u4f7f\u7528 IO \u591a\u8def\u590d\u7528\u7b49\u65b9\u5f0f\uff0c\u7cfb\u7edf\u5728\u7b49\u5f85\u4e00\u4e2a IO \u64cd\u4f5c\u5b8c\u6210\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\u4e0d\u9700\u8981\u88ab\u963b\u585e\uff0c\u53ef\u4ee5\u53bb\u5904\u7406\u5176\u5b83\u8bf7\u6c42\u3002\u901a\u8fc7\u5c06\u8fd9\u4e2a\u7b49\u5f85\u65f6\u95f4\u5229\u7528\u8d77\u6765\uff0c\u4f7f\u5f97 CPU \u5229\u7528\u7387\u5927\u5927\u63d0\u9ad8\u3002 \u5e76\u53d1\u7528\u6237\u6570\u4e0d\u662f\u8d8a\u9ad8\u8d8a\u597d\uff0c\u56e0\u4e3a\u5982\u679c\u5e76\u53d1\u7528\u6237\u6570\u592a\u9ad8\uff0c\u7cfb\u7edf\u6765\u4e0d\u53ca\u5904\u7406\u8fd9\u4e48\u591a\u7684\u8bf7\u6c42\uff0c\u4f1a\u4f7f\u5f97\u8fc7\u591a\u7684\u8bf7\u6c42\u9700\u8981\u7b49\u5f85\uff0c\u90a3\u4e48\u54cd\u5e94\u65f6\u95f4\u5c31\u4f1a\u5927\u5927\u63d0\u9ad8\u3002","title":"3. \u5e76\u53d1\u7528\u6237\u6570"},{"location":"aaa/a1/#_4","text":"","title":"\u6027\u80fd\u4f18\u5316"},{"location":"aaa/a1/#1_1","text":"\u5c06\u591a\u53f0\u670d\u52a1\u5668\u7ec4\u6210\u96c6\u7fa4\uff0c\u4f7f\u7528\u8d1f\u8f7d\u5747\u8861\u5c06\u8bf7\u6c42\u8f6c\u53d1\u5230\u96c6\u7fa4\u4e2d\uff0c\u907f\u514d\u5355\u4e00\u670d\u52a1\u5668\u7684\u8d1f\u8f7d\u538b\u529b\u8fc7\u5927\u5bfc\u81f4\u6027\u80fd\u964d\u4f4e\u3002","title":"1. \u96c6\u7fa4"},{"location":"aaa/a1/#2_1","text":"\u7f13\u5b58\u80fd\u591f\u63d0\u9ad8\u6027\u80fd\u7684\u539f\u56e0\u5982\u4e0b\uff1a \u7f13\u5b58\u6570\u636e\u901a\u5e38\u4f4d\u4e8e\u5185\u5b58\u7b49\u4ecb\u8d28\u4e2d\uff0c\u8fd9\u79cd\u4ecb\u8d28\u5bf9\u4e8e\u8bfb\u64cd\u4f5c\u7279\u522b\u5feb\uff1b \u7f13\u5b58\u6570\u636e\u53ef\u4ee5\u4f4d\u4e8e\u9760\u8fd1\u7528\u6237\u7684\u5730\u7406\u4f4d\u7f6e\u4e0a\uff1b \u53ef\u4ee5\u5c06\u8ba1\u7b97\u7ed3\u679c\u8fdb\u884c\u7f13\u5b58\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u8ba1\u7b97\u3002","title":"2. \u7f13\u5b58"},{"location":"aaa/a1/#3_1","text":"\u67d0\u4e9b\u6d41\u7a0b\u53ef\u4ee5\u5c06\u64cd\u4f5c\u8f6c\u6362\u4e3a\u6d88\u606f\uff0c\u5c06\u6d88\u606f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e4b\u540e\u7acb\u5373\u8fd4\u56de\uff0c\u4e4b\u540e\u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u88ab\u5f02\u6b65\u5904\u7406\u3002","title":"3. \u5f02\u6b65"},{"location":"aaa/a1/#_5","text":"\u6307\u4e0d\u65ad\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u670d\u52a1\u5668\u6765\u7f13\u89e3\u4e0d\u65ad\u4e0a\u5347\u7684\u7528\u6237\u5e76\u53d1\u8bbf\u95ee\u538b\u529b\u548c\u4e0d\u65ad\u589e\u957f\u7684\u6570\u636e\u5b58\u50a8\u9700\u6c42\u3002","title":"\u4e8c\u3001\u4f38\u7f29\u6027"},{"location":"aaa/a1/#_6","text":"\u5982\u679c\u7cfb\u7edf\u5b58\u5728\u6027\u80fd\u95ee\u9898\uff0c\u90a3\u4e48\u5355\u4e2a\u7528\u6237\u7684\u8bf7\u6c42\u603b\u662f\u5f88\u6162\u7684\uff1b \u5982\u679c\u7cfb\u7edf\u5b58\u5728\u4f38\u7f29\u6027\u95ee\u9898\uff0c\u90a3\u4e48\u5355\u4e2a\u7528\u6237\u7684\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5f88\u5feb\uff0c\u4f46\u662f\u5728\u5e76\u53d1\u6570\u5f88\u9ad8\u7684\u60c5\u51b5\u4e0b\u7cfb\u7edf\u4f1a\u5f88\u6162\u3002","title":"\u4f38\u7f29\u6027\u4e0e\u6027\u80fd"},{"location":"aaa/a1/#_7","text":"\u5e94\u7528\u670d\u52a1\u5668\u53ea\u8981\u4e0d\u5177\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u901a\u8fc7\u8d1f\u8f7d\u5747\u8861\u5668\u5411\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u65b0\u7684\u670d\u52a1\u5668\u3002 \u5173\u7cfb\u578b\u6570\u636e\u5e93\u7684\u4f38\u7f29\u6027\u901a\u8fc7 Sharding \u6765\u5b9e\u73b0\uff0c\u5c06\u6570\u636e\u6309\u4e00\u5b9a\u7684\u89c4\u5219\u5206\u5e03\u5230\u4e0d\u540c\u7684\u8282\u70b9\u4e0a\uff0c\u4ece\u800c\u89e3\u51b3\u5355\u53f0\u5b58\u50a8\u670d\u52a1\u5668\u7684\u5b58\u50a8\u7a7a\u95f4\u9650\u5236\u3002 \u5bf9\u4e8e\u975e\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u5b83\u4eec\u5929\u751f\u5c31\u662f\u4e3a\u6d77\u91cf\u6570\u636e\u800c\u8bde\u751f\uff0c\u5bf9\u4f38\u7f29\u6027\u7684\u652f\u6301\u7279\u522b\u597d\u3002","title":"\u5b9e\u73b0\u4f38\u7f29\u6027"},{"location":"aaa/a1/#_8","text":"\u6307\u7684\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u5bf9\u73b0\u6709\u7cfb\u7edf\u7684\u5176\u5b83\u5e94\u7528\u65e0\u5f71\u54cd\uff0c\u8fd9\u5c31\u8981\u6c42\u4e0d\u540c\u5e94\u7528\u5177\u5907\u4f4e\u8026\u5408\u7684\u7279\u70b9\u3002 \u5b9e\u73b0\u53ef\u6269\u5c55\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u6d88\u606f\u961f\u5217\u8fdb\u884c\u89e3\u8026\uff0c\u5e94\u7528\u4e4b\u95f4\u901a\u8fc7\u6d88\u606f\u4f20\u9012\u8fdb\u884c\u901a\u4fe1\uff1b \u4f7f\u7528\u5206\u5e03\u5f0f\u670d\u52a1\u5c06\u4e1a\u52a1\u548c\u53ef\u590d\u7528\u7684\u670d\u52a1\u5206\u79bb\u5f00\u6765\uff0c\u4e1a\u52a1\u4f7f\u7528\u5206\u5e03\u5f0f\u670d\u52a1\u6846\u67b6\u8c03\u7528\u53ef\u590d\u7528\u7684\u670d\u52a1\u3002\u65b0\u589e\u7684\u4ea7\u54c1\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u53ef\u590d\u7528\u7684\u670d\u52a1\u6765\u5b9e\u73b0\u4e1a\u52a1\u903b\u8f91\uff0c\u5bf9\u5176\u5b83\u4ea7\u54c1\u6ca1\u6709\u5f71\u54cd\u3002","title":"\u4e09\u3001\u6269\u5c55\u6027"},{"location":"aaa/a1/#_9","text":"","title":"\u56db\u3001\u53ef\u7528\u6027"},{"location":"aaa/a1/#_10","text":"\u4fdd\u8bc1\u9ad8\u53ef\u7528\u7684\u4e3b\u8981\u624b\u6bb5\u662f\u4f7f\u7528\u5197\u4f59\uff0c\u5f53\u67d0\u4e2a\u670d\u52a1\u5668\u6545\u969c\u65f6\u5c31\u8bf7\u6c42\u5176\u5b83\u670d\u52a1\u5668\u3002 \u5e94\u7528\u670d\u52a1\u5668\u7684\u5197\u4f59\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\uff0c\u53ea\u8981\u4fdd\u8bc1\u5e94\u7528\u670d\u52a1\u5668\u4e0d\u5177\u6709\u72b6\u6001\uff0c\u90a3\u4e48\u67d0\u4e2a\u5e94\u7528\u670d\u52a1\u5668\u6545\u969c\u65f6\uff0c\u8d1f\u8f7d\u5747\u8861\u5668\u5c06\u8be5\u5e94\u7528\u670d\u52a1\u5668\u539f\u5148\u7684\u7528\u6237\u8bf7\u6c42\u8f6c\u53d1\u5230\u53e6\u4e00\u4e2a\u5e94\u7528\u670d\u52a1\u5668\u4e0a\uff0c\u4e0d\u4f1a\u5bf9\u7528\u6237\u6709\u4efb\u4f55\u5f71\u54cd\u3002 \u5b58\u50a8\u670d\u52a1\u5668\u7684\u5197\u4f59\u9700\u8981\u4f7f\u7528\u4e3b\u4ece\u590d\u5236\u6765\u5b9e\u73b0\uff0c\u5f53\u4e3b\u670d\u52a1\u5668\u6545\u969c\u65f6\uff0c\u9700\u8981\u63d0\u5347\u4ece\u670d\u52a1\u5668\u4e3a\u4e3b\u670d\u52a1\u5668\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a\u5207\u6362\u3002","title":"\u5197\u4f59"},{"location":"aaa/a1/#_11","text":"\u5bf9 CPU\u3001\u5185\u5b58\u3001\u78c1\u76d8\u3001\u7f51\u7edc\u7b49\u7cfb\u7edf\u8d1f\u8f7d\u4fe1\u606f\u8fdb\u884c\u76d1\u63a7\uff0c\u5f53\u67d0\u4e2a\u4fe1\u606f\u8fbe\u5230\u4e00\u5b9a\u9608\u503c\u65f6\u901a\u77e5\u8fd0\u7ef4\u4eba\u5458\uff0c\u4ece\u800c\u5728\u7cfb\u7edf\u53d1\u751f\u6545\u969c\u4e4b\u524d\u53ca\u65f6\u53d1\u73b0\u95ee\u9898\u3002","title":"\u76d1\u63a7"},{"location":"aaa/a1/#_12","text":"\u670d\u52a1\u964d\u7ea7\u662f\u7cfb\u7edf\u4e3a\u4e86\u5e94\u5bf9\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u4e3b\u52a8\u5173\u95ed\u90e8\u5206\u529f\u80fd\uff0c\u4ece\u800c\u4fdd\u8bc1\u6838\u5fc3\u529f\u80fd\u53ef\u7528\u3002","title":"\u670d\u52a1\u964d\u7ea7"},{"location":"aaa/a1/#_13","text":"\u8981\u6c42\u7cfb\u7edf\u5728\u5e94\u5bf9\u5404\u79cd\u653b\u51fb\u624b\u6bb5\u65f6\u80fd\u591f\u6709\u53ef\u9760\u7684\u5e94\u5bf9\u63aa\u65bd\u3002","title":"\u4e94\u3001\u5b89\u5168\u6027"},{"location":"aaa/a1/#_14","text":"\u5927\u578b\u7f51\u7ad9\u6280\u672f\u67b6\u6784\uff1a\u6838\u5fc3\u539f\u7406\u4e0e\u6848\u4f8b\u5206\u6790","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/","text":"\u6d88\u606f\u961f\u5217 \u6d88\u606f\u961f\u5217 \u4e00\u3001\u6d88\u606f\u6a21\u578b \u70b9\u5bf9\u70b9 \u53d1\u5e03/\u8ba2\u9605 \u4e8c\u3001\u4f7f\u7528\u573a\u666f \u5f02\u6b65\u5904\u7406 \u6d41\u91cf\u524a\u950b \u5e94\u7528\u89e3\u8026 \u4e09\u3001\u53ef\u9760\u6027 \u53d1\u9001\u7aef\u7684\u53ef\u9760\u6027 \u63a5\u6536\u7aef\u7684\u53ef\u9760\u6027 \u53c2\u8003\u8d44\u6599 \u4e00\u3001\u6d88\u606f\u6a21\u578b \u70b9\u5bf9\u70b9 \u6d88\u606f\u751f\u4ea7\u8005\u5411\u6d88\u606f\u961f\u5217\u4e2d\u53d1\u9001\u4e86\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u53ea\u80fd\u88ab\u4e00\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u4e00\u6b21\u3002 \u53d1\u5e03/\u8ba2\u9605 \u6d88\u606f\u751f\u4ea7\u8005\u5411\u9891\u9053\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u53ef\u4ee5\u4ece\u8be5\u9891\u9053\u8ba2\u9605\u5230\u8fd9\u6761\u6d88\u606f\u5e76\u6d88\u8d39\u3002 \u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u548c\u89c2\u5bdf\u8005\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\uff0c\u89c2\u5bdf\u8005\u548c\u4e3b\u9898\u90fd\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\uff1b\u800c\u5728\u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u4e2d\uff0c\u751f\u4ea7\u8005\u4e0e\u6d88\u8d39\u8005\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\uff0c\u5b83\u4eec\u4e4b\u95f4\u901a\u8fc7\u9891\u9053\u8fdb\u884c\u901a\u4fe1\u3002 \u89c2\u5bdf\u8005\u6a21\u5f0f\u662f\u540c\u6b65\u7684\uff0c\u5f53\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u4e3b\u9898\u4f1a\u8c03\u7528\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u7b49\u5f85\u65b9\u6cd5\u8fd4\u56de\uff1b\u800c\u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u662f\u5f02\u6b65\u7684\uff0c\u751f\u4ea7\u8005\u5411\u9891\u9053\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u6d88\u8d39\u8005\u4f55\u65f6\u53bb\u8ba2\u9605\u8fd9\u4e2a\u6d88\u606f\uff0c\u53ef\u4ee5\u7acb\u5373\u8fd4\u56de\u3002 \u4e8c\u3001\u4f7f\u7528\u573a\u666f \u5f02\u6b65\u5904\u7406 \u53d1\u9001\u8005\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0c\u4e0d\u9700\u8981\u540c\u6b65\u7b49\u5f85\u6d88\u606f\u63a5\u6536\u8005\u5904\u7406\u5b8c\u6bd5\uff0c\u800c\u662f\u7acb\u5373\u8fd4\u56de\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c\u3002\u6d88\u606f\u63a5\u6536\u8005\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u4e4b\u540e\u5f02\u6b65\u5904\u7406\u3002 \u4f8b\u5982\u5728\u6ce8\u518c\u6d41\u7a0b\u4e2d\u901a\u5e38\u9700\u8981\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u6765\u786e\u4fdd\u6ce8\u518c\u7528\u6237\u8eab\u4efd\u7684\u5408\u6cd5\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d88\u606f\u961f\u5217\u4f7f\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u7684\u64cd\u4f5c\u5f02\u6b65\u5904\u7406\uff0c\u7528\u6237\u5728\u586b\u5199\u5b8c\u6ce8\u518c\u4fe1\u606f\u4e4b\u540e\u5c31\u53ef\u4ee5\u5b8c\u6210\u6ce8\u518c\uff0c\u800c\u5c06\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u8fd9\u4e00\u6d88\u606f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\u3002 \u53ea\u6709\u5728\u4e1a\u52a1\u6d41\u7a0b\u5141\u8bb8\u5f02\u6b65\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u8fd9\u4e48\u505a\uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u6ce8\u518c\u6d41\u7a0b\u4e2d\uff0c\u5982\u679c\u8981\u6c42\u7528\u6237\u5bf9\u9a8c\u8bc1\u90ae\u4ef6\u8fdb\u884c\u70b9\u51fb\u4e4b\u540e\u624d\u80fd\u5b8c\u6210\u6ce8\u518c\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u6d88\u606f\u961f\u5217\u3002 \u6d41\u91cf\u524a\u950b \u5728\u9ad8\u5e76\u53d1\u7684\u573a\u666f\u4e0b\uff0c\u5982\u679c\u77ed\u65f6\u95f4\u6709\u5927\u91cf\u7684\u8bf7\u6c42\u5230\u8fbe\u4f1a\u538b\u57ae\u670d\u52a1\u5668\u3002 \u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u670d\u52a1\u5668\u6309\u7167\u5176\u5904\u7406\u80fd\u529b\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u8fdb\u884c\u5904\u7406\u3002 \u5e94\u7528\u89e3\u8026 \u5982\u679c\u6a21\u5757\u4e4b\u95f4\u4e0d\u76f4\u63a5\u8fdb\u884c\u8c03\u7528\uff0c\u6a21\u5757\u4e4b\u95f4\u8026\u5408\u5ea6\u5c31\u4f1a\u5f88\u4f4e\uff0c\u90a3\u4e48\u4fee\u6539\u4e00\u4e2a\u6a21\u5757\u6216\u8005\u65b0\u589e\u4e00\u4e2a\u6a21\u5757\u5bf9\u5176\u5b83\u6a21\u5757\u7684\u5f71\u54cd\u4f1a\u5f88\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u53ef\u6269\u5c55\u6027\u3002 \u901a\u8fc7\u4f7f\u7528\u6d88\u606f\u961f\u5217\uff0c\u4e00\u4e2a\u6a21\u5757\u53ea\u9700\u8981\u5411\u6d88\u606f\u961f\u5217\u4e2d\u53d1\u9001\u6d88\u606f\uff0c\u5176\u5b83\u6a21\u5757\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u4ece\u800c\u5b8c\u6210\u8c03\u7528\u3002 \u4e09\u3001\u53ef\u9760\u6027 \u53d1\u9001\u7aef\u7684\u53ef\u9760\u6027 \u53d1\u9001\u7aef\u5b8c\u6210\u64cd\u4f5c\u540e\u4e00\u5b9a\u80fd\u5c06\u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\u3002 \u5b9e\u73b0\u65b9\u6cd5\uff1a\u5728\u672c\u5730\u6570\u636e\u5e93\u5efa\u4e00\u5f20\u6d88\u606f\u8868\uff0c\u5c06\u6d88\u606f\u6570\u636e\u4e0e\u4e1a\u52a1\u6570\u636e\u4fdd\u5b58\u5728\u540c\u4e00\u6570\u636e\u5e93\u5b9e\u4f8b\u91cc\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u672c\u5730\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u673a\u5236\u3002\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u540e\uff0c\u5c06\u6d88\u606f\u8868\u4e2d\u7684\u6d88\u606f\u8f6c\u79fb\u5230\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u82e5\u8f6c\u79fb\u6d88\u606f\u6210\u529f\u5219\u5220\u9664\u6d88\u606f\u8868\u4e2d\u7684\u6570\u636e\uff0c\u5426\u5219\u7ee7\u7eed\u91cd\u4f20\u3002 \u63a5\u6536\u7aef\u7684\u53ef\u9760\u6027 \u63a5\u6536\u7aef\u80fd\u591f\u4ece\u6d88\u606f\u961f\u5217\u6210\u529f\u6d88\u8d39\u4e00\u6b21\u6d88\u606f\u3002 \u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a \u4fdd\u8bc1\u63a5\u6536\u7aef\u5904\u7406\u6d88\u606f\u7684\u4e1a\u52a1\u903b\u8f91\u5177\u6709\u5e42\u7b49\u6027\uff1a\u53ea\u8981\u5177\u6709\u5e42\u7b49\u6027\uff0c\u90a3\u4e48\u6d88\u8d39\u591a\u5c11\u6b21\u6d88\u606f\uff0c\u6700\u540e\u5904\u7406\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4fdd\u8bc1\u6d88\u606f\u5177\u6709\u552f\u4e00\u7f16\u53f7\uff0c\u5e76\u4f7f\u7528\u4e00\u5f20\u65e5\u5fd7\u8868\u6765\u8bb0\u5f55\u5df2\u7ecf\u6d88\u8d39\u7684\u6d88\u606f\u7f16\u53f7\u3002 \u53c2\u8003\u8d44\u6599 Observer vs Pub-Sub \u6d88\u606f\u961f\u5217\u4e2d\u70b9\u5bf9\u70b9\u4e0e\u53d1\u5e03\u8ba2\u9605\u533a\u522b","title":"\u6d88\u606f\u961f\u5217"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_1","text":"\u6d88\u606f\u961f\u5217 \u4e00\u3001\u6d88\u606f\u6a21\u578b \u70b9\u5bf9\u70b9 \u53d1\u5e03/\u8ba2\u9605 \u4e8c\u3001\u4f7f\u7528\u573a\u666f \u5f02\u6b65\u5904\u7406 \u6d41\u91cf\u524a\u950b \u5e94\u7528\u89e3\u8026 \u4e09\u3001\u53ef\u9760\u6027 \u53d1\u9001\u7aef\u7684\u53ef\u9760\u6027 \u63a5\u6536\u7aef\u7684\u53ef\u9760\u6027 \u53c2\u8003\u8d44\u6599","title":"\u6d88\u606f\u961f\u5217"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_2","text":"","title":"\u4e00\u3001\u6d88\u606f\u6a21\u578b"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_3","text":"\u6d88\u606f\u751f\u4ea7\u8005\u5411\u6d88\u606f\u961f\u5217\u4e2d\u53d1\u9001\u4e86\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u53ea\u80fd\u88ab\u4e00\u4e2a\u6d88\u8d39\u8005\u6d88\u8d39\u4e00\u6b21\u3002","title":"\u70b9\u5bf9\u70b9"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_4","text":"\u6d88\u606f\u751f\u4ea7\u8005\u5411\u9891\u9053\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u591a\u4e2a\u6d88\u8d39\u8005\u53ef\u4ee5\u4ece\u8be5\u9891\u9053\u8ba2\u9605\u5230\u8fd9\u6761\u6d88\u606f\u5e76\u6d88\u8d39\u3002 \u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u548c\u89c2\u5bdf\u8005\u6a21\u5f0f\u6709\u4ee5\u4e0b\u4e0d\u540c\uff1a \u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\uff0c\u89c2\u5bdf\u8005\u548c\u4e3b\u9898\u90fd\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\uff1b\u800c\u5728\u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u4e2d\uff0c\u751f\u4ea7\u8005\u4e0e\u6d88\u8d39\u8005\u4e0d\u77e5\u9053\u5bf9\u65b9\u7684\u5b58\u5728\uff0c\u5b83\u4eec\u4e4b\u95f4\u901a\u8fc7\u9891\u9053\u8fdb\u884c\u901a\u4fe1\u3002 \u89c2\u5bdf\u8005\u6a21\u5f0f\u662f\u540c\u6b65\u7684\uff0c\u5f53\u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u4e3b\u9898\u4f1a\u8c03\u7528\u89c2\u5bdf\u8005\u7684\u65b9\u6cd5\uff0c\u7136\u540e\u7b49\u5f85\u65b9\u6cd5\u8fd4\u56de\uff1b\u800c\u53d1\u5e03\u4e0e\u8ba2\u9605\u6a21\u5f0f\u662f\u5f02\u6b65\u7684\uff0c\u751f\u4ea7\u8005\u5411\u9891\u9053\u53d1\u9001\u4e00\u4e2a\u6d88\u606f\u4e4b\u540e\uff0c\u5c31\u4e0d\u9700\u8981\u5173\u5fc3\u6d88\u8d39\u8005\u4f55\u65f6\u53bb\u8ba2\u9605\u8fd9\u4e2a\u6d88\u606f\uff0c\u53ef\u4ee5\u7acb\u5373\u8fd4\u56de\u3002","title":"\u53d1\u5e03/\u8ba2\u9605"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_5","text":"","title":"\u4e8c\u3001\u4f7f\u7528\u573a\u666f"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_6","text":"\u53d1\u9001\u8005\u5c06\u6d88\u606f\u53d1\u9001\u7ed9\u6d88\u606f\u961f\u5217\u4e4b\u540e\uff0c\u4e0d\u9700\u8981\u540c\u6b65\u7b49\u5f85\u6d88\u606f\u63a5\u6536\u8005\u5904\u7406\u5b8c\u6bd5\uff0c\u800c\u662f\u7acb\u5373\u8fd4\u56de\u8fdb\u884c\u5176\u5b83\u64cd\u4f5c\u3002\u6d88\u606f\u63a5\u6536\u8005\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u4e4b\u540e\u5f02\u6b65\u5904\u7406\u3002 \u4f8b\u5982\u5728\u6ce8\u518c\u6d41\u7a0b\u4e2d\u901a\u5e38\u9700\u8981\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u6765\u786e\u4fdd\u6ce8\u518c\u7528\u6237\u8eab\u4efd\u7684\u5408\u6cd5\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u6d88\u606f\u961f\u5217\u4f7f\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u7684\u64cd\u4f5c\u5f02\u6b65\u5904\u7406\uff0c\u7528\u6237\u5728\u586b\u5199\u5b8c\u6ce8\u518c\u4fe1\u606f\u4e4b\u540e\u5c31\u53ef\u4ee5\u5b8c\u6210\u6ce8\u518c\uff0c\u800c\u5c06\u53d1\u9001\u9a8c\u8bc1\u90ae\u4ef6\u8fd9\u4e00\u6d88\u606f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\u3002 \u53ea\u6709\u5728\u4e1a\u52a1\u6d41\u7a0b\u5141\u8bb8\u5f02\u6b65\u5904\u7406\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u8fd9\u4e48\u505a\uff0c\u4f8b\u5982\u4e0a\u9762\u7684\u6ce8\u518c\u6d41\u7a0b\u4e2d\uff0c\u5982\u679c\u8981\u6c42\u7528\u6237\u5bf9\u9a8c\u8bc1\u90ae\u4ef6\u8fdb\u884c\u70b9\u51fb\u4e4b\u540e\u624d\u80fd\u5b8c\u6210\u6ce8\u518c\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u518d\u4f7f\u7528\u6d88\u606f\u961f\u5217\u3002","title":"\u5f02\u6b65\u5904\u7406"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_7","text":"\u5728\u9ad8\u5e76\u53d1\u7684\u573a\u666f\u4e0b\uff0c\u5982\u679c\u77ed\u65f6\u95f4\u6709\u5927\u91cf\u7684\u8bf7\u6c42\u5230\u8fbe\u4f1a\u538b\u57ae\u670d\u52a1\u5668\u3002 \u53ef\u4ee5\u5c06\u8bf7\u6c42\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u670d\u52a1\u5668\u6309\u7167\u5176\u5904\u7406\u80fd\u529b\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u8fdb\u884c\u5904\u7406\u3002","title":"\u6d41\u91cf\u524a\u950b"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_8","text":"\u5982\u679c\u6a21\u5757\u4e4b\u95f4\u4e0d\u76f4\u63a5\u8fdb\u884c\u8c03\u7528\uff0c\u6a21\u5757\u4e4b\u95f4\u8026\u5408\u5ea6\u5c31\u4f1a\u5f88\u4f4e\uff0c\u90a3\u4e48\u4fee\u6539\u4e00\u4e2a\u6a21\u5757\u6216\u8005\u65b0\u589e\u4e00\u4e2a\u6a21\u5757\u5bf9\u5176\u5b83\u6a21\u5757\u7684\u5f71\u54cd\u4f1a\u5f88\u5c0f\uff0c\u4ece\u800c\u5b9e\u73b0\u53ef\u6269\u5c55\u6027\u3002 \u901a\u8fc7\u4f7f\u7528\u6d88\u606f\u961f\u5217\uff0c\u4e00\u4e2a\u6a21\u5757\u53ea\u9700\u8981\u5411\u6d88\u606f\u961f\u5217\u4e2d\u53d1\u9001\u6d88\u606f\uff0c\u5176\u5b83\u6a21\u5757\u53ef\u4ee5\u9009\u62e9\u6027\u5730\u4ece\u6d88\u606f\u961f\u5217\u4e2d\u8ba2\u9605\u6d88\u606f\u4ece\u800c\u5b8c\u6210\u8c03\u7528\u3002","title":"\u5e94\u7528\u89e3\u8026"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_9","text":"","title":"\u4e09\u3001\u53ef\u9760\u6027"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_10","text":"\u53d1\u9001\u7aef\u5b8c\u6210\u64cd\u4f5c\u540e\u4e00\u5b9a\u80fd\u5c06\u6d88\u606f\u6210\u529f\u53d1\u9001\u5230\u6d88\u606f\u961f\u5217\u4e2d\u3002 \u5b9e\u73b0\u65b9\u6cd5\uff1a\u5728\u672c\u5730\u6570\u636e\u5e93\u5efa\u4e00\u5f20\u6d88\u606f\u8868\uff0c\u5c06\u6d88\u606f\u6570\u636e\u4e0e\u4e1a\u52a1\u6570\u636e\u4fdd\u5b58\u5728\u540c\u4e00\u6570\u636e\u5e93\u5b9e\u4f8b\u91cc\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5229\u7528\u672c\u5730\u6570\u636e\u5e93\u7684\u4e8b\u52a1\u673a\u5236\u3002\u4e8b\u52a1\u63d0\u4ea4\u6210\u529f\u540e\uff0c\u5c06\u6d88\u606f\u8868\u4e2d\u7684\u6d88\u606f\u8f6c\u79fb\u5230\u6d88\u606f\u961f\u5217\u4e2d\uff0c\u82e5\u8f6c\u79fb\u6d88\u606f\u6210\u529f\u5219\u5220\u9664\u6d88\u606f\u8868\u4e2d\u7684\u6570\u636e\uff0c\u5426\u5219\u7ee7\u7eed\u91cd\u4f20\u3002","title":"\u53d1\u9001\u7aef\u7684\u53ef\u9760\u6027"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_11","text":"\u63a5\u6536\u7aef\u80fd\u591f\u4ece\u6d88\u606f\u961f\u5217\u6210\u529f\u6d88\u8d39\u4e00\u6b21\u6d88\u606f\u3002 \u4e24\u79cd\u5b9e\u73b0\u65b9\u6cd5\uff1a \u4fdd\u8bc1\u63a5\u6536\u7aef\u5904\u7406\u6d88\u606f\u7684\u4e1a\u52a1\u903b\u8f91\u5177\u6709\u5e42\u7b49\u6027\uff1a\u53ea\u8981\u5177\u6709\u5e42\u7b49\u6027\uff0c\u90a3\u4e48\u6d88\u8d39\u591a\u5c11\u6b21\u6d88\u606f\uff0c\u6700\u540e\u5904\u7406\u7684\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002 \u4fdd\u8bc1\u6d88\u606f\u5177\u6709\u552f\u4e00\u7f16\u53f7\uff0c\u5e76\u4f7f\u7528\u4e00\u5f20\u65e5\u5fd7\u8868\u6765\u8bb0\u5f55\u5df2\u7ecf\u6d88\u8d39\u7684\u6d88\u606f\u7f16\u53f7\u3002","title":"\u63a5\u6536\u7aef\u7684\u53ef\u9760\u6027"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/#_12","text":"Observer vs Pub-Sub \u6d88\u606f\u961f\u5217\u4e2d\u70b9\u5bf9\u70b9\u4e0e\u53d1\u5e03\u8ba2\u9605\u533a\u522b","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/","text":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001 \u4e8c\u3001\u7c7b\u56fe \u6cdb\u5316\u5173\u7cfb (Generalization) \u5b9e\u73b0\u5173\u7cfb (Realization) \u805a\u5408\u5173\u7cfb (Aggregation) \u7ec4\u5408\u5173\u7cfb (Composition) \u5173\u8054\u5173\u7cfb (Association) \u4f9d\u8d56\u5173\u7cfb (Dependency) \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u53c2\u8003\u8d44\u6599 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u5229\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5c06\u6570\u636e\u548c\u57fa\u4e8e\u6570\u636e\u7684\u64cd\u4f5c\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6784\u6210\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u72ec\u7acb\u5b9e\u4f53\u3002\u6570\u636e\u88ab\u4fdd\u62a4\u5728\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5185\u90e8\uff0c\u5c3d\u53ef\u80fd\u5730\u9690\u85cf\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u53ea\u4fdd\u7559\u4e00\u4e9b\u5bf9\u5916\u7684\u63a5\u53e3\u4f7f\u5176\u4e0e\u5916\u90e8\u53d1\u751f\u8054\u7cfb\u3002\u7528\u6237\u65e0\u9700\u5173\u5fc3\u5bf9\u8c61\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u8be5\u5bf9\u8c61\u3002 \u4f18\u70b9\uff1a \u51cf\u5c11\u8026\u5408\uff1a\u53ef\u4ee5\u72ec\u7acb\u5730\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u4f18\u5316\u3001\u4f7f\u7528\u3001\u7406\u89e3\u548c\u4fee\u6539 \u51cf\u8f7b\u7ef4\u62a4\u7684\u8d1f\u62c5\uff1a\u53ef\u4ee5\u66f4\u5bb9\u6613\u88ab\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u5f71\u54cd\u5176\u4ed6\u6a21\u5757 \u6709\u6548\u5730\u8c03\u8282\u6027\u80fd\uff1a\u53ef\u4ee5\u901a\u8fc7\u5256\u6790\u6765\u786e\u5b9a\u54ea\u4e9b\u6a21\u5757\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6027\u80fd \u63d0\u9ad8\u8f6f\u4ef6\u7684\u53ef\u91cd\u7528\u6027 \u964d\u4f4e\u4e86\u6784\u5efa\u5927\u578b\u7cfb\u7edf\u7684\u98ce\u9669\uff1a\u5373\u4f7f\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u4f46\u662f\u8fd9\u4e9b\u72ec\u7acb\u7684\u6a21\u5757\u5374\u6709\u53ef\u80fd\u662f\u53ef\u7528\u7684 \u4ee5\u4e0b Person \u7c7b\u5c01\u88c5 name\u3001gender\u3001age \u7b49\u5c5e\u6027\uff0c\u5916\u754c\u53ea\u80fd\u901a\u8fc7 get() \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a Person \u5bf9\u8c61\u7684 name \u5c5e\u6027\u548c gender \u5c5e\u6027\uff0c\u800c\u65e0\u6cd5\u83b7\u53d6 age \u5c5e\u6027\uff0c\u4f46\u662f age \u5c5e\u6027\u53ef\u4ee5\u4f9b work() \u65b9\u6cd5\u4f7f\u7528\u3002 \u6ce8\u610f\u5230 gender \u5c5e\u6027\u4f7f\u7528 int \u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5c01\u88c5\u4f7f\u5f97\u7528\u6237\u6ce8\u610f\u4e0d\u5230\u8fd9\u79cd\u5b9e\u73b0\u7ec6\u8282\u3002\u5e76\u4e14\u5728\u9700\u8981\u4fee\u6539 gender \u5c5e\u6027\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \"man\" : \"woman\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \" is working very hard!\"); } else { System.out.println(name + \" can't work any more!\"); } } } \u7ee7\u627f \u7ee7\u627f\u5b9e\u73b0\u4e86 IS-A \u5173\u7cfb\uff0c\u4f8b\u5982 Cat \u548c Animal \u5c31\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u56e0\u6b64 Cat \u53ef\u4ee5\u7ee7\u627f\u81ea Animal\uff0c\u4ece\u800c\u83b7\u5f97 Animal \u975e private \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u7ee7\u627f\u5e94\u8be5\u9075\u5faa\u91cc\u6c0f\u66ff\u6362\u539f\u5219\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 Cat \u53ef\u4ee5\u5f53\u505a Animal \u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 Animal \u5f15\u7528 Cat \u5bf9\u8c61\u3002\u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u79f0\u4e3a \u5411\u4e0a\u8f6c\u578b \u3002 Animal animal = new Cat(); \u591a\u6001 \u591a\u6001\u5206\u4e3a\u7f16\u8bd1\u65f6\u591a\u6001\u548c\u8fd0\u884c\u65f6\u591a\u6001\uff1a \u7f16\u8bd1\u65f6\u591a\u6001\u4e3b\u8981\u6307\u65b9\u6cd5\u7684\u91cd\u8f7d \u8fd0\u884c\u65f6\u591a\u6001\u6307\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u5f15\u7528\u6240\u6307\u5411\u7684\u5177\u4f53\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u95f4\u624d\u786e\u5b9a \u8fd0\u884c\u65f6\u591a\u6001\u6709\u4e09\u4e2a\u6761\u4ef6\uff1a \u7ee7\u627f \u8986\u76d6\uff08\u91cd\u5199\uff09 \u5411\u4e0a\u8f6c\u578b \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4e50\u5668\u7c7b\uff08Instrument\uff09\u6709\u4e24\u4e2a\u5b50\u7c7b\uff1aWind \u548c Percussion\uff0c\u5b83\u4eec\u90fd\u8986\u76d6\u4e86\u7236\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728 main() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u7236\u7c7b Instrument \u6765\u5f15\u7528 Wind \u548c Percussion \u5bf9\u8c61\u3002\u5728 Instrument \u5f15\u7528\u8c03\u7528 play() \u65b9\u6cd5\u65f6\uff0c\u4f1a\u6267\u884c\u5b9e\u9645\u5f15\u7528\u5bf9\u8c61\u6240\u5728\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u800c\u4e0d\u662f Instrument \u7c7b\u7684\u65b9\u6cd5\u3002 public class Instrument { public void play() { System.out.println(\"Instument is playing...\"); } } public class Wind extends Instrument { public void play() { System.out.println(\"Wind is playing...\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\"Percussion is playing...\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } Wind is playing... Percussion is playing... \u4e8c\u3001\u7c7b\u56fe \u4ee5\u4e0b\u7c7b\u56fe\u4f7f\u7528 PlantUML \u7ed8\u5236\uff0c\u66f4\u591a\u8bed\u6cd5\u53ca\u4f7f\u7528\u8bf7\u53c2\u8003\uff1ahttp://plantuml.com/ \u3002 \u6cdb\u5316\u5173\u7cfb (Generalization) \u7528\u6765\u63cf\u8ff0\u7ee7\u627f\u5173\u7cfb\uff0c\u5728 Java \u4e2d\u4f7f\u7528 extends \u5173\u952e\u5b57\u3002 @startuml title Generalization class Vihical class Car class Trunck Vihical <|-- Car Vihical <|-- Trunck @enduml \u5b9e\u73b0\u5173\u7cfb (Realization) \u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728 Java \u4e2d\u4f7f\u7528 implements \u5173\u952e\u5b57\u3002 @startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml \u805a\u5408\u5173\u7cfb (Aggregation) \u8868\u793a\u6574\u4f53\u7531\u90e8\u5206\u7ec4\u6210\uff0c\u4f46\u662f\u6574\u4f53\u548c\u90e8\u5206\u4e0d\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u8fd8\u662f\u4f1a\u5b58\u5728\u3002 @startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml \u7ec4\u5408\u5173\u7cfb (Composition) \u548c\u805a\u5408\u4e0d\u540c\uff0c\u7ec4\u5408\u4e2d\u6574\u4f53\u548c\u90e8\u5206\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u4e5f\u4e0d\u5b58\u5728\u4e86\u3002\u6bd4\u5982\u516c\u53f8\u548c\u90e8\u95e8\uff0c\u516c\u53f8\u6ca1\u4e86\u90e8\u95e8\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u4f46\u662f\u516c\u53f8\u548c\u5458\u5de5\u5c31\u5c5e\u4e8e\u805a\u5408\u5173\u7cfb\u4e86\uff0c\u56e0\u4e3a\u516c\u53f8\u6ca1\u4e86\u5458\u5de5\u8fd8\u5728\u3002 @startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml \u5173\u8054\u5173\u7cfb (Association) \u8868\u793a\u4e0d\u540c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u6709\u5173\u8054\uff0c\u8fd9\u662f\u4e00\u79cd\u9759\u6001\u5173\u7cfb\uff0c\u4e0e\u8fd0\u884c\u8fc7\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff0c\u5728\u6700\u5f00\u59cb\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 1 \u5bf9 1\u3001\u591a\u5bf9 1\u3001\u591a\u5bf9\u591a\u8fd9\u79cd\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u3002\u6bd4\u5982\u5b66\u751f\u548c\u5b66\u6821\u5c31\u662f\u4e00\u79cd\u5173\u8054\u5173\u7cfb\uff0c\u4e00\u4e2a\u5b66\u6821\u53ef\u4ee5\u6709\u5f88\u591a\u5b66\u751f\uff0c\u4f46\u662f\u4e00\u4e2a\u5b66\u751f\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u5b66\u6821\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u5728\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002 @startuml title Association class School class Student School \"1\" - \"n\" Student @enduml \u4f9d\u8d56\u5173\u7cfb (Dependency) \u548c\u5173\u8054\u5173\u7cfb\u4e0d\u540c\u7684\u662f\uff0c\u4f9d\u8d56\u5173\u7cfb\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8d77\u4f5c\u7528\u7684\u3002A \u7c7b\u548c B \u7c7b\u662f\u4f9d\u8d56\u5173\u7cfb\u4e3b\u8981\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\uff1b A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\uff1b A \u7c7b\u5411 B \u7c7b\u53d1\u9001\u6d88\u606f\uff0c\u4ece\u800c\u5f71\u54cd B \u7c7b\u53d1\u751f\u53d8\u5316\u3002 @startuml title Dependency class Vihicle { move(MoveBehavior) } interface MoveBehavior { move() } note \"MoveBehavior.move()\" as N Vihicle ..> MoveBehavior Vihicle .. N @enduml \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 SRP The Single Responsibility Principle \u5355\u4e00\u8d23\u4efb\u539f\u5219 OCP The Open Closed Principle \u5f00\u653e\u5c01\u95ed\u539f\u5219 LSP The Liskov Substitution Principle \u91cc\u6c0f\u66ff\u6362\u539f\u5219 ISP The Interface Segregation Principle \u63a5\u53e3\u5206\u79bb\u539f\u5219 DIP The Dependency Inversion Principle \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 1. \u5355\u4e00\u8d23\u4efb\u539f\u5219 \u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u3002 \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u8ba9\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4ef6\u4e8b\uff0c\u5f53\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u8fc7\u591a\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5206\u89e3\u8fd9\u4e2a\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u7b49\u4e8e\u628a\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e86\u4e00\u8d77\uff0c\u4e00\u4e2a\u804c\u8d23\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u524a\u5f31\u8fd9\u4e2a\u7c7b\u5b8c\u6210\u5176\u5b83\u804c\u8d23\u7684\u80fd\u529b\u3002 2. \u5f00\u653e\u5c01\u95ed\u539f\u5219 \u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6269\u5c55\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u7684\u610f\u601d\uff0c\u56e0\u6b64\u8be5\u539f\u5219\u8981\u6c42\u5728\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002 \u7b26\u5408\u5f00\u95ed\u539f\u5219\u6700\u5178\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u662f\u88c5\u9970\u8005\u6a21\u5f0f\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u5c06\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\uff0c\u800c\u4e0d\u7528\u53bb\u4fee\u6539\u7c7b\u7684\u4ee3\u7801\u3002 3. \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 \u7ee7\u627f\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u5b50\u7c7b\u9700\u8981\u80fd\u591f\u5f53\u6210\u7236\u7c7b\u6765\u4f7f\u7528\uff0c\u5e76\u4e14\u9700\u8981\u6bd4\u7236\u7c7b\u66f4\u7279\u6b8a\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u539f\u5219\uff0c\u90a3\u4e48\u5404\u4e2a\u5b50\u7c7b\u7684\u884c\u4e3a\u4e0a\u5c31\u4f1a\u6709\u5f88\u5927\u5dee\u5f02\uff0c\u589e\u52a0\u7ee7\u627f\u4f53\u7cfb\u7684\u590d\u6742\u5ea6\u3002 4. \u63a5\u53e3\u5206\u79bb\u539f\u5219 \u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u4f9d\u8d56\u4e8e\u5b83\u4eec\u4e0d\u7528\u7684\u65b9\u6cd5\u3002 \u56e0\u6b64\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\u6bd4\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\u8981\u597d\u3002 5. \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 \u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u4e8c\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\uff1b \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u9ad8\u5c42\u6a21\u5757\u5305\u542b\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u8981\u7684\u7b56\u7565\u9009\u62e9\u548c\u4e1a\u52a1\u6a21\u5757\uff0c\u5982\u679c\u9ad8\u5c42\u6a21\u5757\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u90a3\u4e48\u4f4e\u5c42\u6a21\u5757\u7684\u6539\u52a8\u5c31\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u9ad8\u5c42\u6a21\u5757\uff0c\u4ece\u800c\u8feb\u4f7f\u9ad8\u5c42\u6a21\u5757\u4e5f\u9700\u8981\u6539\u52a8\u3002 \u4f9d\u8d56\u4e8e\u62bd\u8c61\u610f\u5473\u7740\uff1a \u4efb\u4f55\u53d8\u91cf\u90fd\u4e0d\u5e94\u8be5\u6301\u6709\u4e00\u4e2a\u6307\u5411\u5177\u4f53\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\uff1b \u4efb\u4f55\u7c7b\u90fd\u4e0d\u5e94\u8be5\u4ece\u5177\u4f53\u7c7b\u6d3e\u751f\uff1b \u4efb\u4f55\u65b9\u6cd5\u90fd\u4e0d\u5e94\u8be5\u8986\u5199\u5b83\u7684\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7684\u5df2\u7ecf\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u9664\u4e86\u4e0a\u8ff0\u7684\u7ecf\u5178\u539f\u5219\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8fd8\u6709\u4e0b\u9762\u8fd9\u4e9b\u5e38\u89c1\u7684\u8bbe\u8ba1\u539f\u5219\u3002 \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 LOD The Law of Demeter \u8fea\u7c73\u7279\u6cd5\u5219 CRP The Composite Reuse Principle \u5408\u6210\u590d\u7528\u539f\u5219 CCP The Common Closure Principle \u5171\u540c\u5c01\u95ed\u539f\u5219 SAP The Stable Abstractions Principle \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 SDP The Stable Dependencies Principle \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219 1. \u8fea\u7c73\u7279\u6cd5\u5219 \u8fea\u7c73\u7279\u6cd5\u5219\u53c8\u53eb\u4f5c\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff08Least Knowledge Principle\uff0c\u7b80\u5199 LKP\uff09\uff0c\u5c31\u662f\u8bf4\u4e00\u4e2a\u5bf9\u8c61\u5e94\u5f53\u5bf9\u5176\u4ed6\u5bf9\u8c61\u6709\u5c3d\u53ef\u80fd\u5c11\u7684\u4e86\u89e3\uff0c\u4e0d\u548c\u964c\u751f\u4eba\u8bf4\u8bdd\u3002 2. \u5408\u6210\u590d\u7528\u539f\u5219 \u5c3d\u91cf\u4f7f\u7528\u5bf9\u8c61\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002 3. \u5171\u540c\u5c01\u95ed\u539f\u5219 \u4e00\u8d77\u4fee\u6539\u7684\u7c7b\uff0c\u5e94\u8be5\u7ec4\u5408\u5728\u4e00\u8d77\uff08\u540c\u4e00\u4e2a\u5305\u91cc\uff09\u3002\u5982\u679c\u5fc5\u987b\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4fee\u6539\u90fd\u53d1\u751f\u5728\u4e00\u4e2a\u5305\u91cc\uff08\u4fee\u6539\u5173\u95ed\uff09\uff0c\u800c\u4e0d\u662f\u904d\u5e03\u5728\u5f88\u591a\u5305\u91cc\u3002 4. \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 \u6700\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u6700\u62bd\u8c61\u7684\u5305\uff0c\u4e0d\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u5177\u4f53\u7684\u5305\uff0c\u5373\u5305\u7684\u62bd\u8c61\u7a0b\u5ea6\u8ddf\u5b83\u7684\u7a33\u5b9a\u6027\u6210\u6b63\u6bd4\u3002 5. \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219 \u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u5e94\u8be5\u662f\u7a33\u5b9a\u65b9\u5411\u4f9d\u8d56\u7684\uff0c\u5305\u8981\u4f9d\u8d56\u7684\u5305\u8981\u6bd4\u81ea\u5df1\u66f4\u5177\u6709\u7a33\u5b9a\u6027\u3002 \u53c2\u8003\u8d44\u6599 Java \u7f16\u7a0b\u601d\u60f3 \u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\uff1a\u539f\u5219\u3001\u6a21\u5f0f\u4e0e\u5b9e\u8df5 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684 SOLID \u539f\u5219 \u770b\u61c2 UML \u7c7b\u56fe\u548c\u65f6\u5e8f\u56fe UML \u7cfb\u5217\u2014\u2014\u65f6\u5e8f\u56fe\uff08\u987a\u5e8f\u56fe\uff09sequence diagram \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e09\u5927\u7279\u6027 ------ \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001","title":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_1","text":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001 \u4e8c\u3001\u7c7b\u56fe \u6cdb\u5316\u5173\u7cfb (Generalization) \u5b9e\u73b0\u5173\u7cfb (Realization) \u805a\u5408\u5173\u7cfb (Aggregation) \u7ec4\u5408\u5173\u7cfb (Composition) \u5173\u8054\u5173\u7cfb (Association) \u4f9d\u8d56\u5173\u7cfb (Dependency) \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u53c2\u8003\u8d44\u6599","title":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_2","text":"","title":"\u4e00\u3001\u4e09\u5927\u7279\u6027"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_3","text":"\u5229\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5c06\u6570\u636e\u548c\u57fa\u4e8e\u6570\u636e\u7684\u64cd\u4f5c\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6784\u6210\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u72ec\u7acb\u5b9e\u4f53\u3002\u6570\u636e\u88ab\u4fdd\u62a4\u5728\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5185\u90e8\uff0c\u5c3d\u53ef\u80fd\u5730\u9690\u85cf\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u53ea\u4fdd\u7559\u4e00\u4e9b\u5bf9\u5916\u7684\u63a5\u53e3\u4f7f\u5176\u4e0e\u5916\u90e8\u53d1\u751f\u8054\u7cfb\u3002\u7528\u6237\u65e0\u9700\u5173\u5fc3\u5bf9\u8c61\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u8be5\u5bf9\u8c61\u3002 \u4f18\u70b9\uff1a \u51cf\u5c11\u8026\u5408\uff1a\u53ef\u4ee5\u72ec\u7acb\u5730\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u4f18\u5316\u3001\u4f7f\u7528\u3001\u7406\u89e3\u548c\u4fee\u6539 \u51cf\u8f7b\u7ef4\u62a4\u7684\u8d1f\u62c5\uff1a\u53ef\u4ee5\u66f4\u5bb9\u6613\u88ab\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u5f71\u54cd\u5176\u4ed6\u6a21\u5757 \u6709\u6548\u5730\u8c03\u8282\u6027\u80fd\uff1a\u53ef\u4ee5\u901a\u8fc7\u5256\u6790\u6765\u786e\u5b9a\u54ea\u4e9b\u6a21\u5757\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6027\u80fd \u63d0\u9ad8\u8f6f\u4ef6\u7684\u53ef\u91cd\u7528\u6027 \u964d\u4f4e\u4e86\u6784\u5efa\u5927\u578b\u7cfb\u7edf\u7684\u98ce\u9669\uff1a\u5373\u4f7f\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u4f46\u662f\u8fd9\u4e9b\u72ec\u7acb\u7684\u6a21\u5757\u5374\u6709\u53ef\u80fd\u662f\u53ef\u7528\u7684 \u4ee5\u4e0b Person \u7c7b\u5c01\u88c5 name\u3001gender\u3001age \u7b49\u5c5e\u6027\uff0c\u5916\u754c\u53ea\u80fd\u901a\u8fc7 get() \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a Person \u5bf9\u8c61\u7684 name \u5c5e\u6027\u548c gender \u5c5e\u6027\uff0c\u800c\u65e0\u6cd5\u83b7\u53d6 age \u5c5e\u6027\uff0c\u4f46\u662f age \u5c5e\u6027\u53ef\u4ee5\u4f9b work() \u65b9\u6cd5\u4f7f\u7528\u3002 \u6ce8\u610f\u5230 gender \u5c5e\u6027\u4f7f\u7528 int \u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5c01\u88c5\u4f7f\u5f97\u7528\u6237\u6ce8\u610f\u4e0d\u5230\u8fd9\u79cd\u5b9e\u73b0\u7ec6\u8282\u3002\u5e76\u4e14\u5728\u9700\u8981\u4fee\u6539 gender \u5c5e\u6027\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \"man\" : \"woman\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \" is working very hard!\"); } else { System.out.println(name + \" can't work any more!\"); } } }","title":"\u5c01\u88c5"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_4","text":"\u7ee7\u627f\u5b9e\u73b0\u4e86 IS-A \u5173\u7cfb\uff0c\u4f8b\u5982 Cat \u548c Animal \u5c31\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u56e0\u6b64 Cat \u53ef\u4ee5\u7ee7\u627f\u81ea Animal\uff0c\u4ece\u800c\u83b7\u5f97 Animal \u975e private \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u7ee7\u627f\u5e94\u8be5\u9075\u5faa\u91cc\u6c0f\u66ff\u6362\u539f\u5219\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 Cat \u53ef\u4ee5\u5f53\u505a Animal \u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 Animal \u5f15\u7528 Cat \u5bf9\u8c61\u3002\u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u79f0\u4e3a \u5411\u4e0a\u8f6c\u578b \u3002 Animal animal = new Cat();","title":"\u7ee7\u627f"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_5","text":"\u591a\u6001\u5206\u4e3a\u7f16\u8bd1\u65f6\u591a\u6001\u548c\u8fd0\u884c\u65f6\u591a\u6001\uff1a \u7f16\u8bd1\u65f6\u591a\u6001\u4e3b\u8981\u6307\u65b9\u6cd5\u7684\u91cd\u8f7d \u8fd0\u884c\u65f6\u591a\u6001\u6307\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u5f15\u7528\u6240\u6307\u5411\u7684\u5177\u4f53\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u95f4\u624d\u786e\u5b9a \u8fd0\u884c\u65f6\u591a\u6001\u6709\u4e09\u4e2a\u6761\u4ef6\uff1a \u7ee7\u627f \u8986\u76d6\uff08\u91cd\u5199\uff09 \u5411\u4e0a\u8f6c\u578b \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4e50\u5668\u7c7b\uff08Instrument\uff09\u6709\u4e24\u4e2a\u5b50\u7c7b\uff1aWind \u548c Percussion\uff0c\u5b83\u4eec\u90fd\u8986\u76d6\u4e86\u7236\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728 main() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u7236\u7c7b Instrument \u6765\u5f15\u7528 Wind \u548c Percussion \u5bf9\u8c61\u3002\u5728 Instrument \u5f15\u7528\u8c03\u7528 play() \u65b9\u6cd5\u65f6\uff0c\u4f1a\u6267\u884c\u5b9e\u9645\u5f15\u7528\u5bf9\u8c61\u6240\u5728\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u800c\u4e0d\u662f Instrument \u7c7b\u7684\u65b9\u6cd5\u3002 public class Instrument { public void play() { System.out.println(\"Instument is playing...\"); } } public class Wind extends Instrument { public void play() { System.out.println(\"Wind is playing...\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\"Percussion is playing...\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } Wind is playing... Percussion is playing...","title":"\u591a\u6001"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_6","text":"\u4ee5\u4e0b\u7c7b\u56fe\u4f7f\u7528 PlantUML \u7ed8\u5236\uff0c\u66f4\u591a\u8bed\u6cd5\u53ca\u4f7f\u7528\u8bf7\u53c2\u8003\uff1ahttp://plantuml.com/ \u3002","title":"\u4e8c\u3001\u7c7b\u56fe"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#generalization","text":"\u7528\u6765\u63cf\u8ff0\u7ee7\u627f\u5173\u7cfb\uff0c\u5728 Java \u4e2d\u4f7f\u7528 extends \u5173\u952e\u5b57\u3002 @startuml title Generalization class Vihical class Car class Trunck Vihical <|-- Car Vihical <|-- Trunck @enduml","title":"\u6cdb\u5316\u5173\u7cfb (Generalization)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#realization","text":"\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728 Java \u4e2d\u4f7f\u7528 implements \u5173\u952e\u5b57\u3002 @startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml","title":"\u5b9e\u73b0\u5173\u7cfb (Realization)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#aggregation","text":"\u8868\u793a\u6574\u4f53\u7531\u90e8\u5206\u7ec4\u6210\uff0c\u4f46\u662f\u6574\u4f53\u548c\u90e8\u5206\u4e0d\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u8fd8\u662f\u4f1a\u5b58\u5728\u3002 @startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml","title":"\u805a\u5408\u5173\u7cfb (Aggregation)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#composition","text":"\u548c\u805a\u5408\u4e0d\u540c\uff0c\u7ec4\u5408\u4e2d\u6574\u4f53\u548c\u90e8\u5206\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u4e5f\u4e0d\u5b58\u5728\u4e86\u3002\u6bd4\u5982\u516c\u53f8\u548c\u90e8\u95e8\uff0c\u516c\u53f8\u6ca1\u4e86\u90e8\u95e8\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u4f46\u662f\u516c\u53f8\u548c\u5458\u5de5\u5c31\u5c5e\u4e8e\u805a\u5408\u5173\u7cfb\u4e86\uff0c\u56e0\u4e3a\u516c\u53f8\u6ca1\u4e86\u5458\u5de5\u8fd8\u5728\u3002 @startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml","title":"\u7ec4\u5408\u5173\u7cfb (Composition)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#association","text":"\u8868\u793a\u4e0d\u540c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u6709\u5173\u8054\uff0c\u8fd9\u662f\u4e00\u79cd\u9759\u6001\u5173\u7cfb\uff0c\u4e0e\u8fd0\u884c\u8fc7\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff0c\u5728\u6700\u5f00\u59cb\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 1 \u5bf9 1\u3001\u591a\u5bf9 1\u3001\u591a\u5bf9\u591a\u8fd9\u79cd\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u3002\u6bd4\u5982\u5b66\u751f\u548c\u5b66\u6821\u5c31\u662f\u4e00\u79cd\u5173\u8054\u5173\u7cfb\uff0c\u4e00\u4e2a\u5b66\u6821\u53ef\u4ee5\u6709\u5f88\u591a\u5b66\u751f\uff0c\u4f46\u662f\u4e00\u4e2a\u5b66\u751f\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u5b66\u6821\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u5728\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002 @startuml title Association class School class Student School \"1\" - \"n\" Student @enduml","title":"\u5173\u8054\u5173\u7cfb (Association)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#dependency","text":"\u548c\u5173\u8054\u5173\u7cfb\u4e0d\u540c\u7684\u662f\uff0c\u4f9d\u8d56\u5173\u7cfb\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8d77\u4f5c\u7528\u7684\u3002A \u7c7b\u548c B \u7c7b\u662f\u4f9d\u8d56\u5173\u7cfb\u4e3b\u8981\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\uff1b A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\uff1b A \u7c7b\u5411 B \u7c7b\u53d1\u9001\u6d88\u606f\uff0c\u4ece\u800c\u5f71\u54cd B \u7c7b\u53d1\u751f\u53d8\u5316\u3002 @startuml title Dependency class Vihicle { move(MoveBehavior) } interface MoveBehavior { move() } note \"MoveBehavior.move()\" as N Vihicle ..> MoveBehavior Vihicle .. N @enduml","title":"\u4f9d\u8d56\u5173\u7cfb (Dependency)"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_7","text":"","title":"\u4e09\u3001\u8bbe\u8ba1\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#solid","text":"\u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 SRP The Single Responsibility Principle \u5355\u4e00\u8d23\u4efb\u539f\u5219 OCP The Open Closed Principle \u5f00\u653e\u5c01\u95ed\u539f\u5219 LSP The Liskov Substitution Principle \u91cc\u6c0f\u66ff\u6362\u539f\u5219 ISP The Interface Segregation Principle \u63a5\u53e3\u5206\u79bb\u539f\u5219 DIP The Dependency Inversion Principle \u4f9d\u8d56\u5012\u7f6e\u539f\u5219","title":"S.O.L.I.D"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#1","text":"\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u3002 \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u8ba9\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4ef6\u4e8b\uff0c\u5f53\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u8fc7\u591a\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5206\u89e3\u8fd9\u4e2a\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u7b49\u4e8e\u628a\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e86\u4e00\u8d77\uff0c\u4e00\u4e2a\u804c\u8d23\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u524a\u5f31\u8fd9\u4e2a\u7c7b\u5b8c\u6210\u5176\u5b83\u804c\u8d23\u7684\u80fd\u529b\u3002","title":"1. \u5355\u4e00\u8d23\u4efb\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#2","text":"\u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6269\u5c55\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u7684\u610f\u601d\uff0c\u56e0\u6b64\u8be5\u539f\u5219\u8981\u6c42\u5728\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002 \u7b26\u5408\u5f00\u95ed\u539f\u5219\u6700\u5178\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u662f\u88c5\u9970\u8005\u6a21\u5f0f\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u5c06\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\uff0c\u800c\u4e0d\u7528\u53bb\u4fee\u6539\u7c7b\u7684\u4ee3\u7801\u3002","title":"2. \u5f00\u653e\u5c01\u95ed\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#3","text":"\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 \u7ee7\u627f\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u5b50\u7c7b\u9700\u8981\u80fd\u591f\u5f53\u6210\u7236\u7c7b\u6765\u4f7f\u7528\uff0c\u5e76\u4e14\u9700\u8981\u6bd4\u7236\u7c7b\u66f4\u7279\u6b8a\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u539f\u5219\uff0c\u90a3\u4e48\u5404\u4e2a\u5b50\u7c7b\u7684\u884c\u4e3a\u4e0a\u5c31\u4f1a\u6709\u5f88\u5927\u5dee\u5f02\uff0c\u589e\u52a0\u7ee7\u627f\u4f53\u7cfb\u7684\u590d\u6742\u5ea6\u3002","title":"3. \u91cc\u6c0f\u66ff\u6362\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#4","text":"\u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u4f9d\u8d56\u4e8e\u5b83\u4eec\u4e0d\u7528\u7684\u65b9\u6cd5\u3002 \u56e0\u6b64\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\u6bd4\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\u8981\u597d\u3002","title":"4. \u63a5\u53e3\u5206\u79bb\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#5","text":"\u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u4e8c\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\uff1b \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u9ad8\u5c42\u6a21\u5757\u5305\u542b\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u8981\u7684\u7b56\u7565\u9009\u62e9\u548c\u4e1a\u52a1\u6a21\u5757\uff0c\u5982\u679c\u9ad8\u5c42\u6a21\u5757\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u90a3\u4e48\u4f4e\u5c42\u6a21\u5757\u7684\u6539\u52a8\u5c31\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u9ad8\u5c42\u6a21\u5757\uff0c\u4ece\u800c\u8feb\u4f7f\u9ad8\u5c42\u6a21\u5757\u4e5f\u9700\u8981\u6539\u52a8\u3002 \u4f9d\u8d56\u4e8e\u62bd\u8c61\u610f\u5473\u7740\uff1a \u4efb\u4f55\u53d8\u91cf\u90fd\u4e0d\u5e94\u8be5\u6301\u6709\u4e00\u4e2a\u6307\u5411\u5177\u4f53\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\uff1b \u4efb\u4f55\u7c7b\u90fd\u4e0d\u5e94\u8be5\u4ece\u5177\u4f53\u7c7b\u6d3e\u751f\uff1b \u4efb\u4f55\u65b9\u6cd5\u90fd\u4e0d\u5e94\u8be5\u8986\u5199\u5b83\u7684\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7684\u5df2\u7ecf\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002","title":"5. \u4f9d\u8d56\u5012\u7f6e\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_8","text":"\u9664\u4e86\u4e0a\u8ff0\u7684\u7ecf\u5178\u539f\u5219\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8fd8\u6709\u4e0b\u9762\u8fd9\u4e9b\u5e38\u89c1\u7684\u8bbe\u8ba1\u539f\u5219\u3002 \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 LOD The Law of Demeter \u8fea\u7c73\u7279\u6cd5\u5219 CRP The Composite Reuse Principle \u5408\u6210\u590d\u7528\u539f\u5219 CCP The Common Closure Principle \u5171\u540c\u5c01\u95ed\u539f\u5219 SAP The Stable Abstractions Principle \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 SDP The Stable Dependencies Principle \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219","title":"\u5176\u4ed6\u5e38\u89c1\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#1_1","text":"\u8fea\u7c73\u7279\u6cd5\u5219\u53c8\u53eb\u4f5c\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff08Least Knowledge Principle\uff0c\u7b80\u5199 LKP\uff09\uff0c\u5c31\u662f\u8bf4\u4e00\u4e2a\u5bf9\u8c61\u5e94\u5f53\u5bf9\u5176\u4ed6\u5bf9\u8c61\u6709\u5c3d\u53ef\u80fd\u5c11\u7684\u4e86\u89e3\uff0c\u4e0d\u548c\u964c\u751f\u4eba\u8bf4\u8bdd\u3002","title":"1. \u8fea\u7c73\u7279\u6cd5\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#2_1","text":"\u5c3d\u91cf\u4f7f\u7528\u5bf9\u8c61\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002","title":"2. \u5408\u6210\u590d\u7528\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#3_1","text":"\u4e00\u8d77\u4fee\u6539\u7684\u7c7b\uff0c\u5e94\u8be5\u7ec4\u5408\u5728\u4e00\u8d77\uff08\u540c\u4e00\u4e2a\u5305\u91cc\uff09\u3002\u5982\u679c\u5fc5\u987b\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4fee\u6539\u90fd\u53d1\u751f\u5728\u4e00\u4e2a\u5305\u91cc\uff08\u4fee\u6539\u5173\u95ed\uff09\uff0c\u800c\u4e0d\u662f\u904d\u5e03\u5728\u5f88\u591a\u5305\u91cc\u3002","title":"3. \u5171\u540c\u5c01\u95ed\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#4_1","text":"\u6700\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u6700\u62bd\u8c61\u7684\u5305\uff0c\u4e0d\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u5177\u4f53\u7684\u5305\uff0c\u5373\u5305\u7684\u62bd\u8c61\u7a0b\u5ea6\u8ddf\u5b83\u7684\u7a33\u5b9a\u6027\u6210\u6b63\u6bd4\u3002","title":"4. \u7a33\u5b9a\u62bd\u8c61\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#5_1","text":"\u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u5e94\u8be5\u662f\u7a33\u5b9a\u65b9\u5411\u4f9d\u8d56\u7684\uff0c\u5305\u8981\u4f9d\u8d56\u7684\u5305\u8981\u6bd4\u81ea\u5df1\u66f4\u5177\u6709\u7a33\u5b9a\u6027\u3002","title":"5. \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219"},{"location":"bbb/3%E7%BA%A7%E7%9B%AE%E5%BD%95_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3/#_9","text":"Java \u7f16\u7a0b\u601d\u60f3 \u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\uff1a\u539f\u5219\u3001\u6a21\u5f0f\u4e0e\u5b9e\u8df5 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684 SOLID \u539f\u5219 \u770b\u61c2 UML \u7c7b\u56fe\u548c\u65f6\u5e8f\u56fe UML \u7cfb\u5217\u2014\u2014\u65f6\u5e8f\u56fe\uff08\u987a\u5e8f\u56fe\uff09sequence diagram \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e09\u5927\u7279\u6027 ------ \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/Git/","text":"Git Git \u96c6\u4e2d\u5f0f\u4e0e\u5206\u5e03\u5f0f \u4e2d\u5fc3\u670d\u52a1\u5668 \u5de5\u4f5c\u6d41 \u5206\u652f\u5b9e\u73b0 \u51b2\u7a81 Fast forward \u50a8\u85cf\uff08Stashing\uff09 SSH \u4f20\u8f93\u8bbe\u7f6e .gitignore \u6587\u4ef6 Git \u547d\u4ee4\u4e00\u89c8 \u53c2\u8003\u8d44\u6599 \u96c6\u4e2d\u5f0f\u4e0e\u5206\u5e03\u5f0f Git \u5c5e\u4e8e\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u800c SVN \u5c5e\u4e8e\u96c6\u4e2d\u5f0f\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u53ea\u6709\u4e2d\u5fc3\u670d\u52a1\u5668\u62e5\u6709\u4e00\u4efd\u4ee3\u7801\uff0c\u800c\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u4e0a\u5c31\u6709\u4e00\u4efd\u5b8c\u6574\u7684\u4ee3\u7801\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u6709\u5b89\u5168\u6027\u95ee\u9898\uff0c\u5f53\u4e2d\u5fc3\u670d\u52a1\u5668\u6302\u4e86\u6240\u6709\u4eba\u90fd\u6ca1\u529e\u6cd5\u5de5\u4f5c\u4e86\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u9700\u8981\u8fde\u7f51\u624d\u80fd\u5de5\u4f5c\uff0c\u5982\u679c\u7f51\u901f\u8fc7\u6162\uff0c\u90a3\u4e48\u63d0\u4ea4\u4e00\u4e2a\u6587\u4ef6\u4f1a\u6162\u7684\u65e0\u6cd5\u8ba9\u4eba\u5fcd\u53d7\u3002\u800c\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u4e0d\u9700\u8981\u8fde\u7f51\u5c31\u80fd\u5de5\u4f5c\u3002 \u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u65b0\u5efa\u5206\u652f\u3001\u5408\u5e76\u5206\u652f\u64cd\u4f5c\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u800c\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u65b0\u5efa\u4e00\u4e2a\u5206\u652f\u76f8\u5f53\u4e8e\u590d\u5236\u4e00\u4efd\u5b8c\u6574\u4ee3\u7801\u3002 \u4e2d\u5fc3\u670d\u52a1\u5668 \u4e2d\u5fc3\u670d\u52a1\u5668\u7528\u6765\u4ea4\u6362\u6bcf\u4e2a\u7528\u6237\u7684\u4fee\u6539\uff0c\u6ca1\u6709\u4e2d\u5fc3\u670d\u52a1\u5668\u4e5f\u80fd\u5de5\u4f5c\uff0c\u4f46\u662f\u4e2d\u5fc3\u670d\u52a1\u5668\u80fd\u591f 24 \u5c0f\u65f6\u4fdd\u6301\u5f00\u673a\u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u80fd\u66f4\u65b9\u4fbf\u7684\u4ea4\u6362\u4fee\u6539\u3002 Github \u5c31\u662f\u4e00\u4e2a\u4e2d\u5fc3\u670d\u52a1\u5668\u3002 \u5de5\u4f5c\u6d41 \u65b0\u5efa\u4e00\u4e2a\u4ed3\u5e93\u4e4b\u540e\uff0c\u5f53\u524d\u76ee\u5f55\u5c31\u6210\u4e3a\u4e86\u5de5\u4f5c\u533a\uff0c\u5de5\u4f5c\u533a\u4e0b\u6709\u4e00\u4e2a\u9690\u85cf\u76ee\u5f55 .git\uff0c\u5b83\u5c5e\u4e8e Git \u7684\u7248\u672c\u5e93\u3002 Git \u7684\u7248\u672c\u5e93\u6709\u4e00\u4e2a\u79f0\u4e3a Stage \u7684\u6682\u5b58\u533a\u4ee5\u53ca\u6700\u540e\u7684 History \u7248\u672c\u5e93\uff0cHistory \u5b58\u50a8\u6240\u6709\u5206\u652f\u4fe1\u606f\uff0c\u4f7f\u7528\u4e00\u4e2a HEAD \u6307\u9488\u6307\u5411\u5f53\u524d\u5206\u652f\u3002 git add files \u628a\u6587\u4ef6\u7684\u4fee\u6539\u6dfb\u52a0\u5230\u6682\u5b58\u533a git commit \u628a\u6682\u5b58\u533a\u7684\u4fee\u6539\u63d0\u4ea4\u5230\u5f53\u524d\u5206\u652f\uff0c\u63d0\u4ea4\u4e4b\u540e\u6682\u5b58\u533a\u5c31\u88ab\u6e05\u7a7a\u4e86 git reset -- files \u4f7f\u7528\u5f53\u524d\u5206\u652f\u4e0a\u7684\u4fee\u6539\u8986\u76d6\u6682\u5b58\u533a\uff0c\u7528\u6765\u64a4\u9500\u6700\u540e\u4e00\u6b21 git add files git checkout -- files \u4f7f\u7528\u6682\u5b58\u533a\u7684\u4fee\u6539\u8986\u76d6\u5de5\u4f5c\u76ee\u5f55\uff0c\u7528\u6765\u64a4\u9500\u672c\u5730\u4fee\u6539 \u53ef\u4ee5\u8df3\u8fc7\u6682\u5b58\u533a\u57df\u76f4\u63a5\u4ece\u5206\u652f\u4e2d\u53d6\u51fa\u4fee\u6539\uff0c\u6216\u8005\u76f4\u63a5\u63d0\u4ea4\u4fee\u6539\u5230\u5206\u652f\u4e2d\u3002 git commit -a \u76f4\u63a5\u628a\u6240\u6709\u6587\u4ef6\u7684\u4fee\u6539\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u7136\u540e\u6267\u884c\u63d0\u4ea4 git checkout HEAD -- files \u53d6\u51fa\u6700\u540e\u4e00\u6b21\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c \u5206\u652f\u5b9e\u73b0 \u4f7f\u7528\u6307\u9488\u5c06\u6bcf\u4e2a\u63d0\u4ea4\u8fde\u63a5\u6210\u4e00\u6761\u65f6\u95f4\u7ebf\uff0cHEAD \u6307\u9488\u6307\u5411\u5f53\u524d\u5206\u652f\u6307\u9488\u3002 \u65b0\u5efa\u5206\u652f\u662f\u65b0\u5efa\u4e00\u4e2a\u6307\u9488\u6307\u5411\u65f6\u95f4\u7ebf\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8ba9 HEAD \u6307\u9488\u6307\u5411\u65b0\u5206\u652f\uff0c\u8868\u793a\u65b0\u5206\u652f\u6210\u4e3a\u5f53\u524d\u5206\u652f\u3002 \u6bcf\u6b21\u63d0\u4ea4\u53ea\u4f1a\u8ba9\u5f53\u524d\u5206\u652f\u6307\u9488\u5411\u524d\u79fb\u52a8\uff0c\u800c\u5176\u5b83\u5206\u652f\u6307\u9488\u4e0d\u4f1a\u79fb\u52a8\u3002 \u5408\u5e76\u5206\u652f\u4e5f\u53ea\u9700\u8981\u6539\u53d8\u6307\u9488\u5373\u53ef\u3002 \u51b2\u7a81 \u5f53\u4e24\u4e2a\u5206\u652f\u90fd\u5bf9\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u540c\u4e00\u884c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5728\u5206\u652f\u5408\u5e76\u65f6\u5c31\u4f1a\u4ea7\u751f\u51b2\u7a81\u3002 Git \u4f1a\u4f7f\u7528 \\<\\<\\<\\<\\<\\<\\< \uff0c======= \uff0c>>>>>>> \u6807\u8bb0\u51fa\u4e0d\u540c\u5206\u652f\u7684\u5185\u5bb9\uff0c\u53ea\u9700\u8981\u628a\u4e0d\u540c\u5206\u652f\u4e2d\u51b2\u7a81\u90e8\u5206\u4fee\u6539\u6210\u4e00\u6837\u5c31\u80fd\u89e3\u51b3\u51b2\u7a81\u3002 <<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1 Fast forward \"\u5feb\u8fdb\u5f0f\u5408\u5e76\"\uff08fast-farward merge\uff09\uff0c\u4f1a\u76f4\u63a5\u5c06 master \u5206\u652f\u6307\u5411\u5408\u5e76\u7684\u5206\u652f\uff0c\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u8fdb\u884c\u5206\u652f\u5408\u5e76\u4f1a\u4e22\u5931\u5206\u652f\u4fe1\u606f\uff0c\u4e5f\u5c31\u4e0d\u80fd\u5728\u5206\u652f\u5386\u53f2\u4e0a\u770b\u51fa\u5206\u652f\u4fe1\u606f\u3002 \u53ef\u4ee5\u5728\u5408\u5e76\u65f6\u52a0\u4e0a --no-ff \u53c2\u6570\u6765\u7981\u7528 Fast forward \u6a21\u5f0f\uff0c\u5e76\u4e14\u52a0\u4e0a -m \u53c2\u6570\u8ba9\u5408\u5e76\u65f6\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 commit\u3002 $ git merge --no-ff -m \"merge with no-ff\" dev \u50a8\u85cf\uff08Stashing\uff09 \u5728\u4e00\u4e2a\u5206\u652f\u4e0a\u64cd\u4f5c\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5c06\u4fee\u6539\u63d0\u4ea4\u5230\u5206\u652f\u4e0a\uff0c\u6b64\u65f6\u8fdb\u884c\u5207\u6362\u5206\u652f\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u5206\u652f\u4e0a\u4e5f\u80fd\u770b\u5230\u65b0\u7684\u4fee\u6539\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u5206\u652f\u90fd\u5171\u7528\u4e00\u4e2a\u5de5\u4f5c\u533a\u7684\u7f18\u6545\u3002 \u53ef\u4ee5\u4f7f\u7528 git stash \u5c06\u5f53\u524d\u5206\u652f\u7684\u4fee\u6539\u50a8\u85cf\u8d77\u6765\uff0c\u6b64\u65f6\u5f53\u524d\u5de5\u4f5c\u533a\u7684\u6240\u6709\u4fee\u6539\u90fd\u4f1a\u88ab\u5b58\u5230\u6808\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u5de5\u4f5c\u533a\u662f\u5e72\u51c0\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5207\u6362\u5230\u5176\u5b83\u5206\u652f\u4e0a\u4e86\u3002 $ git stash Saved working directory and index state \\ \"WIP on master: 049d078 added the index file\" HEAD is now at 049d078 added the index file (To restore them type \"git stash apply\") \u8be5\u529f\u80fd\u53ef\u4ee5\u7528\u4e8e bug \u5206\u652f\u7684\u5b9e\u73b0\u3002\u5982\u679c\u5f53\u524d\u6b63\u5728 dev \u5206\u652f\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c\u4f46\u662f\u6b64\u65f6 master \u4e0a\u6709\u4e2a bug \u9700\u8981\u4fee\u590d\uff0c\u4f46\u662f dev \u5206\u652f\u4e0a\u7684\u5f00\u53d1\u8fd8\u672a\u5b8c\u6210\uff0c\u4e0d\u60f3\u7acb\u5373\u63d0\u4ea4\u3002\u5728\u65b0\u5efa bug \u5206\u652f\u5e76\u5207\u6362\u5230 bug \u5206\u652f\u4e4b\u524d\u5c31\u9700\u8981\u4f7f\u7528 git stash \u5c06 dev \u5206\u652f\u7684\u672a\u63d0\u4ea4\u4fee\u6539\u50a8\u85cf\u8d77\u6765\u3002 SSH \u4f20\u8f93\u8bbe\u7f6e Git \u4ed3\u5e93\u548c Github \u4e2d\u5fc3\u4ed3\u5e93\u4e4b\u95f4\u7684\u4f20\u8f93\u662f\u901a\u8fc7 SSH \u52a0\u5bc6\u3002 \u5982\u679c\u5de5\u4f5c\u533a\u4e0b\u6ca1\u6709 .ssh \u76ee\u5f55\uff0c\u6216\u8005\u8be5\u76ee\u5f55\u4e0b\u6ca1\u6709 id_rsa \u548c id_rsa.pub \u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6765\u521b\u5efa SSH Key\uff1a $ ssh-keygen -t rsa -C \"youremail@example.com\" \u7136\u540e\u628a\u516c\u94a5 id_rsa.pub \u7684\u5185\u5bb9\u590d\u5236\u5230 Github \"Account settings\" \u7684 SSH Keys \u4e2d\u3002 .gitignore \u6587\u4ef6 \u5ffd\u7565\u4ee5\u4e0b\u6587\u4ef6\uff1a \u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u7f29\u7565\u56fe\uff1b \u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u6587\u4ef6\uff0c\u6bd4\u5982 Java \u7f16\u8bd1\u4ea7\u751f\u7684 .class \u6587\u4ef6\uff1b \u81ea\u5df1\u7684\u654f\u611f\u4fe1\u606f\uff0c\u6bd4\u5982\u5b58\u653e\u53e3\u4ee4\u7684\u914d\u7f6e\u6587\u4ef6\u3002 \u4e0d\u9700\u8981\u5168\u90e8\u81ea\u5df1\u7f16\u5199\uff0c\u53ef\u4ee5\u5230 https://github.com/github/gitignore \u4e2d\u8fdb\u884c\u67e5\u8be2\u3002 Git \u547d\u4ee4\u4e00\u89c8 \u6bd4\u8f83\u8be6\u7ec6\u7684\u5730\u5740\uff1ahttp://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf \u53c2\u8003\u8d44\u6599 Git - \u7b80\u660e\u6307\u5357 \u56fe\u89e3 Git \u5ed6\u96ea\u5cf0 : Git \u6559\u7a0b Learn Git Branching","title":"Git"},{"location":"bbb/Git/#git","text":"Git \u96c6\u4e2d\u5f0f\u4e0e\u5206\u5e03\u5f0f \u4e2d\u5fc3\u670d\u52a1\u5668 \u5de5\u4f5c\u6d41 \u5206\u652f\u5b9e\u73b0 \u51b2\u7a81 Fast forward \u50a8\u85cf\uff08Stashing\uff09 SSH \u4f20\u8f93\u8bbe\u7f6e .gitignore \u6587\u4ef6 Git \u547d\u4ee4\u4e00\u89c8 \u53c2\u8003\u8d44\u6599","title":"Git"},{"location":"bbb/Git/#_1","text":"Git \u5c5e\u4e8e\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u800c SVN \u5c5e\u4e8e\u96c6\u4e2d\u5f0f\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u53ea\u6709\u4e2d\u5fc3\u670d\u52a1\u5668\u62e5\u6709\u4e00\u4efd\u4ee3\u7801\uff0c\u800c\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u6bcf\u4e2a\u4eba\u7684\u7535\u8111\u4e0a\u5c31\u6709\u4e00\u4efd\u5b8c\u6574\u7684\u4ee3\u7801\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u6709\u5b89\u5168\u6027\u95ee\u9898\uff0c\u5f53\u4e2d\u5fc3\u670d\u52a1\u5668\u6302\u4e86\u6240\u6709\u4eba\u90fd\u6ca1\u529e\u6cd5\u5de5\u4f5c\u4e86\u3002 \u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u9700\u8981\u8fde\u7f51\u624d\u80fd\u5de5\u4f5c\uff0c\u5982\u679c\u7f51\u901f\u8fc7\u6162\uff0c\u90a3\u4e48\u63d0\u4ea4\u4e00\u4e2a\u6587\u4ef6\u4f1a\u6162\u7684\u65e0\u6cd5\u8ba9\u4eba\u5fcd\u53d7\u3002\u800c\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u4e0d\u9700\u8981\u8fde\u7f51\u5c31\u80fd\u5de5\u4f5c\u3002 \u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u65b0\u5efa\u5206\u652f\u3001\u5408\u5e76\u5206\u652f\u64cd\u4f5c\u901f\u5ea6\u975e\u5e38\u5feb\uff0c\u800c\u96c6\u4e2d\u5f0f\u7248\u672c\u63a7\u5236\u65b0\u5efa\u4e00\u4e2a\u5206\u652f\u76f8\u5f53\u4e8e\u590d\u5236\u4e00\u4efd\u5b8c\u6574\u4ee3\u7801\u3002","title":"\u96c6\u4e2d\u5f0f\u4e0e\u5206\u5e03\u5f0f"},{"location":"bbb/Git/#_2","text":"\u4e2d\u5fc3\u670d\u52a1\u5668\u7528\u6765\u4ea4\u6362\u6bcf\u4e2a\u7528\u6237\u7684\u4fee\u6539\uff0c\u6ca1\u6709\u4e2d\u5fc3\u670d\u52a1\u5668\u4e5f\u80fd\u5de5\u4f5c\uff0c\u4f46\u662f\u4e2d\u5fc3\u670d\u52a1\u5668\u80fd\u591f 24 \u5c0f\u65f6\u4fdd\u6301\u5f00\u673a\u72b6\u6001\uff0c\u8fd9\u6837\u5c31\u80fd\u66f4\u65b9\u4fbf\u7684\u4ea4\u6362\u4fee\u6539\u3002 Github \u5c31\u662f\u4e00\u4e2a\u4e2d\u5fc3\u670d\u52a1\u5668\u3002","title":"\u4e2d\u5fc3\u670d\u52a1\u5668"},{"location":"bbb/Git/#_3","text":"\u65b0\u5efa\u4e00\u4e2a\u4ed3\u5e93\u4e4b\u540e\uff0c\u5f53\u524d\u76ee\u5f55\u5c31\u6210\u4e3a\u4e86\u5de5\u4f5c\u533a\uff0c\u5de5\u4f5c\u533a\u4e0b\u6709\u4e00\u4e2a\u9690\u85cf\u76ee\u5f55 .git\uff0c\u5b83\u5c5e\u4e8e Git \u7684\u7248\u672c\u5e93\u3002 Git \u7684\u7248\u672c\u5e93\u6709\u4e00\u4e2a\u79f0\u4e3a Stage \u7684\u6682\u5b58\u533a\u4ee5\u53ca\u6700\u540e\u7684 History \u7248\u672c\u5e93\uff0cHistory \u5b58\u50a8\u6240\u6709\u5206\u652f\u4fe1\u606f\uff0c\u4f7f\u7528\u4e00\u4e2a HEAD \u6307\u9488\u6307\u5411\u5f53\u524d\u5206\u652f\u3002 git add files \u628a\u6587\u4ef6\u7684\u4fee\u6539\u6dfb\u52a0\u5230\u6682\u5b58\u533a git commit \u628a\u6682\u5b58\u533a\u7684\u4fee\u6539\u63d0\u4ea4\u5230\u5f53\u524d\u5206\u652f\uff0c\u63d0\u4ea4\u4e4b\u540e\u6682\u5b58\u533a\u5c31\u88ab\u6e05\u7a7a\u4e86 git reset -- files \u4f7f\u7528\u5f53\u524d\u5206\u652f\u4e0a\u7684\u4fee\u6539\u8986\u76d6\u6682\u5b58\u533a\uff0c\u7528\u6765\u64a4\u9500\u6700\u540e\u4e00\u6b21 git add files git checkout -- files \u4f7f\u7528\u6682\u5b58\u533a\u7684\u4fee\u6539\u8986\u76d6\u5de5\u4f5c\u76ee\u5f55\uff0c\u7528\u6765\u64a4\u9500\u672c\u5730\u4fee\u6539 \u53ef\u4ee5\u8df3\u8fc7\u6682\u5b58\u533a\u57df\u76f4\u63a5\u4ece\u5206\u652f\u4e2d\u53d6\u51fa\u4fee\u6539\uff0c\u6216\u8005\u76f4\u63a5\u63d0\u4ea4\u4fee\u6539\u5230\u5206\u652f\u4e2d\u3002 git commit -a \u76f4\u63a5\u628a\u6240\u6709\u6587\u4ef6\u7684\u4fee\u6539\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u7136\u540e\u6267\u884c\u63d0\u4ea4 git checkout HEAD -- files \u53d6\u51fa\u6700\u540e\u4e00\u6b21\u4fee\u6539\uff0c\u53ef\u4ee5\u7528\u6765\u8fdb\u884c\u56de\u6eda\u64cd\u4f5c","title":"\u5de5\u4f5c\u6d41"},{"location":"bbb/Git/#_4","text":"\u4f7f\u7528\u6307\u9488\u5c06\u6bcf\u4e2a\u63d0\u4ea4\u8fde\u63a5\u6210\u4e00\u6761\u65f6\u95f4\u7ebf\uff0cHEAD \u6307\u9488\u6307\u5411\u5f53\u524d\u5206\u652f\u6307\u9488\u3002 \u65b0\u5efa\u5206\u652f\u662f\u65b0\u5efa\u4e00\u4e2a\u6307\u9488\u6307\u5411\u65f6\u95f4\u7ebf\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\uff0c\u5e76\u8ba9 HEAD \u6307\u9488\u6307\u5411\u65b0\u5206\u652f\uff0c\u8868\u793a\u65b0\u5206\u652f\u6210\u4e3a\u5f53\u524d\u5206\u652f\u3002 \u6bcf\u6b21\u63d0\u4ea4\u53ea\u4f1a\u8ba9\u5f53\u524d\u5206\u652f\u6307\u9488\u5411\u524d\u79fb\u52a8\uff0c\u800c\u5176\u5b83\u5206\u652f\u6307\u9488\u4e0d\u4f1a\u79fb\u52a8\u3002 \u5408\u5e76\u5206\u652f\u4e5f\u53ea\u9700\u8981\u6539\u53d8\u6307\u9488\u5373\u53ef\u3002","title":"\u5206\u652f\u5b9e\u73b0"},{"location":"bbb/Git/#_5","text":"\u5f53\u4e24\u4e2a\u5206\u652f\u90fd\u5bf9\u540c\u4e00\u4e2a\u6587\u4ef6\u7684\u540c\u4e00\u884c\u8fdb\u884c\u4e86\u4fee\u6539\uff0c\u5728\u5206\u652f\u5408\u5e76\u65f6\u5c31\u4f1a\u4ea7\u751f\u51b2\u7a81\u3002 Git \u4f1a\u4f7f\u7528 \\<\\<\\<\\<\\<\\<\\< \uff0c======= \uff0c>>>>>>> \u6807\u8bb0\u51fa\u4e0d\u540c\u5206\u652f\u7684\u5185\u5bb9\uff0c\u53ea\u9700\u8981\u628a\u4e0d\u540c\u5206\u652f\u4e2d\u51b2\u7a81\u90e8\u5206\u4fee\u6539\u6210\u4e00\u6837\u5c31\u80fd\u89e3\u51b3\u51b2\u7a81\u3002 <<<<<<< HEAD Creating a new branch is quick & simple. ======= Creating a new branch is quick AND simple. >>>>>>> feature1","title":"\u51b2\u7a81"},{"location":"bbb/Git/#fast-forward","text":"\"\u5feb\u8fdb\u5f0f\u5408\u5e76\"\uff08fast-farward merge\uff09\uff0c\u4f1a\u76f4\u63a5\u5c06 master \u5206\u652f\u6307\u5411\u5408\u5e76\u7684\u5206\u652f\uff0c\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u8fdb\u884c\u5206\u652f\u5408\u5e76\u4f1a\u4e22\u5931\u5206\u652f\u4fe1\u606f\uff0c\u4e5f\u5c31\u4e0d\u80fd\u5728\u5206\u652f\u5386\u53f2\u4e0a\u770b\u51fa\u5206\u652f\u4fe1\u606f\u3002 \u53ef\u4ee5\u5728\u5408\u5e76\u65f6\u52a0\u4e0a --no-ff \u53c2\u6570\u6765\u7981\u7528 Fast forward \u6a21\u5f0f\uff0c\u5e76\u4e14\u52a0\u4e0a -m \u53c2\u6570\u8ba9\u5408\u5e76\u65f6\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 commit\u3002 $ git merge --no-ff -m \"merge with no-ff\" dev","title":"Fast forward"},{"location":"bbb/Git/#stashing","text":"\u5728\u4e00\u4e2a\u5206\u652f\u4e0a\u64cd\u4f5c\u4e4b\u540e\uff0c\u5982\u679c\u8fd8\u6ca1\u6709\u5c06\u4fee\u6539\u63d0\u4ea4\u5230\u5206\u652f\u4e0a\uff0c\u6b64\u65f6\u8fdb\u884c\u5207\u6362\u5206\u652f\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u5206\u652f\u4e0a\u4e5f\u80fd\u770b\u5230\u65b0\u7684\u4fee\u6539\u3002\u8fd9\u662f\u56e0\u4e3a\u6240\u6709\u5206\u652f\u90fd\u5171\u7528\u4e00\u4e2a\u5de5\u4f5c\u533a\u7684\u7f18\u6545\u3002 \u53ef\u4ee5\u4f7f\u7528 git stash \u5c06\u5f53\u524d\u5206\u652f\u7684\u4fee\u6539\u50a8\u85cf\u8d77\u6765\uff0c\u6b64\u65f6\u5f53\u524d\u5de5\u4f5c\u533a\u7684\u6240\u6709\u4fee\u6539\u90fd\u4f1a\u88ab\u5b58\u5230\u6808\u4e2d\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u524d\u5de5\u4f5c\u533a\u662f\u5e72\u51c0\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u672a\u63d0\u4ea4\u7684\u4fee\u6539\u3002\u6b64\u65f6\u5c31\u53ef\u4ee5\u5b89\u5168\u7684\u5207\u6362\u5230\u5176\u5b83\u5206\u652f\u4e0a\u4e86\u3002 $ git stash Saved working directory and index state \\ \"WIP on master: 049d078 added the index file\" HEAD is now at 049d078 added the index file (To restore them type \"git stash apply\") \u8be5\u529f\u80fd\u53ef\u4ee5\u7528\u4e8e bug \u5206\u652f\u7684\u5b9e\u73b0\u3002\u5982\u679c\u5f53\u524d\u6b63\u5728 dev \u5206\u652f\u4e0a\u8fdb\u884c\u5f00\u53d1\uff0c\u4f46\u662f\u6b64\u65f6 master \u4e0a\u6709\u4e2a bug \u9700\u8981\u4fee\u590d\uff0c\u4f46\u662f dev \u5206\u652f\u4e0a\u7684\u5f00\u53d1\u8fd8\u672a\u5b8c\u6210\uff0c\u4e0d\u60f3\u7acb\u5373\u63d0\u4ea4\u3002\u5728\u65b0\u5efa bug \u5206\u652f\u5e76\u5207\u6362\u5230 bug \u5206\u652f\u4e4b\u524d\u5c31\u9700\u8981\u4f7f\u7528 git stash \u5c06 dev \u5206\u652f\u7684\u672a\u63d0\u4ea4\u4fee\u6539\u50a8\u85cf\u8d77\u6765\u3002","title":"\u50a8\u85cf\uff08Stashing\uff09"},{"location":"bbb/Git/#ssh","text":"Git \u4ed3\u5e93\u548c Github \u4e2d\u5fc3\u4ed3\u5e93\u4e4b\u95f4\u7684\u4f20\u8f93\u662f\u901a\u8fc7 SSH \u52a0\u5bc6\u3002 \u5982\u679c\u5de5\u4f5c\u533a\u4e0b\u6ca1\u6709 .ssh \u76ee\u5f55\uff0c\u6216\u8005\u8be5\u76ee\u5f55\u4e0b\u6ca1\u6709 id_rsa \u548c id_rsa.pub \u8fd9\u4e24\u4e2a\u6587\u4ef6\uff0c\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6765\u521b\u5efa SSH Key\uff1a $ ssh-keygen -t rsa -C \"youremail@example.com\" \u7136\u540e\u628a\u516c\u94a5 id_rsa.pub \u7684\u5185\u5bb9\u590d\u5236\u5230 Github \"Account settings\" \u7684 SSH Keys \u4e2d\u3002","title":"SSH \u4f20\u8f93\u8bbe\u7f6e"},{"location":"bbb/Git/#gitignore","text":"\u5ffd\u7565\u4ee5\u4e0b\u6587\u4ef6\uff1a \u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u7f29\u7565\u56fe\uff1b \u7f16\u8bd1\u751f\u6210\u7684\u4e2d\u95f4\u6587\u4ef6\uff0c\u6bd4\u5982 Java \u7f16\u8bd1\u4ea7\u751f\u7684 .class \u6587\u4ef6\uff1b \u81ea\u5df1\u7684\u654f\u611f\u4fe1\u606f\uff0c\u6bd4\u5982\u5b58\u653e\u53e3\u4ee4\u7684\u914d\u7f6e\u6587\u4ef6\u3002 \u4e0d\u9700\u8981\u5168\u90e8\u81ea\u5df1\u7f16\u5199\uff0c\u53ef\u4ee5\u5230 https://github.com/github/gitignore \u4e2d\u8fdb\u884c\u67e5\u8be2\u3002","title":".gitignore \u6587\u4ef6"},{"location":"bbb/Git/#git_1","text":"\u6bd4\u8f83\u8be6\u7ec6\u7684\u5730\u5740\uff1ahttp://www.cheat-sheets.org/saved-copy/git-cheat-sheet.pdf","title":"Git \u547d\u4ee4\u4e00\u89c8"},{"location":"bbb/Git/#_6","text":"Git - \u7b80\u660e\u6307\u5357 \u56fe\u89e3 Git \u5ed6\u96ea\u5cf0 : Git \u6559\u7a0b Learn Git Branching","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/Socket/","text":"Socket Socket \u4e00\u3001I/O \u6a21\u578b \u963b\u585e\u5f0f I/O \u975e\u963b\u585e\u5f0f I/O I/O \u590d\u7528 \u4fe1\u53f7\u9a71\u52a8 I/O \u5f02\u6b65 I/O \u4e94\u5927 I/O \u6a21\u578b\u6bd4\u8f83 \u4e8c\u3001I/O \u590d\u7528 select poll \u6bd4\u8f83 epoll \u5de5\u4f5c\u6a21\u5f0f \u5e94\u7528\u573a\u666f \u53c2\u8003\u8d44\u6599 \u4e00\u3001I/O \u6a21\u578b \u4e00\u4e2a\u8f93\u5165\u64cd\u4f5c\u901a\u5e38\u5305\u62ec\u4e24\u4e2a\u9636\u6bb5\uff1a \u7b49\u5f85\u6570\u636e\u51c6\u5907\u597d \u4ece\u5185\u6838\u5411\u8fdb\u7a0b\u590d\u5236\u6570\u636e \u5bf9\u4e8e\u4e00\u4e2a\u5957\u63a5\u5b57\u4e0a\u7684\u8f93\u5165\u64cd\u4f5c\uff0c\u7b2c\u4e00\u6b65\u901a\u5e38\u6d89\u53ca\u7b49\u5f85\u6570\u636e\u4ece\u7f51\u7edc\u4e2d\u5230\u8fbe\u3002\u5f53\u6240\u7b49\u5f85\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u5b83\u88ab\u590d\u5236\u5230\u5185\u6838\u4e2d\u7684\u67d0\u4e2a\u7f13\u51b2\u533a\u3002\u7b2c\u4e8c\u6b65\u5c31\u662f\u628a\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u3002 Unix \u6709\u4e94\u79cd I/O \u6a21\u578b\uff1a \u963b\u585e\u5f0f I/O \u975e\u963b\u585e\u5f0f I/O I/O \u590d\u7528\uff08select \u548c poll\uff09 \u4fe1\u53f7\u9a71\u52a8\u5f0f I/O\uff08SIGIO\uff09 \u5f02\u6b65 I/O\uff08AIO\uff09 \u963b\u585e\u5f0f I/O \u5e94\u7528\u8fdb\u7a0b\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u4e2d\u624d\u8fd4\u56de\u3002 \u5e94\u8be5\u6ce8\u610f\u5230\uff0c\u5728\u963b\u585e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b83\u5e94\u7528\u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6267\u884c\uff0c\u56e0\u6b64\u963b\u585e\u4e0d\u610f\u5473\u7740\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u88ab\u963b\u585e\u3002\u56e0\u4e3a\u5176\u5b83\u5e94\u7528\u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6267\u884c\uff0c\u6240\u4ee5\u4e0d\u6d88\u8017 CPU \u65f6\u95f4\uff0c\u8fd9\u79cd\u6a21\u578b\u7684 CPU \u5229\u7528\u7387\u4f1a\u6bd4\u8f83\u9ad8\u3002 \u4e0b\u56fe\u4e2d\uff0crecvfrom() \u7528\u4e8e\u63a5\u6536 Socket \u4f20\u6765\u7684\u6570\u636e\uff0c\u5e76\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a buf \u4e2d\u3002\u8fd9\u91cc\u628a recvfrom() \u5f53\u6210\u7cfb\u7edf\u8c03\u7528\u3002 ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen); \u975e\u963b\u585e\u5f0f I/O \u5e94\u7528\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u5185\u6838\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\u3002\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4f46\u662f\u9700\u8981\u4e0d\u65ad\u7684\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u77e5 I/O \u662f\u5426\u5b8c\u6210\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u8f6e\u8be2\uff08polling\uff09\u3002 \u7531\u4e8e CPU \u8981\u5904\u7406\u66f4\u591a\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u79cd\u6a21\u578b\u7684 CPU \u5229\u7528\u7387\u6bd4\u8f83\u4f4e\u3002 I/O \u590d\u7528 \u4f7f\u7528 select \u6216\u8005 poll \u7b49\u5f85\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b49\u5f85\u591a\u4e2a\u5957\u63a5\u5b57\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u53d8\u4e3a\u53ef\u8bfb\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u5f53\u67d0\u4e00\u4e2a\u5957\u63a5\u5b57\u53ef\u8bfb\u65f6\u8fd4\u56de\uff0c\u4e4b\u540e\u518d\u4f7f\u7528 recvfrom \u628a\u6570\u636e\u4ece\u5185\u6838\u590d\u5236\u5230\u8fdb\u7a0b\u4e2d\u3002 \u5b83\u53ef\u4ee5\u8ba9\u5355\u4e2a\u8fdb\u7a0b\u5177\u6709\u5904\u7406\u591a\u4e2a I/O \u4e8b\u4ef6\u7684\u80fd\u529b\u3002\u53c8\u88ab\u79f0\u4e3a Event Driven I/O\uff0c\u5373\u4e8b\u4ef6\u9a71\u52a8 I/O\u3002 \u5982\u679c\u4e00\u4e2a Web \u670d\u52a1\u5668\u6ca1\u6709 I/O \u590d\u7528\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a Socket \u8fde\u63a5\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u5904\u7406\u3002\u5982\u679c\u540c\u65f6\u6709\u51e0\u4e07\u4e2a\u8fde\u63a5\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u521b\u5efa\u76f8\u540c\u6570\u91cf\u7684\u7ebf\u7a0b\u3002\u76f8\u6bd4\u4e8e\u591a\u8fdb\u7a0b\u548c\u591a\u7ebf\u7a0b\u6280\u672f\uff0cI/O \u590d\u7528\u4e0d\u9700\u8981\u8fdb\u7a0b\u7ebf\u7a0b\u521b\u5efa\u548c\u5207\u6362\u7684\u5f00\u9500\uff0c\u7cfb\u7edf\u5f00\u9500\u66f4\u5c0f\u3002 \u4fe1\u53f7\u9a71\u52a8 I/O \u5e94\u7528\u8fdb\u7a0b\u4f7f\u7528 sigaction \u7cfb\u7edf\u8c03\u7528\uff0c\u5185\u6838\u7acb\u5373\u8fd4\u56de\uff0c\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b49\u5f85\u6570\u636e\u9636\u6bb5\u5e94\u7528\u8fdb\u7a0b\u662f\u975e\u963b\u585e\u7684\u3002\u5185\u6838\u5728\u6570\u636e\u5230\u8fbe\u65f6\u5411\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001 SIGIO \u4fe1\u53f7\uff0c\u5e94\u7528\u8fdb\u7a0b\u6536\u5230\u4e4b\u540e\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u8c03\u7528 recvfrom \u5c06\u6570\u636e\u4ece\u5185\u6838\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u4e2d\u3002 \u76f8\u6bd4\u4e8e\u975e\u963b\u585e\u5f0f I/O \u7684\u8f6e\u8be2\u65b9\u5f0f\uff0c\u4fe1\u53f7\u9a71\u52a8 I/O \u7684 CPU \u5229\u7528\u7387\u66f4\u9ad8\u3002 \u5f02\u6b65 I/O \u5e94\u7528\u8fdb\u7a0b\u6267\u884c aio_read \u7cfb\u7edf\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e0d\u4f1a\u88ab\u963b\u585e\uff0c\u5185\u6838\u4f1a\u5728\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u5411\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u3002 \u5f02\u6b65 I/O \u4e0e\u4fe1\u53f7\u9a71\u52a8 I/O \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5f02\u6b65 I/O \u7684\u4fe1\u53f7\u662f\u901a\u77e5\u5e94\u7528\u8fdb\u7a0b I/O \u5b8c\u6210\uff0c\u800c\u4fe1\u53f7\u9a71\u52a8 I/O \u7684\u4fe1\u53f7\u662f\u901a\u77e5\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u5f00\u59cb I/O\u3002 \u4e94\u5927 I/O \u6a21\u578b\u6bd4\u8f83 \u540c\u6b65 I/O\uff1a\u5c06\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u7684\u9636\u6bb5\uff08\u7b2c\u4e8c\u9636\u6bb5\uff09\uff0c\u5e94\u7528\u8fdb\u7a0b\u4f1a\u963b\u585e\u3002 \u5f02\u6b65 I/O\uff1a\u7b2c\u4e8c\u9636\u6bb5\u5e94\u7528\u8fdb\u7a0b\u4e0d\u4f1a\u963b\u585e\u3002 \u540c\u6b65 I/O \u5305\u62ec\u963b\u585e\u5f0f I/O\u3001\u975e\u963b\u585e\u5f0f I/O\u3001I/O \u590d\u7528\u548c\u4fe1\u53f7\u9a71\u52a8 I/O \uff0c\u5b83\u4eec\u7684\u4e3b\u8981\u533a\u522b\u5728\u7b2c\u4e00\u4e2a\u9636\u6bb5\u3002 \u975e\u963b\u585e\u5f0f I/O \u3001\u4fe1\u53f7\u9a71\u52a8 I/O \u548c\u5f02\u6b65 I/O \u5728\u7b2c\u4e00\u9636\u6bb5\u4e0d\u4f1a\u963b\u585e\u3002 \u4e8c\u3001I/O \u590d\u7528 select/poll/epoll \u90fd\u662f I/O \u591a\u8def\u590d\u7528\u7684\u5177\u4f53\u5b9e\u73b0\uff0cselect \u51fa\u73b0\u7684\u6700\u65e9\uff0c\u4e4b\u540e\u662f poll\uff0c\u518d\u662f epoll\u3002 select int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); select \u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u76d1\u89c6\u4e00\u7ec4\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7b49\u5f85\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u63cf\u8ff0\u7b26\u6210\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u4ece\u800c\u5b8c\u6210 I/O \u64cd\u4f5c\u3002 fd_set \u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff0c\u6570\u7ec4\u5927\u5c0f\u4f7f\u7528 FD_SETSIZE \u5b9a\u4e49\uff0c\u6240\u4ee5\u53ea\u80fd\u76d1\u542c\u5c11\u4e8e FD_SETSIZE \u6570\u91cf\u7684\u63cf\u8ff0\u7b26\u3002\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u63cf\u8ff0\u7b26\u7c7b\u578b\uff1areadset\u3001writeset\u3001exceptset\uff0c\u5206\u522b\u5bf9\u5e94\u8bfb\u3001\u5199\u3001\u5f02\u5e38\u6761\u4ef6\u7684\u63cf\u8ff0\u7b26\u96c6\u5408\u3002 timeout \u4e3a\u8d85\u65f6\u53c2\u6570\uff0c\u8c03\u7528 select \u4f1a\u4e00\u76f4\u963b\u585e\u76f4\u5230\u6709\u63cf\u8ff0\u7b26\u7684\u4e8b\u4ef6\u5230\u8fbe\u6216\u8005\u7b49\u5f85\u7684\u65f6\u95f4\u8d85\u8fc7 timeout\u3002 \u6210\u529f\u8c03\u7528\u8fd4\u56de\u7ed3\u679c\u5927\u4e8e 0\uff0c\u51fa\u9519\u8fd4\u56de\u7ed3\u679c\u4e3a -1\uff0c\u8d85\u65f6\u8fd4\u56de\u7ed3\u679c\u4e3a 0\u3002 fd_set fd_in, fd_out; struct timeval tv; // Reset the sets FD_ZERO( &fd_in ); FD_ZERO( &fd_out ); // Monitor sock1 for input events FD_SET( sock1, &fd_in ); // Monitor sock2 for output events FD_SET( sock2, &fd_out ); // Find out which socket has the largest numeric value as select requires it int largest_sock = sock1 > sock2 ? sock1 : sock2; // Wait up to 10 seconds tv.tv_sec = 10; tv.tv_usec = 0; // Call the select int ret = select( largest_sock + 1, &fd_in, &fd_out, NULL, &tv ); // Check if select actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { if ( FD_ISSET( sock1, &fd_in ) ) // input event on sock1 if ( FD_ISSET( sock2, &fd_out ) ) // output event on sock2 } poll int poll(struct pollfd *fds, unsigned int nfds, int timeout); poll \u7684\u529f\u80fd\u4e0e select \u7c7b\u4f3c\uff0c\u4e5f\u662f\u7b49\u5f85\u4e00\u7ec4\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e00\u4e2a\u6210\u4e3a\u5c31\u7eea\u72b6\u6001\u3002 poll \u4e2d\u7684\u63cf\u8ff0\u7b26\u662f pollfd \u7c7b\u578b\u7684\u6570\u7ec4\uff0cpollfd \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a struct pollfd { int fd; /* file descriptor */ short events; /* requested events */ short revents; /* returned events */ }; // The structure for two events struct pollfd fds[2]; // Monitor sock1 for input fds[0].fd = sock1; fds[0].events = POLLIN; // Monitor sock2 for output fds[1].fd = sock2; fds[1].events = POLLOUT; // Wait 10 seconds int ret = poll( &fds, 2, 10000 ); // Check if poll actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { // If we detect the event, zero it out so we can reuse the structure if ( fds[0].revents & POLLIN ) fds[0].revents = 0; // input event on sock1 if ( fds[1].revents & POLLOUT ) fds[1].revents = 0; // output event on sock2 } \u6bd4\u8f83 1. \u529f\u80fd select \u548c poll \u7684\u529f\u80fd\u57fa\u672c\u76f8\u540c\uff0c\u4e0d\u8fc7\u5728\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u4e0a\u6709\u6240\u4e0d\u540c\u3002 select \u4f1a\u4fee\u6539\u63cf\u8ff0\u7b26\uff0c\u800c poll \u4e0d\u4f1a\uff1b select \u7684\u63cf\u8ff0\u7b26\u7c7b\u578b\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff0cFD_SETSIZE \u5927\u5c0f\u9ed8\u8ba4\u4e3a 1024\uff0c\u56e0\u6b64\u9ed8\u8ba4\u53ea\u80fd\u76d1\u542c\u5c11\u4e8e 1024 \u4e2a\u63cf\u8ff0\u7b26\u3002\u5982\u679c\u8981\u76d1\u542c\u66f4\u591a\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u9700\u8981\u4fee\u6539 FD_SETSIZE \u4e4b\u540e\u91cd\u65b0\u7f16\u8bd1\uff1b\u800c poll \u6ca1\u6709\u63cf\u8ff0\u7b26\u6570\u91cf\u7684\u9650\u5236\uff1b poll \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4e8b\u4ef6\u7c7b\u578b\uff0c\u5e76\u4e14\u5bf9\u63cf\u8ff0\u7b26\u7684\u91cd\u590d\u5229\u7528\u4e0a\u6bd4 select \u9ad8\u3002 \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u67d0\u4e2a\u63cf\u8ff0\u7b26\u8c03\u7528\u4e86 select \u6216\u8005 poll\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5173\u95ed\u4e86\u8be5\u63cf\u8ff0\u7b26\uff0c\u4f1a\u5bfc\u81f4\u8c03\u7528\u7ed3\u679c\u4e0d\u786e\u5b9a\u3002 2. \u901f\u5ea6 select \u548c poll \u901f\u5ea6\u90fd\u6bd4\u8f83\u6162\uff0c\u6bcf\u6b21\u8c03\u7528\u90fd\u9700\u8981\u5c06\u5168\u90e8\u63cf\u8ff0\u7b26\u4ece\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u590d\u5236\u5230\u5185\u6838\u7f13\u51b2\u533a\u3002 3. \u53ef\u79fb\u690d\u6027 \u51e0\u4e4e\u6240\u6709\u7684\u7cfb\u7edf\u90fd\u652f\u6301 select\uff0c\u4f46\u662f\u53ea\u6709\u6bd4\u8f83\u65b0\u7684\u7cfb\u7edf\u652f\u6301 poll\u3002 epoll int epoll_create(int size); int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\uff1b int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout); epoll_ctl() \u7528\u4e8e\u5411\u5185\u6838\u6ce8\u518c\u65b0\u7684\u63cf\u8ff0\u7b26\u6216\u8005\u662f\u6539\u53d8\u67d0\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u3002\u5df2\u6ce8\u518c\u7684\u63cf\u8ff0\u7b26\u5728\u5185\u6838\u4e2d\u4f1a\u88ab\u7ef4\u62a4\u5728\u4e00\u68f5\u7ea2\u9ed1\u6811\u4e0a\uff0c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u5185\u6838\u4f1a\u5c06 I/O \u51c6\u5907\u597d\u7684\u63cf\u8ff0\u7b26\u52a0\u5165\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d\u7ba1\u7406\uff0c\u8fdb\u7a0b\u8c03\u7528 epoll_wait() \u4fbf\u53ef\u4ee5\u5f97\u5230\u4e8b\u4ef6\u5b8c\u6210\u7684\u63cf\u8ff0\u7b26\u3002 \u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u53ef\u4ee5\u770b\u51fa\uff0cepoll \u53ea\u9700\u8981\u5c06\u63cf\u8ff0\u7b26\u4ece\u8fdb\u7a0b\u7f13\u51b2\u533a\u5411\u5185\u6838\u7f13\u51b2\u533a\u62f7\u8d1d\u4e00\u6b21\uff0c\u5e76\u4e14\u8fdb\u7a0b\u4e0d\u9700\u8981\u901a\u8fc7\u8f6e\u8be2\u6765\u83b7\u5f97\u4e8b\u4ef6\u5b8c\u6210\u7684\u63cf\u8ff0\u7b26\u3002 epoll \u4ec5\u9002\u7528\u4e8e Linux OS\u3002 epoll \u6bd4 select \u548c poll \u66f4\u52a0\u7075\u6d3b\u800c\u4e14\u6ca1\u6709\u63cf\u8ff0\u7b26\u6570\u91cf\u9650\u5236\u3002 epoll \u5bf9\u591a\u7ebf\u7a0b\u7f16\u7a0b\u66f4\u6709\u53cb\u597d\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8c03\u7528\u4e86 epoll_wait() \u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5173\u95ed\u4e86\u540c\u4e00\u4e2a\u63cf\u8ff0\u7b26\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u50cf select \u548c poll \u7684\u4e0d\u786e\u5b9a\u60c5\u51b5\u3002 // Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets. // The function argument is ignored (it was not before, but now it is), so put your favorite number here int pollingfd = epoll_create( 0xCAFE ); if ( pollingfd < 0 ) // report error // Initialize the epoll structure in case more members are added in future struct epoll_event ev = { 0 }; // Associate the connection class instance with the event. You can associate anything // you want, epoll does not use this information. We store a connection class pointer, pConnection1 ev.data.ptr = pConnection1; // Monitor for input, and do not automatically rearm the descriptor after the event ev.events = EPOLLIN | EPOLLONESHOT; // Add the descriptor into the monitoring list. We can do it even if another thread is // waiting in epoll_wait - the descriptor will be properly added if ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1->getSocket(), &ev ) != 0 ) // report error // Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen) struct epoll_event pevents[ 20 ]; // Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array int ready = epoll_wait( pollingfd, pevents, 20, 10000 ); // Check if epoll actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { // Check if any events detected for ( int i = 0; i < ready; i++ ) { if ( pevents[i].events & EPOLLIN ) { // Get back our connection pointer Connection * c = (Connection*) pevents[i].data.ptr; c->handleReadEvent(); } } } \u5de5\u4f5c\u6a21\u5f0f epoll \u7684\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u6709\u4e24\u79cd\u89e6\u53d1\u6a21\u5f0f\uff1aLT\uff08level trigger\uff09\u548c ET\uff08edge trigger\uff09\u3002 1. LT \u6a21\u5f0f \u5f53 epoll_wait() \u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u5230\u8fbe\u65f6\uff0c\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u4e0d\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\uff0c\u4e0b\u6b21\u8c03\u7528 epoll_wait() \u4f1a\u518d\u6b21\u901a\u77e5\u8fdb\u7a0b\u3002\u662f\u9ed8\u8ba4\u7684\u4e00\u79cd\u6a21\u5f0f\uff0c\u5e76\u4e14\u540c\u65f6\u652f\u6301 Blocking \u548c No-Blocking\u3002 2. ET \u6a21\u5f0f \u548c LT \u6a21\u5f0f\u4e0d\u540c\u7684\u662f\uff0c\u901a\u77e5\u4e4b\u540e\u8fdb\u7a0b\u5fc5\u987b\u7acb\u5373\u5904\u7406\u4e8b\u4ef6\uff0c\u4e0b\u6b21\u518d\u8c03\u7528 epoll_wait() \u65f6\u4e0d\u4f1a\u518d\u5f97\u5230\u4e8b\u4ef6\u5230\u8fbe\u7684\u901a\u77e5\u3002 \u5f88\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86 epoll \u4e8b\u4ef6\u88ab\u91cd\u590d\u89e6\u53d1\u7684\u6b21\u6570\uff0c\u56e0\u6b64\u6548\u7387\u8981\u6bd4 LT \u6a21\u5f0f\u9ad8\u3002\u53ea\u652f\u6301 No-Blocking\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u7684\u963b\u585e\u8bfb/\u963b\u585e\u5199\u64cd\u4f5c\u628a\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4efb\u52a1\u997f\u6b7b\u3002 \u5e94\u7528\u573a\u666f \u5f88\u5bb9\u6613\u4ea7\u751f\u4e00\u79cd\u9519\u89c9\u8ba4\u4e3a\u53ea\u8981\u7528 epoll \u5c31\u53ef\u4ee5\u4e86\uff0cselect \u548c poll \u90fd\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u5176\u5b9e\u5b83\u4eec\u90fd\u6709\u5404\u81ea\u7684\u4f7f\u7528\u573a\u666f\u3002 1. select \u5e94\u7528\u573a\u666f select \u7684 timeout \u53c2\u6570\u7cbe\u5ea6\u4e3a\u5fae\u79d2\uff0c\u800c poll \u548c epoll \u4e3a\u6beb\u79d2\uff0c\u56e0\u6b64 select \u66f4\u52a0\u9002\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u6bd4\u8f83\u9ad8\u7684\u573a\u666f\uff0c\u6bd4\u5982\u6838\u53cd\u5e94\u5806\u7684\u63a7\u5236\u3002 select \u53ef\u79fb\u690d\u6027\u66f4\u597d\uff0c\u51e0\u4e4e\u88ab\u6240\u6709\u4e3b\u6d41\u5e73\u53f0\u6240\u652f\u6301\u3002 2. poll \u5e94\u7528\u573a\u666f poll \u6ca1\u6709\u6700\u5927\u63cf\u8ff0\u7b26\u6570\u91cf\u7684\u9650\u5236\uff0c\u5982\u679c\u5e73\u53f0\u652f\u6301\u5e76\u4e14\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u5e94\u8be5\u4f7f\u7528 poll \u800c\u4e0d\u662f select\u3002 3. epoll \u5e94\u7528\u573a\u666f \u53ea\u9700\u8981\u8fd0\u884c\u5728 Linux \u5e73\u53f0\u4e0a\uff0c\u6709\u5927\u91cf\u7684\u63cf\u8ff0\u7b26\u9700\u8981\u540c\u65f6\u8f6e\u8be2\uff0c\u5e76\u4e14\u8fd9\u4e9b\u8fde\u63a5\u6700\u597d\u662f\u957f\u8fde\u63a5\u3002 \u9700\u8981\u540c\u65f6\u76d1\u63a7\u5c0f\u4e8e 1000 \u4e2a\u63cf\u8ff0\u7b26\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 epoll\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e94\u7528\u573a\u666f\u4e0b\u5e76\u4e0d\u80fd\u4f53\u73b0 epoll \u7684\u4f18\u52bf\u3002 \u9700\u8981\u76d1\u63a7\u7684\u63cf\u8ff0\u7b26\u72b6\u6001\u53d8\u5316\u591a\uff0c\u800c\u4e14\u90fd\u662f\u975e\u5e38\u77ed\u6682\u7684\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 epoll\u3002\u56e0\u4e3a epoll \u4e2d\u7684\u6240\u6709\u63cf\u8ff0\u7b26\u90fd\u5b58\u50a8\u5728\u5185\u6838\u4e2d\uff0c\u9020\u6210\u6bcf\u6b21\u9700\u8981\u5bf9\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u6539\u53d8\u90fd\u9700\u8981\u901a\u8fc7 epoll_ctl() \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u9891\u7e41\u7cfb\u7edf\u8c03\u7528\u964d\u4f4e\u6548\u7387\u3002\u5e76\u4e14 epoll \u7684\u63cf\u8ff0\u7b26\u5b58\u50a8\u5728\u5185\u6838\uff0c\u4e0d\u5bb9\u6613\u8c03\u8bd5\u3002 \u53c2\u8003\u8d44\u6599 Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004. http://man7.org/linux/man-pages/man2/select.2.html http://man7.org/linux/man-pages/man2/poll.2.html Boost application performance using asynchronous I/O Synchronous and Asynchronous I/O Linux IO \u6a21\u5f0f\u53ca select\u3001poll\u3001epoll \u8be6\u89e3 poll vs select vs event-based select / poll / epoll: practical difference for system architects Browse the source code of userspace/glibc/sysdeps/unix/sysv/linux/ online","title":"Socket"},{"location":"bbb/Socket/#socket","text":"Socket \u4e00\u3001I/O \u6a21\u578b \u963b\u585e\u5f0f I/O \u975e\u963b\u585e\u5f0f I/O I/O \u590d\u7528 \u4fe1\u53f7\u9a71\u52a8 I/O \u5f02\u6b65 I/O \u4e94\u5927 I/O \u6a21\u578b\u6bd4\u8f83 \u4e8c\u3001I/O \u590d\u7528 select poll \u6bd4\u8f83 epoll \u5de5\u4f5c\u6a21\u5f0f \u5e94\u7528\u573a\u666f \u53c2\u8003\u8d44\u6599","title":"Socket"},{"location":"bbb/Socket/#io","text":"\u4e00\u4e2a\u8f93\u5165\u64cd\u4f5c\u901a\u5e38\u5305\u62ec\u4e24\u4e2a\u9636\u6bb5\uff1a \u7b49\u5f85\u6570\u636e\u51c6\u5907\u597d \u4ece\u5185\u6838\u5411\u8fdb\u7a0b\u590d\u5236\u6570\u636e \u5bf9\u4e8e\u4e00\u4e2a\u5957\u63a5\u5b57\u4e0a\u7684\u8f93\u5165\u64cd\u4f5c\uff0c\u7b2c\u4e00\u6b65\u901a\u5e38\u6d89\u53ca\u7b49\u5f85\u6570\u636e\u4ece\u7f51\u7edc\u4e2d\u5230\u8fbe\u3002\u5f53\u6240\u7b49\u5f85\u6570\u636e\u5230\u8fbe\u65f6\uff0c\u5b83\u88ab\u590d\u5236\u5230\u5185\u6838\u4e2d\u7684\u67d0\u4e2a\u7f13\u51b2\u533a\u3002\u7b2c\u4e8c\u6b65\u5c31\u662f\u628a\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u3002 Unix \u6709\u4e94\u79cd I/O \u6a21\u578b\uff1a \u963b\u585e\u5f0f I/O \u975e\u963b\u585e\u5f0f I/O I/O \u590d\u7528\uff08select \u548c poll\uff09 \u4fe1\u53f7\u9a71\u52a8\u5f0f I/O\uff08SIGIO\uff09 \u5f02\u6b65 I/O\uff08AIO\uff09","title":"\u4e00\u3001I/O \u6a21\u578b"},{"location":"bbb/Socket/#io_1","text":"\u5e94\u7528\u8fdb\u7a0b\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u4e2d\u624d\u8fd4\u56de\u3002 \u5e94\u8be5\u6ce8\u610f\u5230\uff0c\u5728\u963b\u585e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5176\u5b83\u5e94\u7528\u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6267\u884c\uff0c\u56e0\u6b64\u963b\u585e\u4e0d\u610f\u5473\u7740\u6574\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u90fd\u88ab\u963b\u585e\u3002\u56e0\u4e3a\u5176\u5b83\u5e94\u7528\u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u6267\u884c\uff0c\u6240\u4ee5\u4e0d\u6d88\u8017 CPU \u65f6\u95f4\uff0c\u8fd9\u79cd\u6a21\u578b\u7684 CPU \u5229\u7528\u7387\u4f1a\u6bd4\u8f83\u9ad8\u3002 \u4e0b\u56fe\u4e2d\uff0crecvfrom() \u7528\u4e8e\u63a5\u6536 Socket \u4f20\u6765\u7684\u6570\u636e\uff0c\u5e76\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7684\u7f13\u51b2\u533a buf \u4e2d\u3002\u8fd9\u91cc\u628a recvfrom() \u5f53\u6210\u7cfb\u7edf\u8c03\u7528\u3002 ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);","title":"\u963b\u585e\u5f0f I/O"},{"location":"bbb/Socket/#io_2","text":"\u5e94\u7528\u8fdb\u7a0b\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u4e4b\u540e\uff0c\u5185\u6838\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u7801\u3002\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4f46\u662f\u9700\u8981\u4e0d\u65ad\u7684\u6267\u884c\u7cfb\u7edf\u8c03\u7528\u6765\u83b7\u77e5 I/O \u662f\u5426\u5b8c\u6210\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a\u8f6e\u8be2\uff08polling\uff09\u3002 \u7531\u4e8e CPU \u8981\u5904\u7406\u66f4\u591a\u7684\u7cfb\u7edf\u8c03\u7528\uff0c\u56e0\u6b64\u8fd9\u79cd\u6a21\u578b\u7684 CPU \u5229\u7528\u7387\u6bd4\u8f83\u4f4e\u3002","title":"\u975e\u963b\u585e\u5f0f I/O"},{"location":"bbb/Socket/#io_3","text":"\u4f7f\u7528 select \u6216\u8005 poll \u7b49\u5f85\u6570\u636e\uff0c\u5e76\u4e14\u53ef\u4ee5\u7b49\u5f85\u591a\u4e2a\u5957\u63a5\u5b57\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u53d8\u4e3a\u53ef\u8bfb\u3002\u8fd9\u4e00\u8fc7\u7a0b\u4f1a\u88ab\u963b\u585e\uff0c\u5f53\u67d0\u4e00\u4e2a\u5957\u63a5\u5b57\u53ef\u8bfb\u65f6\u8fd4\u56de\uff0c\u4e4b\u540e\u518d\u4f7f\u7528 recvfrom \u628a\u6570\u636e\u4ece\u5185\u6838\u590d\u5236\u5230\u8fdb\u7a0b\u4e2d\u3002 \u5b83\u53ef\u4ee5\u8ba9\u5355\u4e2a\u8fdb\u7a0b\u5177\u6709\u5904\u7406\u591a\u4e2a I/O \u4e8b\u4ef6\u7684\u80fd\u529b\u3002\u53c8\u88ab\u79f0\u4e3a Event Driven I/O\uff0c\u5373\u4e8b\u4ef6\u9a71\u52a8 I/O\u3002 \u5982\u679c\u4e00\u4e2a Web \u670d\u52a1\u5668\u6ca1\u6709 I/O \u590d\u7528\uff0c\u90a3\u4e48\u6bcf\u4e00\u4e2a Socket \u8fde\u63a5\u90fd\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u53bb\u5904\u7406\u3002\u5982\u679c\u540c\u65f6\u6709\u51e0\u4e07\u4e2a\u8fde\u63a5\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u521b\u5efa\u76f8\u540c\u6570\u91cf\u7684\u7ebf\u7a0b\u3002\u76f8\u6bd4\u4e8e\u591a\u8fdb\u7a0b\u548c\u591a\u7ebf\u7a0b\u6280\u672f\uff0cI/O \u590d\u7528\u4e0d\u9700\u8981\u8fdb\u7a0b\u7ebf\u7a0b\u521b\u5efa\u548c\u5207\u6362\u7684\u5f00\u9500\uff0c\u7cfb\u7edf\u5f00\u9500\u66f4\u5c0f\u3002","title":"I/O \u590d\u7528"},{"location":"bbb/Socket/#io_4","text":"\u5e94\u7528\u8fdb\u7a0b\u4f7f\u7528 sigaction \u7cfb\u7edf\u8c03\u7528\uff0c\u5185\u6838\u7acb\u5373\u8fd4\u56de\uff0c\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e5f\u5c31\u662f\u8bf4\u7b49\u5f85\u6570\u636e\u9636\u6bb5\u5e94\u7528\u8fdb\u7a0b\u662f\u975e\u963b\u585e\u7684\u3002\u5185\u6838\u5728\u6570\u636e\u5230\u8fbe\u65f6\u5411\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001 SIGIO \u4fe1\u53f7\uff0c\u5e94\u7528\u8fdb\u7a0b\u6536\u5230\u4e4b\u540e\u5728\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u4e2d\u8c03\u7528 recvfrom \u5c06\u6570\u636e\u4ece\u5185\u6838\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u4e2d\u3002 \u76f8\u6bd4\u4e8e\u975e\u963b\u585e\u5f0f I/O \u7684\u8f6e\u8be2\u65b9\u5f0f\uff0c\u4fe1\u53f7\u9a71\u52a8 I/O \u7684 CPU \u5229\u7528\u7387\u66f4\u9ad8\u3002","title":"\u4fe1\u53f7\u9a71\u52a8 I/O"},{"location":"bbb/Socket/#io_5","text":"\u5e94\u7528\u8fdb\u7a0b\u6267\u884c aio_read \u7cfb\u7edf\u8c03\u7528\u4f1a\u7acb\u5373\u8fd4\u56de\uff0c\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\uff0c\u4e0d\u4f1a\u88ab\u963b\u585e\uff0c\u5185\u6838\u4f1a\u5728\u6240\u6709\u64cd\u4f5c\u5b8c\u6210\u4e4b\u540e\u5411\u5e94\u7528\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\u3002 \u5f02\u6b65 I/O \u4e0e\u4fe1\u53f7\u9a71\u52a8 I/O \u7684\u533a\u522b\u5728\u4e8e\uff0c\u5f02\u6b65 I/O \u7684\u4fe1\u53f7\u662f\u901a\u77e5\u5e94\u7528\u8fdb\u7a0b I/O \u5b8c\u6210\uff0c\u800c\u4fe1\u53f7\u9a71\u52a8 I/O \u7684\u4fe1\u53f7\u662f\u901a\u77e5\u5e94\u7528\u8fdb\u7a0b\u53ef\u4ee5\u5f00\u59cb I/O\u3002","title":"\u5f02\u6b65 I/O"},{"location":"bbb/Socket/#io_6","text":"\u540c\u6b65 I/O\uff1a\u5c06\u6570\u636e\u4ece\u5185\u6838\u7f13\u51b2\u533a\u590d\u5236\u5230\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u7684\u9636\u6bb5\uff08\u7b2c\u4e8c\u9636\u6bb5\uff09\uff0c\u5e94\u7528\u8fdb\u7a0b\u4f1a\u963b\u585e\u3002 \u5f02\u6b65 I/O\uff1a\u7b2c\u4e8c\u9636\u6bb5\u5e94\u7528\u8fdb\u7a0b\u4e0d\u4f1a\u963b\u585e\u3002 \u540c\u6b65 I/O \u5305\u62ec\u963b\u585e\u5f0f I/O\u3001\u975e\u963b\u585e\u5f0f I/O\u3001I/O \u590d\u7528\u548c\u4fe1\u53f7\u9a71\u52a8 I/O \uff0c\u5b83\u4eec\u7684\u4e3b\u8981\u533a\u522b\u5728\u7b2c\u4e00\u4e2a\u9636\u6bb5\u3002 \u975e\u963b\u585e\u5f0f I/O \u3001\u4fe1\u53f7\u9a71\u52a8 I/O \u548c\u5f02\u6b65 I/O \u5728\u7b2c\u4e00\u9636\u6bb5\u4e0d\u4f1a\u963b\u585e\u3002","title":"\u4e94\u5927 I/O \u6a21\u578b\u6bd4\u8f83"},{"location":"bbb/Socket/#io_7","text":"select/poll/epoll \u90fd\u662f I/O \u591a\u8def\u590d\u7528\u7684\u5177\u4f53\u5b9e\u73b0\uff0cselect \u51fa\u73b0\u7684\u6700\u65e9\uff0c\u4e4b\u540e\u662f poll\uff0c\u518d\u662f epoll\u3002","title":"\u4e8c\u3001I/O \u590d\u7528"},{"location":"bbb/Socket/#select","text":"int select(int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); select \u5141\u8bb8\u5e94\u7528\u7a0b\u5e8f\u76d1\u89c6\u4e00\u7ec4\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u7b49\u5f85\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u63cf\u8ff0\u7b26\u6210\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u4ece\u800c\u5b8c\u6210 I/O \u64cd\u4f5c\u3002 fd_set \u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff0c\u6570\u7ec4\u5927\u5c0f\u4f7f\u7528 FD_SETSIZE \u5b9a\u4e49\uff0c\u6240\u4ee5\u53ea\u80fd\u76d1\u542c\u5c11\u4e8e FD_SETSIZE \u6570\u91cf\u7684\u63cf\u8ff0\u7b26\u3002\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u63cf\u8ff0\u7b26\u7c7b\u578b\uff1areadset\u3001writeset\u3001exceptset\uff0c\u5206\u522b\u5bf9\u5e94\u8bfb\u3001\u5199\u3001\u5f02\u5e38\u6761\u4ef6\u7684\u63cf\u8ff0\u7b26\u96c6\u5408\u3002 timeout \u4e3a\u8d85\u65f6\u53c2\u6570\uff0c\u8c03\u7528 select \u4f1a\u4e00\u76f4\u963b\u585e\u76f4\u5230\u6709\u63cf\u8ff0\u7b26\u7684\u4e8b\u4ef6\u5230\u8fbe\u6216\u8005\u7b49\u5f85\u7684\u65f6\u95f4\u8d85\u8fc7 timeout\u3002 \u6210\u529f\u8c03\u7528\u8fd4\u56de\u7ed3\u679c\u5927\u4e8e 0\uff0c\u51fa\u9519\u8fd4\u56de\u7ed3\u679c\u4e3a -1\uff0c\u8d85\u65f6\u8fd4\u56de\u7ed3\u679c\u4e3a 0\u3002 fd_set fd_in, fd_out; struct timeval tv; // Reset the sets FD_ZERO( &fd_in ); FD_ZERO( &fd_out ); // Monitor sock1 for input events FD_SET( sock1, &fd_in ); // Monitor sock2 for output events FD_SET( sock2, &fd_out ); // Find out which socket has the largest numeric value as select requires it int largest_sock = sock1 > sock2 ? sock1 : sock2; // Wait up to 10 seconds tv.tv_sec = 10; tv.tv_usec = 0; // Call the select int ret = select( largest_sock + 1, &fd_in, &fd_out, NULL, &tv ); // Check if select actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { if ( FD_ISSET( sock1, &fd_in ) ) // input event on sock1 if ( FD_ISSET( sock2, &fd_out ) ) // output event on sock2 }","title":"select"},{"location":"bbb/Socket/#poll","text":"int poll(struct pollfd *fds, unsigned int nfds, int timeout); poll \u7684\u529f\u80fd\u4e0e select \u7c7b\u4f3c\uff0c\u4e5f\u662f\u7b49\u5f85\u4e00\u7ec4\u63cf\u8ff0\u7b26\u4e2d\u7684\u4e00\u4e2a\u6210\u4e3a\u5c31\u7eea\u72b6\u6001\u3002 poll \u4e2d\u7684\u63cf\u8ff0\u7b26\u662f pollfd \u7c7b\u578b\u7684\u6570\u7ec4\uff0cpollfd \u7684\u5b9a\u4e49\u5982\u4e0b\uff1a struct pollfd { int fd; /* file descriptor */ short events; /* requested events */ short revents; /* returned events */ }; // The structure for two events struct pollfd fds[2]; // Monitor sock1 for input fds[0].fd = sock1; fds[0].events = POLLIN; // Monitor sock2 for output fds[1].fd = sock2; fds[1].events = POLLOUT; // Wait 10 seconds int ret = poll( &fds, 2, 10000 ); // Check if poll actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { // If we detect the event, zero it out so we can reuse the structure if ( fds[0].revents & POLLIN ) fds[0].revents = 0; // input event on sock1 if ( fds[1].revents & POLLOUT ) fds[1].revents = 0; // output event on sock2 }","title":"poll"},{"location":"bbb/Socket/#_1","text":"","title":"\u6bd4\u8f83"},{"location":"bbb/Socket/#1","text":"select \u548c poll \u7684\u529f\u80fd\u57fa\u672c\u76f8\u540c\uff0c\u4e0d\u8fc7\u5728\u4e00\u4e9b\u5b9e\u73b0\u7ec6\u8282\u4e0a\u6709\u6240\u4e0d\u540c\u3002 select \u4f1a\u4fee\u6539\u63cf\u8ff0\u7b26\uff0c\u800c poll \u4e0d\u4f1a\uff1b select \u7684\u63cf\u8ff0\u7b26\u7c7b\u578b\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\uff0cFD_SETSIZE \u5927\u5c0f\u9ed8\u8ba4\u4e3a 1024\uff0c\u56e0\u6b64\u9ed8\u8ba4\u53ea\u80fd\u76d1\u542c\u5c11\u4e8e 1024 \u4e2a\u63cf\u8ff0\u7b26\u3002\u5982\u679c\u8981\u76d1\u542c\u66f4\u591a\u63cf\u8ff0\u7b26\u7684\u8bdd\uff0c\u9700\u8981\u4fee\u6539 FD_SETSIZE \u4e4b\u540e\u91cd\u65b0\u7f16\u8bd1\uff1b\u800c poll \u6ca1\u6709\u63cf\u8ff0\u7b26\u6570\u91cf\u7684\u9650\u5236\uff1b poll \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4e8b\u4ef6\u7c7b\u578b\uff0c\u5e76\u4e14\u5bf9\u63cf\u8ff0\u7b26\u7684\u91cd\u590d\u5229\u7528\u4e0a\u6bd4 select \u9ad8\u3002 \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u67d0\u4e2a\u63cf\u8ff0\u7b26\u8c03\u7528\u4e86 select \u6216\u8005 poll\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5173\u95ed\u4e86\u8be5\u63cf\u8ff0\u7b26\uff0c\u4f1a\u5bfc\u81f4\u8c03\u7528\u7ed3\u679c\u4e0d\u786e\u5b9a\u3002","title":"1. \u529f\u80fd"},{"location":"bbb/Socket/#2","text":"select \u548c poll \u901f\u5ea6\u90fd\u6bd4\u8f83\u6162\uff0c\u6bcf\u6b21\u8c03\u7528\u90fd\u9700\u8981\u5c06\u5168\u90e8\u63cf\u8ff0\u7b26\u4ece\u5e94\u7528\u8fdb\u7a0b\u7f13\u51b2\u533a\u590d\u5236\u5230\u5185\u6838\u7f13\u51b2\u533a\u3002","title":"2. \u901f\u5ea6"},{"location":"bbb/Socket/#3","text":"\u51e0\u4e4e\u6240\u6709\u7684\u7cfb\u7edf\u90fd\u652f\u6301 select\uff0c\u4f46\u662f\u53ea\u6709\u6bd4\u8f83\u65b0\u7684\u7cfb\u7edf\u652f\u6301 poll\u3002","title":"3. \u53ef\u79fb\u690d\u6027"},{"location":"bbb/Socket/#epoll","text":"int epoll_create(int size); int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)\uff1b int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout); epoll_ctl() \u7528\u4e8e\u5411\u5185\u6838\u6ce8\u518c\u65b0\u7684\u63cf\u8ff0\u7b26\u6216\u8005\u662f\u6539\u53d8\u67d0\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u3002\u5df2\u6ce8\u518c\u7684\u63cf\u8ff0\u7b26\u5728\u5185\u6838\u4e2d\u4f1a\u88ab\u7ef4\u62a4\u5728\u4e00\u68f5\u7ea2\u9ed1\u6811\u4e0a\uff0c\u901a\u8fc7\u56de\u8c03\u51fd\u6570\u5185\u6838\u4f1a\u5c06 I/O \u51c6\u5907\u597d\u7684\u63cf\u8ff0\u7b26\u52a0\u5165\u5230\u4e00\u4e2a\u94fe\u8868\u4e2d\u7ba1\u7406\uff0c\u8fdb\u7a0b\u8c03\u7528 epoll_wait() \u4fbf\u53ef\u4ee5\u5f97\u5230\u4e8b\u4ef6\u5b8c\u6210\u7684\u63cf\u8ff0\u7b26\u3002 \u4ece\u4e0a\u9762\u7684\u63cf\u8ff0\u53ef\u4ee5\u770b\u51fa\uff0cepoll \u53ea\u9700\u8981\u5c06\u63cf\u8ff0\u7b26\u4ece\u8fdb\u7a0b\u7f13\u51b2\u533a\u5411\u5185\u6838\u7f13\u51b2\u533a\u62f7\u8d1d\u4e00\u6b21\uff0c\u5e76\u4e14\u8fdb\u7a0b\u4e0d\u9700\u8981\u901a\u8fc7\u8f6e\u8be2\u6765\u83b7\u5f97\u4e8b\u4ef6\u5b8c\u6210\u7684\u63cf\u8ff0\u7b26\u3002 epoll \u4ec5\u9002\u7528\u4e8e Linux OS\u3002 epoll \u6bd4 select \u548c poll \u66f4\u52a0\u7075\u6d3b\u800c\u4e14\u6ca1\u6709\u63cf\u8ff0\u7b26\u6570\u91cf\u9650\u5236\u3002 epoll \u5bf9\u591a\u7ebf\u7a0b\u7f16\u7a0b\u66f4\u6709\u53cb\u597d\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u8c03\u7528\u4e86 epoll_wait() \u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5173\u95ed\u4e86\u540c\u4e00\u4e2a\u63cf\u8ff0\u7b26\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u50cf select \u548c poll \u7684\u4e0d\u786e\u5b9a\u60c5\u51b5\u3002 // Create the epoll descriptor. Only one is needed per app, and is used to monitor all sockets. // The function argument is ignored (it was not before, but now it is), so put your favorite number here int pollingfd = epoll_create( 0xCAFE ); if ( pollingfd < 0 ) // report error // Initialize the epoll structure in case more members are added in future struct epoll_event ev = { 0 }; // Associate the connection class instance with the event. You can associate anything // you want, epoll does not use this information. We store a connection class pointer, pConnection1 ev.data.ptr = pConnection1; // Monitor for input, and do not automatically rearm the descriptor after the event ev.events = EPOLLIN | EPOLLONESHOT; // Add the descriptor into the monitoring list. We can do it even if another thread is // waiting in epoll_wait - the descriptor will be properly added if ( epoll_ctl( epollfd, EPOLL_CTL_ADD, pConnection1->getSocket(), &ev ) != 0 ) // report error // Wait for up to 20 events (assuming we have added maybe 200 sockets before that it may happen) struct epoll_event pevents[ 20 ]; // Wait for 10 seconds, and retrieve less than 20 epoll_event and store them into epoll_event array int ready = epoll_wait( pollingfd, pevents, 20, 10000 ); // Check if epoll actually succeed if ( ret == -1 ) // report error and abort else if ( ret == 0 ) // timeout; no event detected else { // Check if any events detected for ( int i = 0; i < ready; i++ ) { if ( pevents[i].events & EPOLLIN ) { // Get back our connection pointer Connection * c = (Connection*) pevents[i].data.ptr; c->handleReadEvent(); } } }","title":"epoll"},{"location":"bbb/Socket/#_2","text":"epoll \u7684\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u6709\u4e24\u79cd\u89e6\u53d1\u6a21\u5f0f\uff1aLT\uff08level trigger\uff09\u548c ET\uff08edge trigger\uff09\u3002","title":"\u5de5\u4f5c\u6a21\u5f0f"},{"location":"bbb/Socket/#1-lt","text":"\u5f53 epoll_wait() \u68c0\u6d4b\u5230\u63cf\u8ff0\u7b26\u4e8b\u4ef6\u5230\u8fbe\u65f6\uff0c\u5c06\u6b64\u4e8b\u4ef6\u901a\u77e5\u8fdb\u7a0b\uff0c\u8fdb\u7a0b\u53ef\u4ee5\u4e0d\u7acb\u5373\u5904\u7406\u8be5\u4e8b\u4ef6\uff0c\u4e0b\u6b21\u8c03\u7528 epoll_wait() \u4f1a\u518d\u6b21\u901a\u77e5\u8fdb\u7a0b\u3002\u662f\u9ed8\u8ba4\u7684\u4e00\u79cd\u6a21\u5f0f\uff0c\u5e76\u4e14\u540c\u65f6\u652f\u6301 Blocking \u548c No-Blocking\u3002","title":"1. LT \u6a21\u5f0f"},{"location":"bbb/Socket/#2-et","text":"\u548c LT \u6a21\u5f0f\u4e0d\u540c\u7684\u662f\uff0c\u901a\u77e5\u4e4b\u540e\u8fdb\u7a0b\u5fc5\u987b\u7acb\u5373\u5904\u7406\u4e8b\u4ef6\uff0c\u4e0b\u6b21\u518d\u8c03\u7528 epoll_wait() \u65f6\u4e0d\u4f1a\u518d\u5f97\u5230\u4e8b\u4ef6\u5230\u8fbe\u7684\u901a\u77e5\u3002 \u5f88\u5927\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86 epoll \u4e8b\u4ef6\u88ab\u91cd\u590d\u89e6\u53d1\u7684\u6b21\u6570\uff0c\u56e0\u6b64\u6548\u7387\u8981\u6bd4 LT \u6a21\u5f0f\u9ad8\u3002\u53ea\u652f\u6301 No-Blocking\uff0c\u4ee5\u907f\u514d\u7531\u4e8e\u4e00\u4e2a\u6587\u4ef6\u53e5\u67c4\u7684\u963b\u585e\u8bfb/\u963b\u585e\u5199\u64cd\u4f5c\u628a\u5904\u7406\u591a\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u4efb\u52a1\u997f\u6b7b\u3002","title":"2. ET \u6a21\u5f0f"},{"location":"bbb/Socket/#_3","text":"\u5f88\u5bb9\u6613\u4ea7\u751f\u4e00\u79cd\u9519\u89c9\u8ba4\u4e3a\u53ea\u8981\u7528 epoll \u5c31\u53ef\u4ee5\u4e86\uff0cselect \u548c poll \u90fd\u5df2\u7ecf\u8fc7\u65f6\u4e86\uff0c\u5176\u5b9e\u5b83\u4eec\u90fd\u6709\u5404\u81ea\u7684\u4f7f\u7528\u573a\u666f\u3002","title":"\u5e94\u7528\u573a\u666f"},{"location":"bbb/Socket/#1-select","text":"select \u7684 timeout \u53c2\u6570\u7cbe\u5ea6\u4e3a\u5fae\u79d2\uff0c\u800c poll \u548c epoll \u4e3a\u6beb\u79d2\uff0c\u56e0\u6b64 select \u66f4\u52a0\u9002\u7528\u4e8e\u5b9e\u65f6\u6027\u8981\u6c42\u6bd4\u8f83\u9ad8\u7684\u573a\u666f\uff0c\u6bd4\u5982\u6838\u53cd\u5e94\u5806\u7684\u63a7\u5236\u3002 select \u53ef\u79fb\u690d\u6027\u66f4\u597d\uff0c\u51e0\u4e4e\u88ab\u6240\u6709\u4e3b\u6d41\u5e73\u53f0\u6240\u652f\u6301\u3002","title":"1. select \u5e94\u7528\u573a\u666f"},{"location":"bbb/Socket/#2-poll","text":"poll \u6ca1\u6709\u6700\u5927\u63cf\u8ff0\u7b26\u6570\u91cf\u7684\u9650\u5236\uff0c\u5982\u679c\u5e73\u53f0\u652f\u6301\u5e76\u4e14\u5bf9\u5b9e\u65f6\u6027\u8981\u6c42\u4e0d\u9ad8\uff0c\u5e94\u8be5\u4f7f\u7528 poll \u800c\u4e0d\u662f select\u3002","title":"2. poll \u5e94\u7528\u573a\u666f"},{"location":"bbb/Socket/#3-epoll","text":"\u53ea\u9700\u8981\u8fd0\u884c\u5728 Linux \u5e73\u53f0\u4e0a\uff0c\u6709\u5927\u91cf\u7684\u63cf\u8ff0\u7b26\u9700\u8981\u540c\u65f6\u8f6e\u8be2\uff0c\u5e76\u4e14\u8fd9\u4e9b\u8fde\u63a5\u6700\u597d\u662f\u957f\u8fde\u63a5\u3002 \u9700\u8981\u540c\u65f6\u76d1\u63a7\u5c0f\u4e8e 1000 \u4e2a\u63cf\u8ff0\u7b26\uff0c\u5c31\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 epoll\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e94\u7528\u573a\u666f\u4e0b\u5e76\u4e0d\u80fd\u4f53\u73b0 epoll \u7684\u4f18\u52bf\u3002 \u9700\u8981\u76d1\u63a7\u7684\u63cf\u8ff0\u7b26\u72b6\u6001\u53d8\u5316\u591a\uff0c\u800c\u4e14\u90fd\u662f\u975e\u5e38\u77ed\u6682\u7684\uff0c\u4e5f\u6ca1\u6709\u5fc5\u8981\u4f7f\u7528 epoll\u3002\u56e0\u4e3a epoll \u4e2d\u7684\u6240\u6709\u63cf\u8ff0\u7b26\u90fd\u5b58\u50a8\u5728\u5185\u6838\u4e2d\uff0c\u9020\u6210\u6bcf\u6b21\u9700\u8981\u5bf9\u63cf\u8ff0\u7b26\u7684\u72b6\u6001\u6539\u53d8\u90fd\u9700\u8981\u901a\u8fc7 epoll_ctl() \u8fdb\u884c\u7cfb\u7edf\u8c03\u7528\uff0c\u9891\u7e41\u7cfb\u7edf\u8c03\u7528\u964d\u4f4e\u6548\u7387\u3002\u5e76\u4e14 epoll \u7684\u63cf\u8ff0\u7b26\u5b58\u50a8\u5728\u5185\u6838\uff0c\u4e0d\u5bb9\u6613\u8c03\u8bd5\u3002","title":"3. epoll \u5e94\u7528\u573a\u666f"},{"location":"bbb/Socket/#_4","text":"Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004. http://man7.org/linux/man-pages/man2/select.2.html http://man7.org/linux/man-pages/man2/poll.2.html Boost application performance using asynchronous I/O Synchronous and Asynchronous I/O Linux IO \u6a21\u5f0f\u53ca select\u3001poll\u3001epoll \u8be6\u89e3 poll vs select vs event-based select / poll / epoll: practical difference for system architects Browse the source code of userspace/glibc/sysdeps/unix/sysv/linux/ online","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/b1/","text":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf - \u8fdb\u7a0b\u7ba1\u7406 \u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf - \u8fdb\u7a0b\u7ba1\u7406 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b 1. \u8fdb\u7a0b 2. \u7ebf\u7a0b 3. \u533a\u522b \u8fdb\u7a0b\u72b6\u6001\u7684\u5207\u6362 \u8fdb\u7a0b\u8c03\u5ea6\u7b97\u6cd5 1. \u6279\u5904\u7406\u7cfb\u7edf 2. \u4ea4\u4e92\u5f0f\u7cfb\u7edf 3. \u5b9e\u65f6\u7cfb\u7edf \u8fdb\u7a0b\u540c\u6b65 1. \u4e34\u754c\u533a 2. \u540c\u6b65\u4e0e\u4e92\u65a5 3. \u4fe1\u53f7\u91cf 4. \u7ba1\u7a0b \u7ecf\u5178\u540c\u6b65\u95ee\u9898 1. \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898 2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898 \u8fdb\u7a0b\u901a\u4fe1 1. \u7ba1\u9053 2. FIFO 3. \u6d88\u606f\u961f\u5217 4. \u4fe1\u53f7\u91cf 5. \u5171\u4eab\u5b58\u50a8 6. \u5957\u63a5\u5b57 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b 1. \u8fdb\u7a0b \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u8fdb\u7a0b\u63a7\u5236\u5757 (Process Control Block, PCB) \u63cf\u8ff0\u8fdb\u7a0b\u7684\u57fa\u672c\u4fe1\u606f\u548c\u8fd0\u884c\u72b6\u6001\uff0c\u6240\u8c13\u7684\u521b\u5efa\u8fdb\u7a0b\u548c\u64a4\u9500\u8fdb\u7a0b\uff0c\u90fd\u662f\u6307\u5bf9 PCB \u7684\u64cd\u4f5c\u3002 \u4e0b\u56fe\u663e\u793a\u4e86 4 \u4e2a\u7a0b\u5e8f\u521b\u5efa\u4e86 4 \u4e2a\u8fdb\u7a0b\uff0c\u8fd9 4 \u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5e76\u53d1\u5730\u6267\u884c\u3002 2. \u7ebf\u7a0b \u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5b83\u4eec\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u3002 QQ \u548c\u6d4f\u89c8\u5668\u662f\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u6d4f\u89c8\u5668\u8fdb\u7a0b\u91cc\u9762\u6709\u5f88\u591a\u7ebf\u7a0b\uff0c\u4f8b\u5982 HTTP \u8bf7\u6c42\u7ebf\u7a0b\u3001\u4e8b\u4ef6\u54cd\u5e94\u7ebf\u7a0b\u3001\u6e32\u67d3\u7ebf\u7a0b\u7b49\u7b49\uff0c\u7ebf\u7a0b\u7684\u5e76\u53d1\u6267\u884c\u4f7f\u5f97\u5728\u6d4f\u89c8\u5668\u4e2d\u70b9\u51fb\u4e00\u4e2a\u65b0\u94fe\u63a5\u4ece\u800c\u53d1\u8d77 HTTP \u8bf7\u6c42\u65f6\uff0c\u6d4f\u89c8\u5668\u8fd8\u53ef\u4ee5\u54cd\u5e94\u7528\u6237\u7684\u5176\u5b83\u4e8b\u4ef6\u3002 3. \u533a\u522b \u2160 \u62e5\u6709\u8d44\u6e90 \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4f46\u662f\u7ebf\u7a0b\u4e0d\u62e5\u6709\u8d44\u6e90\uff0c\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u96b6\u5c5e\u8fdb\u7a0b\u7684\u8d44\u6e90\u3002 \u2161 \u8c03\u5ea6 \u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\uff0c\u7ebf\u7a0b\u7684\u5207\u6362\u4e0d\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\uff0c\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u7ebf\u7a0b\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\u3002 \u2162 \u7cfb\u7edf\u5f00\u9500 \u7531\u4e8e\u521b\u5efa\u6216\u64a4\u9500\u8fdb\u7a0b\u65f6\uff0c\u7cfb\u7edf\u90fd\u8981\u4e3a\u4e4b\u5206\u914d\u6216\u56de\u6536\u8d44\u6e90\uff0c\u5982\u5185\u5b58\u7a7a\u95f4\u3001I/O \u8bbe\u5907\u7b49\uff0c\u6240\u4ed8\u51fa\u7684\u5f00\u9500\u8fdc\u5927\u4e8e\u521b\u5efa\u6216\u64a4\u9500\u7ebf\u7a0b\u65f6\u7684\u5f00\u9500\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\u65f6\uff0c\u6d89\u53ca\u5f53\u524d\u6267\u884c\u8fdb\u7a0b CPU \u73af\u5883\u7684\u4fdd\u5b58\u53ca\u65b0\u8c03\u5ea6\u8fdb\u7a0b CPU \u73af\u5883\u7684\u8bbe\u7f6e\uff0c\u800c\u7ebf\u7a0b\u5207\u6362\u65f6\u53ea\u9700\u4fdd\u5b58\u548c\u8bbe\u7f6e\u5c11\u91cf\u5bc4\u5b58\u5668\u5185\u5bb9\uff0c\u5f00\u9500\u5f88\u5c0f\u3002 \u2163 \u901a\u4fe1\u65b9\u9762 \u7ebf\u7a0b\u95f4\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8bfb\u5199\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u901a\u4fe1\uff0c\u4f46\u662f\u8fdb\u7a0b\u901a\u4fe1\u9700\u8981\u501f\u52a9 IPC\u3002 \u8fdb\u7a0b\u72b6\u6001\u7684\u5207\u6362 \u5c31\u7eea\u72b6\u6001\uff08ready\uff09\uff1a\u7b49\u5f85\u88ab\u8c03\u5ea6 \u8fd0\u884c\u72b6\u6001\uff08running\uff09 \u963b\u585e\u72b6\u6001\uff08waiting\uff09\uff1a\u7b49\u5f85\u8d44\u6e90 \u5e94\u8be5\u6ce8\u610f\u4ee5\u4e0b\u5185\u5bb9\uff1a \u53ea\u6709\u5c31\u7eea\u6001\u548c\u8fd0\u884c\u6001\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u5176\u5b83\u7684\u90fd\u662f\u5355\u5411\u8f6c\u6362\u3002\u5c31\u7eea\u72b6\u6001\u7684\u8fdb\u7a0b\u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u4ece\u800c\u83b7\u5f97 CPU \u65f6\u95f4\uff0c\u8f6c\u4e3a\u8fd0\u884c\u72b6\u6001\uff1b\u800c\u8fd0\u884c\u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u5728\u5206\u914d\u7ed9\u5b83\u7684 CPU \u65f6\u95f4\u7247\u7528\u5b8c\u4e4b\u540e\u5c31\u4f1a\u8f6c\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u5ea6\u3002 \u963b\u585e\u72b6\u6001\u662f\u7f3a\u5c11\u9700\u8981\u7684\u8d44\u6e90\u4ece\u800c\u7531\u8fd0\u884c\u72b6\u6001\u8f6c\u6362\u800c\u6765\uff0c\u4f46\u662f\u8be5\u8d44\u6e90\u4e0d\u5305\u62ec CPU \u65f6\u95f4\uff0c\u7f3a\u5c11 CPU \u65f6\u95f4\u4f1a\u4ece\u8fd0\u884c\u6001\u8f6c\u6362\u4e3a\u5c31\u7eea\u6001\u3002 \u8fdb\u7a0b\u8c03\u5ea6\u7b97\u6cd5 \u4e0d\u540c\u73af\u5883\u7684\u8c03\u5ea6\u7b97\u6cd5\u76ee\u6807\u4e0d\u540c\uff0c\u56e0\u6b64\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u73af\u5883\u6765\u8ba8\u8bba\u8c03\u5ea6\u7b97\u6cd5\u3002 1. \u6279\u5904\u7406\u7cfb\u7edf \u6279\u5904\u7406\u7cfb\u7edf\u6ca1\u6709\u592a\u591a\u7684\u7528\u6237\u64cd\u4f5c\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u8c03\u5ea6\u7b97\u6cd5\u76ee\u6807\u662f\u4fdd\u8bc1\u541e\u5410\u91cf\u548c\u5468\u8f6c\u65f6\u95f4\uff08\u4ece\u63d0\u4ea4\u5230\u7ec8\u6b62\u7684\u65f6\u95f4\uff09\u3002 1.1 \u5148\u6765\u5148\u670d\u52a1 first-come first-serverd\uff08FCFS\uff09 \u975e\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u6309\u7167\u8bf7\u6c42\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u6709\u5229\u4e8e\u957f\u4f5c\u4e1a\uff0c\u4f46\u4e0d\u5229\u4e8e\u77ed\u4f5c\u4e1a\uff0c\u56e0\u4e3a\u77ed\u4f5c\u4e1a\u5fc5\u987b\u4e00\u76f4\u7b49\u5f85\u524d\u9762\u7684\u957f\u4f5c\u4e1a\u6267\u884c\u5b8c\u6bd5\u624d\u80fd\u6267\u884c\uff0c\u800c\u957f\u4f5c\u4e1a\u53c8\u9700\u8981\u6267\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u9020\u6210\u4e86\u77ed\u4f5c\u4e1a\u7b49\u5f85\u65f6\u95f4\u8fc7\u957f\u3002 1.2 \u77ed\u4f5c\u4e1a\u4f18\u5148 shortest job first\uff08SJF\uff09 \u975e\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u6309\u4f30\u8ba1\u8fd0\u884c\u65f6\u95f4\u6700\u77ed\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u957f\u4f5c\u4e1a\u6709\u53ef\u80fd\u4f1a\u997f\u6b7b\uff0c\u5904\u4e8e\u4e00\u76f4\u7b49\u5f85\u77ed\u4f5c\u4e1a\u6267\u884c\u5b8c\u6bd5\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u4e00\u76f4\u6709\u77ed\u4f5c\u4e1a\u5230\u6765\uff0c\u90a3\u4e48\u957f\u4f5c\u4e1a\u6c38\u8fdc\u5f97\u4e0d\u5230\u8c03\u5ea6\u3002 1.3 \u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 shortest remaining time next\uff08SRTN\uff09 \u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u7684\u62a2\u5360\u5f0f\u7248\u672c\uff0c\u6309\u5269\u4f59\u8fd0\u884c\u65f6\u95f4\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u5f53\u4e00\u4e2a\u65b0\u7684\u4f5c\u4e1a\u5230\u8fbe\u65f6\uff0c\u5176\u6574\u4e2a\u8fd0\u884c\u65f6\u95f4\u4e0e\u5f53\u524d\u8fdb\u7a0b\u7684\u5269\u4f59\u65f6\u95f4\u4f5c\u6bd4\u8f83\u3002\u5982\u679c\u65b0\u7684\u8fdb\u7a0b\u9700\u8981\u7684\u65f6\u95f4\u66f4\u5c11\uff0c\u5219\u6302\u8d77\u5f53\u524d\u8fdb\u7a0b\uff0c\u8fd0\u884c\u65b0\u7684\u8fdb\u7a0b\u3002\u5426\u5219\u65b0\u7684\u8fdb\u7a0b\u7b49\u5f85\u3002 2. \u4ea4\u4e92\u5f0f\u7cfb\u7edf \u4ea4\u4e92\u5f0f\u7cfb\u7edf\u6709\u5927\u91cf\u7684\u7528\u6237\u4ea4\u4e92\u64cd\u4f5c\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\u8c03\u5ea6\u7b97\u6cd5\u7684\u76ee\u6807\u662f\u5feb\u901f\u5730\u8fdb\u884c\u54cd\u5e94\u3002 2.1 \u65f6\u95f4\u7247\u8f6e\u8f6c \u5c06\u6240\u6709\u5c31\u7eea\u8fdb\u7a0b\u6309 FCFS \u7684\u539f\u5219\u6392\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6bcf\u6b21\u8c03\u5ea6\u65f6\uff0c\u628a CPU \u65f6\u95f4\u5206\u914d\u7ed9\u961f\u9996\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u65f6\u95f4\u7247\u3002\u5f53\u65f6\u95f4\u7247\u7528\u5b8c\u65f6\uff0c\u7531\u8ba1\u65f6\u5668\u53d1\u51fa\u65f6\u949f\u4e2d\u65ad\uff0c\u8c03\u5ea6\u7a0b\u5e8f\u4fbf\u505c\u6b62\u8be5\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u5e76\u5c06\u5b83\u9001\u5f80\u5c31\u7eea\u961f\u5217\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u7ee7\u7eed\u628a CPU \u65f6\u95f4\u5206\u914d\u7ed9\u961f\u9996\u7684\u8fdb\u7a0b\u3002 \u65f6\u95f4\u7247\u8f6e\u8f6c\u7b97\u6cd5\u7684\u6548\u7387\u548c\u65f6\u95f4\u7247\u7684\u5927\u5c0f\u6709\u5f88\u5927\u5173\u7cfb\uff1a \u56e0\u4e3a\u8fdb\u7a0b\u5207\u6362\u90fd\u8981\u4fdd\u5b58\u8fdb\u7a0b\u7684\u4fe1\u606f\u5e76\u4e14\u8f7d\u5165\u65b0\u8fdb\u7a0b\u7684\u4fe1\u606f\uff0c\u5982\u679c\u65f6\u95f4\u7247\u592a\u5c0f\uff0c\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u5207\u6362\u5f97\u592a\u9891\u7e41\uff0c\u5728\u8fdb\u7a0b\u5207\u6362\u4e0a\u5c31\u4f1a\u82b1\u8fc7\u591a\u65f6\u95f4\u3002 \u800c\u5982\u679c\u65f6\u95f4\u7247\u8fc7\u957f\uff0c\u90a3\u4e48\u5b9e\u65f6\u6027\u5c31\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\u3002 2.2 \u4f18\u5148\u7ea7\u8c03\u5ea6 \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u6309\u4f18\u5148\u7ea7\u8fdb\u884c\u8c03\u5ea6\u3002 \u4e3a\u4e86\u9632\u6b62\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u6c38\u8fdc\u7b49\u4e0d\u5230\u8c03\u5ea6\uff0c\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u589e\u52a0\u7b49\u5f85\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u3002 2.3 \u591a\u7ea7\u53cd\u9988\u961f\u5217 \u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c 100 \u4e2a\u65f6\u95f4\u7247\uff0c\u5982\u679c\u91c7\u7528\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5\uff0c\u90a3\u4e48\u9700\u8981\u4ea4\u6362 100 \u6b21\u3002 \u591a\u7ea7\u961f\u5217\u662f\u4e3a\u8fd9\u79cd\u9700\u8981\u8fde\u7eed\u6267\u884c\u591a\u4e2a\u65f6\u95f4\u7247\u7684\u8fdb\u7a0b\u8003\u8651\uff0c\u5b83\u8bbe\u7f6e\u4e86\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u65f6\u95f4\u7247\u5927\u5c0f\u90fd\u4e0d\u540c\uff0c\u4f8b\u5982 1,2,4,8,..\u3002\u8fdb\u7a0b\u5728\u7b2c\u4e00\u4e2a\u961f\u5217\u6ca1\u6267\u884c\u5b8c\uff0c\u5c31\u4f1a\u88ab\u79fb\u5230\u4e0b\u4e00\u4e2a\u961f\u5217\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4e4b\u524d\u7684\u8fdb\u7a0b\u53ea\u9700\u8981\u4ea4\u6362 7 \u6b21\u3002 \u6bcf\u4e2a\u961f\u5217\u4f18\u5148\u6743\u4e5f\u4e0d\u540c\uff0c\u6700\u4e0a\u9762\u7684\u4f18\u5148\u6743\u6700\u9ad8\u3002\u56e0\u6b64\u53ea\u6709\u4e0a\u4e00\u4e2a\u961f\u5217\u6ca1\u6709\u8fdb\u7a0b\u5728\u6392\u961f\uff0c\u624d\u80fd\u8c03\u5ea6\u5f53\u524d\u961f\u5217\u4e0a\u7684\u8fdb\u7a0b\u3002 \u53ef\u4ee5\u5c06\u8fd9\u79cd\u8c03\u5ea6\u7b97\u6cd5\u770b\u6210\u662f\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5\u548c\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u7684\u7ed3\u5408\u3002 3. \u5b9e\u65f6\u7cfb\u7edf \u5b9e\u65f6\u7cfb\u7edf\u8981\u6c42\u4e00\u4e2a\u8bf7\u6c42\u5728\u4e00\u4e2a\u786e\u5b9a\u65f6\u95f4\u5185\u5f97\u5230\u54cd\u5e94\u3002 \u5206\u4e3a\u786c\u5b9e\u65f6\u548c\u8f6f\u5b9e\u65f6\uff0c\u524d\u8005\u5fc5\u987b\u6ee1\u8db3\u7edd\u5bf9\u7684\u622a\u6b62\u65f6\u95f4\uff0c\u540e\u8005\u53ef\u4ee5\u5bb9\u5fcd\u4e00\u5b9a\u7684\u8d85\u65f6\u3002 \u8fdb\u7a0b\u540c\u6b65 1. \u4e34\u754c\u533a \u5bf9\u4e34\u754c\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u79f0\u4e3a\u4e34\u754c\u533a\u3002 \u4e3a\u4e86\u4e92\u65a5\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u4e4b\u524d\uff0c\u9700\u8981\u5148\u8fdb\u884c\u68c0\u67e5\u3002 // entry section // critical section; // exit section 2. \u540c\u6b65\u4e0e\u4e92\u65a5 \u540c\u6b65\uff1a\u591a\u4e2a\u8fdb\u7a0b\u56e0\u4e3a\u5408\u4f5c\u4ea7\u751f\u7684\u76f4\u63a5\u5236\u7ea6\u5173\u7cfb\uff0c\u4f7f\u5f97\u8fdb\u7a0b\u6709\u4e00\u5b9a\u7684\u5148\u540e\u6267\u884c\u5173\u7cfb\u3002 \u4e92\u65a5\uff1a\u591a\u4e2a\u8fdb\u7a0b\u5728\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u8fdb\u5165\u4e34\u754c\u533a\u3002 3. \u4fe1\u53f7\u91cf \u4fe1\u53f7\u91cf\uff08Semaphore\uff09\u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u53ef\u4ee5\u5bf9\u5176\u6267\u884c down \u548c up \u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5e38\u89c1\u7684 P \u548c V \u64cd\u4f5c\u3002 down : \u5982\u679c\u4fe1\u53f7\u91cf\u5927\u4e8e 0 \uff0c\u6267\u884c -1 \u64cd\u4f5c\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u7b49\u4e8e 0\uff0c\u8fdb\u7a0b\u7761\u7720\uff0c\u7b49\u5f85\u4fe1\u53f7\u91cf\u5927\u4e8e 0\uff1b up \uff1a\u5bf9\u4fe1\u53f7\u91cf\u6267\u884c +1 \u64cd\u4f5c\uff0c\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u8ba9\u5176\u5b8c\u6210 down \u64cd\u4f5c\u3002 down \u548c up \u64cd\u4f5c\u9700\u8981\u88ab\u8bbe\u8ba1\u6210\u539f\u8bed\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5728\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\u5c4f\u853d\u4e2d\u65ad\u3002 \u5982\u679c\u4fe1\u53f7\u91cf\u7684\u53d6\u503c\u53ea\u80fd\u4e3a 0 \u6216\u8005 1\uff0c\u90a3\u4e48\u5c31\u6210\u4e3a\u4e86 \u4e92\u65a5\u91cf\uff08Mutex\uff09 \uff0c0 \u8868\u793a\u4e34\u754c\u533a\u5df2\u7ecf\u52a0\u9501\uff0c1 \u8868\u793a\u4e34\u754c\u533a\u89e3\u9501\u3002 typedef int semaphore; semaphore mutex = 1; void P1() { down(&mutex); // \u4e34\u754c\u533a up(&mutex); } void P2() { down(&mutex); // \u4e34\u754c\u533a up(&mutex); } \\<font size=3> \u4f7f\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898 \\</font> \\</br> \u95ee\u9898\u63cf\u8ff0\uff1a\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u7269\u54c1\uff0c\u53ea\u6709\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\uff0c\u751f\u4ea7\u8005\u624d\u53ef\u4ee5\u653e\u5165\u7269\u54c1\uff1b\u53ea\u6709\u7f13\u51b2\u533a\u4e0d\u4e3a\u7a7a\uff0c\u6d88\u8d39\u8005\u624d\u53ef\u4ee5\u62ff\u8d70\u7269\u54c1\u3002 \u56e0\u4e3a\u7f13\u51b2\u533a\u5c5e\u4e8e\u4e34\u754c\u8d44\u6e90\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4e92\u65a5\u91cf mutex \u6765\u63a7\u5236\u5bf9\u7f13\u51b2\u533a\u7684\u4e92\u65a5\u8bbf\u95ee\u3002 \u4e3a\u4e86\u540c\u6b65\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u884c\u4e3a\uff0c\u9700\u8981\u8bb0\u5f55\u7f13\u51b2\u533a\u4e2d\u7269\u54c1\u7684\u6570\u91cf\u3002\u6570\u91cf\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6765\u8fdb\u884c\u7edf\u8ba1\uff0c\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u4fe1\u53f7\u91cf\uff1aempty \u8bb0\u5f55\u7a7a\u7f13\u51b2\u533a\u7684\u6570\u91cf\uff0cfull \u8bb0\u5f55\u6ee1\u7f13\u51b2\u533a\u7684\u6570\u91cf\u3002\u5176\u4e2d\uff0cempty \u4fe1\u53f7\u91cf\u662f\u5728\u751f\u4ea7\u8005\u8fdb\u7a0b\u4e2d\u4f7f\u7528\uff0c\u5f53 empty \u4e0d\u4e3a 0 \u65f6\uff0c\u751f\u4ea7\u8005\u624d\u53ef\u4ee5\u653e\u5165\u7269\u54c1\uff1bfull \u4fe1\u53f7\u91cf\u662f\u5728\u6d88\u8d39\u8005\u8fdb\u7a0b\u4e2d\u4f7f\u7528\uff0c\u5f53 full \u4fe1\u53f7\u91cf\u4e0d\u4e3a 0 \u65f6\uff0c\u6d88\u8d39\u8005\u624d\u53ef\u4ee5\u53d6\u8d70\u7269\u54c1\u3002 \u6ce8\u610f\uff0c\u4e0d\u80fd\u5148\u5bf9\u7f13\u51b2\u533a\u8fdb\u884c\u52a0\u9501\uff0c\u518d\u6d4b\u8bd5\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u80fd\u5148\u6267\u884c down(mutex) \u518d\u6267\u884c down(empty)\u3002\u5982\u679c\u8fd9\u4e48\u505a\u4e86\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1a\u751f\u4ea7\u8005\u5bf9\u7f13\u51b2\u533a\u52a0\u9501\u540e\uff0c\u6267\u884c down(empty) \u64cd\u4f5c\uff0c\u53d1\u73b0 empty = 0\uff0c\u6b64\u65f6\u751f\u4ea7\u8005\u7761\u7720\u3002\u6d88\u8d39\u8005\u4e0d\u80fd\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u56e0\u4e3a\u751f\u4ea7\u8005\u5bf9\u7f13\u51b2\u533a\u52a0\u9501\u4e86\uff0c\u6d88\u8d39\u8005\u5c31\u65e0\u6cd5\u6267\u884c up(empty) \u64cd\u4f5c\uff0cempty \u6c38\u8fdc\u90fd\u4e3a 0\uff0c\u5bfc\u81f4\u751f\u4ea7\u8005\u6c38\u8fdc\u7b49\u5f85\u4e0b\uff0c\u4e0d\u4f1a\u91ca\u653e\u9501\uff0c\u6d88\u8d39\u8005\u56e0\u6b64\u4e5f\u4f1a\u6c38\u8fdc\u7b49\u5f85\u4e0b\u53bb\u3002 #define N 100 typedef int semaphore; semaphore mutex = 1; semaphore empty = N; semaphore full = 0; void producer() { while(TRUE) { int item = produce_item(); down(&empty); down(&mutex); insert_item(item); up(&mutex); up(&full); } } void consumer() { while(TRUE) { down(&full); down(&mutex); int item = remove_item(); consume_item(item); up(&mutex); up(&empty); } } 4. \u7ba1\u7a0b \u4f7f\u7528\u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u95ee\u9898\u9700\u8981\u5ba2\u6237\u7aef\u4ee3\u7801\u505a\u5f88\u591a\u63a7\u5236\uff0c\u800c\u7ba1\u7a0b\u628a\u63a7\u5236\u7684\u4ee3\u7801\u72ec\u7acb\u51fa\u6765\uff0c\u4e0d\u4ec5\u4e0d\u5bb9\u6613\u51fa\u9519\uff0c\u4e5f\u4f7f\u5f97\u5ba2\u6237\u7aef\u4ee3\u7801\u8c03\u7528\u66f4\u5bb9\u6613\u3002 c \u8bed\u8a00\u4e0d\u652f\u6301\u7ba1\u7a0b\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4f7f\u7528\u4e86\u7c7b Pascal \u8bed\u8a00\u6765\u63cf\u8ff0\u7ba1\u7a0b\u3002\u793a\u4f8b\u4ee3\u7801\u7684\u7ba1\u7a0b\u63d0\u4f9b\u4e86 insert() \u548c remove() \u65b9\u6cd5\uff0c\u5ba2\u6237\u7aef\u4ee3\u7801\u901a\u8fc7\u8c03\u7528\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u89e3\u51b3\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\u3002 monitor ProducerConsumer integer i; condition c; procedure insert(); begin // ... end; procedure remove(); begin // ... end; end monitor; \u7ba1\u7a0b\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u6027\uff1a\u5728\u4e00\u4e2a\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u7ba1\u7a0b\u3002\u8fdb\u7a0b\u5728\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u4e00\u76f4\u5360\u7528\u7ba1\u7a0b\uff0c\u5426\u5219\u5176\u5b83\u8fdb\u7a0b\u6c38\u8fdc\u4e0d\u80fd\u4f7f\u7528\u7ba1\u7a0b\u3002 \u7ba1\u7a0b\u5f15\u5165\u4e86 \u6761\u4ef6\u53d8\u91cf \u4ee5\u53ca\u76f8\u5173\u7684\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u5b9e\u73b0\u540c\u6b65\u64cd\u4f5c\u3002\u5bf9\u6761\u4ef6\u53d8\u91cf\u6267\u884c wait() \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8c03\u7528\u8fdb\u7a0b\u963b\u585e\uff0c\u628a\u7ba1\u7a0b\u8ba9\u51fa\u6765\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u3002signal() \u64cd\u4f5c\u7528\u4e8e\u5524\u9192\u88ab\u963b\u585e\u7684\u8fdb\u7a0b\u3002 \u4f7f\u7528\u7ba1\u7a0b\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898 // \u7ba1\u7a0b monitor ProducerConsumer condition full, empty; integer count := 0; condition c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 then signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N -1 then signal(full); end; end monitor; // \u751f\u4ea7\u8005\u5ba2\u6237\u7aef procedure producer begin while true do begin item = produce_item; ProducerConsumer.insert(item); end end; // \u6d88\u8d39\u8005\u5ba2\u6237\u7aef procedure consumer begin while true do begin item = ProducerConsumer.remove; consume_item(item); end end; \u7ecf\u5178\u540c\u6b65\u95ee\u9898 \u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u95ee\u9898\u524d\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002 1. \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898 \u4e94\u4e2a\u54f2\u5b66\u5bb6\u56f4\u7740\u4e00\u5f20\u5706\u684c\uff0c\u6bcf\u4e2a\u54f2\u5b66\u5bb6\u9762\u524d\u653e\u7740\u98df\u7269\u3002\u54f2\u5b66\u5bb6\u7684\u751f\u6d3b\u6709\u4e24\u79cd\u4ea4\u66ff\u6d3b\u52a8\uff1a\u5403\u996d\u4ee5\u53ca\u601d\u8003\u3002\u5f53\u4e00\u4e2a\u54f2\u5b66\u5bb6\u5403\u996d\u65f6\uff0c\u9700\u8981\u5148\u62ff\u8d77\u81ea\u5df1\u5de6\u53f3\u4e24\u8fb9\u7684\u4e24\u6839\u7b77\u5b50\uff0c\u5e76\u4e14\u4e00\u6b21\u53ea\u80fd\u62ff\u8d77\u4e00\u6839\u7b77\u5b50\u3002 \u4e0b\u9762\u662f\u4e00\u79cd\u9519\u8bef\u7684\u89e3\u6cd5\uff0c\u5982\u679c\u6240\u6709\u54f2\u5b66\u5bb6\u540c\u65f6\u62ff\u8d77\u5de6\u624b\u8fb9\u7684\u7b77\u5b50\uff0c\u90a3\u4e48\u6240\u6709\u54f2\u5b66\u5bb6\u90fd\u5728\u7b49\u5f85\u5176\u5b83\u54f2\u5b66\u5bb6\u5403\u5b8c\u5e76\u91ca\u653e\u81ea\u5df1\u624b\u4e2d\u7684\u7b77\u5b50\uff0c\u5bfc\u81f4\u6b7b\u9501\u3002 #define N 5 void philosopher(int i) { while(TRUE) { think(); take(i); // \u62ff\u8d77\u5de6\u8fb9\u7684\u7b77\u5b50 take((i+1)%N); // \u62ff\u8d77\u53f3\u8fb9\u7684\u7b77\u5b50 eat(); put(i); put((i+1)%N); } } \u4e3a\u4e86\u9632\u6b62\u6b7b\u9501\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e24\u4e2a\u6761\u4ef6\uff1a \u5fc5\u987b\u540c\u65f6\u62ff\u8d77\u5de6\u53f3\u4e24\u6839\u7b77\u5b50\uff1b \u53ea\u6709\u5728\u4e24\u4e2a\u90bb\u5c45\u90fd\u6ca1\u6709\u8fdb\u9910\u7684\u60c5\u51b5\u4e0b\u624d\u5141\u8bb8\u8fdb\u9910\u3002 #define N 5 #define LEFT (i + N - 1) % N // \u5de6\u90bb\u5c45 #define RIGHT (i + 1) % N // \u53f3\u90bb\u5c45 #define THINKING 0 #define HUNGRY 1 #define EATING 2 typedef int semaphore; int state[N]; // \u8ddf\u8e2a\u6bcf\u4e2a\u54f2\u5b66\u5bb6\u7684\u72b6\u6001 semaphore mutex = 1; // \u4e34\u754c\u533a\u7684\u4e92\u65a5\uff0c\u4e34\u754c\u533a\u662f state \u6570\u7ec4\uff0c\u5bf9\u5176\u4fee\u6539\u9700\u8981\u4e92\u65a5 semaphore s[N]; // \u6bcf\u4e2a\u54f2\u5b66\u5bb6\u4e00\u4e2a\u4fe1\u53f7\u91cf void philosopher(int i) { while(TRUE) { think(i); take_two(i); eat(i); put_two(i); } } void take_two(int i) { down(&mutex); state[i] = HUNGRY; check(i); up(&mutex); down(&s[i]); // \u53ea\u6709\u6536\u5230\u901a\u77e5\u4e4b\u540e\u624d\u53ef\u4ee5\u5f00\u59cb\u5403\uff0c\u5426\u5219\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb } void put_two(i) { down(&mutex); state[i] = THINKING; check(LEFT); // \u5c1d\u8bd5\u901a\u77e5\u5de6\u53f3\u90bb\u5c45\uff0c\u81ea\u5df1\u5403\u5b8c\u4e86\uff0c\u4f60\u4eec\u53ef\u4ee5\u5f00\u59cb\u5403\u4e86 check(RIGHT); up(&mutex); } void eat(int i) { down(&mutex); state[i] = EATING; up(&mutex); } // \u68c0\u67e5\u4e24\u4e2a\u90bb\u5c45\u662f\u5426\u90fd\u6ca1\u6709\u7528\u9910\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31 up(&s[i])\uff0c\u4f7f\u5f97 down(&s[i]) \u80fd\u591f\u5f97\u5230\u901a\u77e5\u5e76\u7ee7\u7eed\u6267\u884c void check(i) { if(state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] !=EATING) { state[i] = EATING; up(&s[i]); } } 2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898 \u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u5bf9\u6570\u636e\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u8bfb\u548c\u5199\u4ee5\u53ca\u5199\u548c\u5199\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\u3002 \u4e00\u4e2a\u6574\u578b\u53d8\u91cf count \u8bb0\u5f55\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u8bfb\u64cd\u4f5c\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u4e00\u4e2a\u4e92\u65a5\u91cf count_mutex \u7528\u4e8e\u5bf9 count \u52a0\u9501\uff0c\u4e00\u4e2a\u4e92\u65a5\u91cf data_mutex \u7528\u4e8e\u5bf9\u8bfb\u5199\u7684\u6570\u636e\u52a0\u9501\u3002 typedef int semaphore; semaphore count_mutex = 1; semaphore data_mutex = 1; int count = 0; void reader() { while(TRUE) { down(&count_mutex); count++; if(count == 1) down(&data_mutex); // \u7b2c\u4e00\u4e2a\u8bfb\u8005\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\uff0c\u9632\u6b62\u5199\u8fdb\u7a0b\u8bbf\u95ee up(&count_mutex); read(); down(&count_mutex); count--; if(count == 0) up(&data_mutex); up(&count_mutex); } } void writer() { while(TRUE) { down(&data_mutex); write(); up(&data_mutex); } } \u4ee5\u4e0b\u5185\u5bb9\u7531 @Bandi Yugandhar \u63d0\u4f9b\u3002 The first case may result Writer to starve. This case favous Writers i.e no writer, once added to the queue, shall be kept waiting longer than absolutely necessary(only when there are readers that entered the queue before the writer). int readcount, writecount; //(initial value = 0) semaphore rmutex, wmutex, readLock, resource; //(initial value = 1) //READER void reader() { <ENTRY Section> down(&readLock); // reader is trying to enter down(&rmutex); // lock to increase readcount readcount++; if (readcount == 1) down(&resource); //if you are the first reader then lock the resource up(&rmutex); //release for other readers up(&readLock); //Done with trying to access the resource <CRITICAL Section> //reading is performed <EXIT Section> down(&rmutex); //reserve exit section - avoids race condition with readers readcount--; //indicate you're leaving if (readcount == 0) //checks if you are last reader leaving up(&resource); //if last, you must release the locked resource up(&rmutex); //release exit section for other readers } //WRITER void writer() { <ENTRY Section> down(&wmutex); //reserve entry section for writers - avoids race conditions writecount++; //report yourself as a writer entering if (writecount == 1) //checks if you're first writer down(&readLock); //if you're first, then you must lock the readers out. Prevent them from trying to enter CS up(&wmutex); //release entry section <CRITICAL Section> down(&resource); //reserve the resource for yourself - prevents other writers from simultaneously editing the shared resource //writing is performed up(&resource); //release file <EXIT Section> down(&wmutex); //reserve exit section writecount--; //indicate you're leaving if (writecount == 0) //checks if you're the last writer up(&readLock); //if you're last writer, you must unlock the readers. Allows them to try enter CS for reading up(&wmutex); //release exit section } We can observe that every reader is forced to acquire ReadLock. On the otherhand, writers doesn\u2019t need to lock individually. Once the first writer locks the ReadLock, it will be released only when there is no writer left in the queue. From the both cases we observed that either reader or writer has to starve. Below solutionadds the constraint that no thread shall be allowed to starve; that is, the operation of obtaining a lock on the shared data will always terminate in a bounded amount of time. int readCount; // init to 0; number of readers currently accessing resource // all semaphores initialised to 1 Semaphore resourceAccess; // controls access (read/write) to the resource Semaphore readCountAccess; // for syncing changes to shared variable readCount Semaphore serviceQueue; // FAIRNESS: preserves ordering of requests (signaling must be FIFO) void writer() { down(&serviceQueue); // wait in line to be servicexs // <ENTER> down(&resourceAccess); // request exclusive access to resource // </ENTER> up(&serviceQueue); // let next in line be serviced // <WRITE> writeResource(); // writing is performed // </WRITE> // <EXIT> up(&resourceAccess); // release resource access for next reader/writer // </EXIT> } void reader() { down(&serviceQueue); // wait in line to be serviced down(&readCountAccess); // request exclusive access to readCount // <ENTER> if (readCount == 0) // if there are no readers already reading: down(&resourceAccess); // request resource access for readers (writers blocked) readCount++; // update count of active readers // </ENTER> up(&serviceQueue); // let next in line be serviced up(&readCountAccess); // release access to readCount // <READ> readResource(); // reading is performed // </READ> down(&readCountAccess); // request exclusive access to readCount // <EXIT> readCount--; // update count of active readers if (readCount == 0) // if there are no readers left: up(&resourceAccess); // release resource access for all // </EXIT> up(&readCountAccess); // release access to readCount } \u8fdb\u7a0b\u901a\u4fe1 \u8fdb\u7a0b\u540c\u6b65\u4e0e\u8fdb\u7a0b\u901a\u4fe1\u5f88\u5bb9\u6613\u6df7\u6dc6\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5728\u4e8e\uff1a \u8fdb\u7a0b\u540c\u6b65\uff1a\u63a7\u5236\u591a\u4e2a\u8fdb\u7a0b\u6309\u4e00\u5b9a\u987a\u5e8f\u6267\u884c\uff1b \u8fdb\u7a0b\u901a\u4fe1\uff1a\u8fdb\u7a0b\u95f4\u4f20\u8f93\u4fe1\u606f\u3002 \u8fdb\u7a0b\u901a\u4fe1\u662f\u4e00\u79cd\u624b\u6bb5\uff0c\u800c\u8fdb\u7a0b\u540c\u6b65\u662f\u4e00\u79cd\u76ee\u7684\u3002\u4e5f\u53ef\u4ee5\u8bf4\uff0c\u4e3a\u4e86\u80fd\u591f\u8fbe\u5230\u8fdb\u7a0b\u540c\u6b65\u7684\u76ee\u7684\uff0c\u9700\u8981\u8ba9\u8fdb\u7a0b\u8fdb\u884c\u901a\u4fe1\uff0c\u4f20\u8f93\u4e00\u4e9b\u8fdb\u7a0b\u540c\u6b65\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002 1. \u7ba1\u9053 \u7ba1\u9053\u662f\u901a\u8fc7\u8c03\u7528 pipe \u51fd\u6570\u521b\u5efa\u7684\uff0cfd[0] \u7528\u4e8e\u8bfb\uff0cfd[1] \u7528\u4e8e\u5199\u3002 #include <unistd.h> int pipe(int fd[2]); \u5b83\u5177\u6709\u4ee5\u4e0b\u9650\u5236\uff1a \u53ea\u652f\u6301\u534a\u53cc\u5de5\u901a\u4fe1\uff08\u5355\u5411\u4ea4\u66ff\u4f20\u8f93\uff09\uff1b \u53ea\u80fd\u5728\u7236\u5b50\u8fdb\u7a0b\u6216\u8005\u5144\u5f1f\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u3002 2. FIFO \u4e5f\u79f0\u4e3a\u547d\u540d\u7ba1\u9053\uff0c\u53bb\u9664\u4e86\u7ba1\u9053\u53ea\u80fd\u5728\u7236\u5b50\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u7684\u9650\u5236\u3002 #include <sys/stat.h> int mkfifo(const char *path, mode_t mode); int mkfifoat(int fd, const char *path, mode_t mode); FIFO \u5e38\u7528\u4e8e\u5ba2\u6237-\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0cFIFO \u7528\u4f5c\u6c47\u805a\u70b9\uff0c\u5728\u5ba2\u6237\u8fdb\u7a0b\u548c\u670d\u52a1\u5668\u8fdb\u7a0b\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002 3. \u6d88\u606f\u961f\u5217 \u76f8\u6bd4\u4e8e FIFO\uff0c\u6d88\u606f\u961f\u5217\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u6d88\u606f\u961f\u5217\u53ef\u4ee5\u72ec\u7acb\u4e8e\u8bfb\u5199\u8fdb\u7a0b\u5b58\u5728\uff0c\u4ece\u800c\u907f\u514d\u4e86 FIFO \u4e2d\u540c\u6b65\u7ba1\u9053\u7684\u6253\u5f00\u548c\u5173\u95ed\u65f6\u53ef\u80fd\u4ea7\u751f\u7684\u56f0\u96be\uff1b \u907f\u514d\u4e86 FIFO \u7684\u540c\u6b65\u963b\u585e\u95ee\u9898\uff0c\u4e0d\u9700\u8981\u8fdb\u7a0b\u81ea\u5df1\u63d0\u4f9b\u540c\u6b65\u65b9\u6cd5\uff1b \u8bfb\u8fdb\u7a0b\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u7c7b\u578b\u6709\u9009\u62e9\u5730\u63a5\u6536\u6d88\u606f\uff0c\u800c\u4e0d\u50cf FIFO \u90a3\u6837\u53ea\u80fd\u9ed8\u8ba4\u5730\u63a5\u6536\u3002 4. \u4fe1\u53f7\u91cf \u5b83\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u7528\u4e8e\u4e3a\u591a\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u5bf9\u5171\u4eab\u6570\u636e\u5bf9\u8c61\u7684\u8bbf\u95ee\u3002 5. \u5171\u4eab\u5b58\u50a8 \u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b58\u50a8\u533a\u3002\u56e0\u4e3a\u6570\u636e\u4e0d\u9700\u8981\u5728\u8fdb\u7a0b\u4e4b\u95f4\u590d\u5236\uff0c\u6240\u4ee5\u8fd9\u662f\u6700\u5feb\u7684\u4e00\u79cd IPC\u3002 \u9700\u8981\u4f7f\u7528\u4fe1\u53f7\u91cf\u7528\u6765\u540c\u6b65\u5bf9\u5171\u4eab\u5b58\u50a8\u7684\u8bbf\u95ee\u3002 \u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u6587\u4ef6\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5730\u5740\u7a7a\u95f4\u4ece\u800c\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\u3002\u53e6\u5916 XSI \u5171\u4eab\u5185\u5b58\u4e0d\u662f\u4f7f\u7528\u6587\u4ef6\uff0c\u800c\u662f\u4f7f\u7528\u5185\u5b58\u7684\u533f\u540d\u6bb5\u3002 6. \u5957\u63a5\u5b57 \u4e0e\u5176\u5b83\u901a\u4fe1\u673a\u5236\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u53ef\u7528\u4e8e\u4e0d\u540c\u673a\u5668\u95f4\u7684\u8fdb\u7a0b\u901a\u4fe1\u3002","title":"\u6d4b\u8bd5.1.1"},{"location":"bbb/b1/#-","text":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf - \u8fdb\u7a0b\u7ba1\u7406 \u8fdb\u7a0b\u4e0e\u7ebf\u7a0b 1. \u8fdb\u7a0b 2. \u7ebf\u7a0b 3. \u533a\u522b \u8fdb\u7a0b\u72b6\u6001\u7684\u5207\u6362 \u8fdb\u7a0b\u8c03\u5ea6\u7b97\u6cd5 1. \u6279\u5904\u7406\u7cfb\u7edf 2. \u4ea4\u4e92\u5f0f\u7cfb\u7edf 3. \u5b9e\u65f6\u7cfb\u7edf \u8fdb\u7a0b\u540c\u6b65 1. \u4e34\u754c\u533a 2. \u540c\u6b65\u4e0e\u4e92\u65a5 3. \u4fe1\u53f7\u91cf 4. \u7ba1\u7a0b \u7ecf\u5178\u540c\u6b65\u95ee\u9898 1. \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898 2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898 \u8fdb\u7a0b\u901a\u4fe1 1. \u7ba1\u9053 2. FIFO 3. \u6d88\u606f\u961f\u5217 4. \u4fe1\u53f7\u91cf 5. \u5171\u4eab\u5b58\u50a8 6. \u5957\u63a5\u5b57","title":"\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf - \u8fdb\u7a0b\u7ba1\u7406"},{"location":"bbb/b1/#_1","text":"","title":"\u8fdb\u7a0b\u4e0e\u7ebf\u7a0b"},{"location":"bbb/b1/#1","text":"\u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u8fdb\u7a0b\u63a7\u5236\u5757 (Process Control Block, PCB) \u63cf\u8ff0\u8fdb\u7a0b\u7684\u57fa\u672c\u4fe1\u606f\u548c\u8fd0\u884c\u72b6\u6001\uff0c\u6240\u8c13\u7684\u521b\u5efa\u8fdb\u7a0b\u548c\u64a4\u9500\u8fdb\u7a0b\uff0c\u90fd\u662f\u6307\u5bf9 PCB \u7684\u64cd\u4f5c\u3002 \u4e0b\u56fe\u663e\u793a\u4e86 4 \u4e2a\u7a0b\u5e8f\u521b\u5efa\u4e86 4 \u4e2a\u8fdb\u7a0b\uff0c\u8fd9 4 \u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5e76\u53d1\u5730\u6267\u884c\u3002","title":"1. \u8fdb\u7a0b"},{"location":"bbb/b1/#2","text":"\u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\u3002 \u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\uff0c\u5b83\u4eec\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u3002 QQ \u548c\u6d4f\u89c8\u5668\u662f\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u6d4f\u89c8\u5668\u8fdb\u7a0b\u91cc\u9762\u6709\u5f88\u591a\u7ebf\u7a0b\uff0c\u4f8b\u5982 HTTP \u8bf7\u6c42\u7ebf\u7a0b\u3001\u4e8b\u4ef6\u54cd\u5e94\u7ebf\u7a0b\u3001\u6e32\u67d3\u7ebf\u7a0b\u7b49\u7b49\uff0c\u7ebf\u7a0b\u7684\u5e76\u53d1\u6267\u884c\u4f7f\u5f97\u5728\u6d4f\u89c8\u5668\u4e2d\u70b9\u51fb\u4e00\u4e2a\u65b0\u94fe\u63a5\u4ece\u800c\u53d1\u8d77 HTTP \u8bf7\u6c42\u65f6\uff0c\u6d4f\u89c8\u5668\u8fd8\u53ef\u4ee5\u54cd\u5e94\u7528\u6237\u7684\u5176\u5b83\u4e8b\u4ef6\u3002","title":"2. \u7ebf\u7a0b"},{"location":"bbb/b1/#3","text":"\u2160 \u62e5\u6709\u8d44\u6e90 \u8fdb\u7a0b\u662f\u8d44\u6e90\u5206\u914d\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u4f46\u662f\u7ebf\u7a0b\u4e0d\u62e5\u6709\u8d44\u6e90\uff0c\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u96b6\u5c5e\u8fdb\u7a0b\u7684\u8d44\u6e90\u3002 \u2161 \u8c03\u5ea6 \u7ebf\u7a0b\u662f\u72ec\u7acb\u8c03\u5ea6\u7684\u57fa\u672c\u5355\u4f4d\uff0c\u5728\u540c\u4e00\u8fdb\u7a0b\u4e2d\uff0c\u7ebf\u7a0b\u7684\u5207\u6362\u4e0d\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\uff0c\u4ece\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u7ebf\u7a0b\u5207\u6362\u5230\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u7ebf\u7a0b\u65f6\uff0c\u4f1a\u5f15\u8d77\u8fdb\u7a0b\u5207\u6362\u3002 \u2162 \u7cfb\u7edf\u5f00\u9500 \u7531\u4e8e\u521b\u5efa\u6216\u64a4\u9500\u8fdb\u7a0b\u65f6\uff0c\u7cfb\u7edf\u90fd\u8981\u4e3a\u4e4b\u5206\u914d\u6216\u56de\u6536\u8d44\u6e90\uff0c\u5982\u5185\u5b58\u7a7a\u95f4\u3001I/O \u8bbe\u5907\u7b49\uff0c\u6240\u4ed8\u51fa\u7684\u5f00\u9500\u8fdc\u5927\u4e8e\u521b\u5efa\u6216\u64a4\u9500\u7ebf\u7a0b\u65f6\u7684\u5f00\u9500\u3002\u7c7b\u4f3c\u5730\uff0c\u5728\u8fdb\u884c\u8fdb\u7a0b\u5207\u6362\u65f6\uff0c\u6d89\u53ca\u5f53\u524d\u6267\u884c\u8fdb\u7a0b CPU \u73af\u5883\u7684\u4fdd\u5b58\u53ca\u65b0\u8c03\u5ea6\u8fdb\u7a0b CPU \u73af\u5883\u7684\u8bbe\u7f6e\uff0c\u800c\u7ebf\u7a0b\u5207\u6362\u65f6\u53ea\u9700\u4fdd\u5b58\u548c\u8bbe\u7f6e\u5c11\u91cf\u5bc4\u5b58\u5668\u5185\u5bb9\uff0c\u5f00\u9500\u5f88\u5c0f\u3002 \u2163 \u901a\u4fe1\u65b9\u9762 \u7ebf\u7a0b\u95f4\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8bfb\u5199\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u901a\u4fe1\uff0c\u4f46\u662f\u8fdb\u7a0b\u901a\u4fe1\u9700\u8981\u501f\u52a9 IPC\u3002","title":"3. \u533a\u522b"},{"location":"bbb/b1/#_2","text":"\u5c31\u7eea\u72b6\u6001\uff08ready\uff09\uff1a\u7b49\u5f85\u88ab\u8c03\u5ea6 \u8fd0\u884c\u72b6\u6001\uff08running\uff09 \u963b\u585e\u72b6\u6001\uff08waiting\uff09\uff1a\u7b49\u5f85\u8d44\u6e90 \u5e94\u8be5\u6ce8\u610f\u4ee5\u4e0b\u5185\u5bb9\uff1a \u53ea\u6709\u5c31\u7eea\u6001\u548c\u8fd0\u884c\u6001\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u5176\u5b83\u7684\u90fd\u662f\u5355\u5411\u8f6c\u6362\u3002\u5c31\u7eea\u72b6\u6001\u7684\u8fdb\u7a0b\u901a\u8fc7\u8c03\u5ea6\u7b97\u6cd5\u4ece\u800c\u83b7\u5f97 CPU \u65f6\u95f4\uff0c\u8f6c\u4e3a\u8fd0\u884c\u72b6\u6001\uff1b\u800c\u8fd0\u884c\u72b6\u6001\u7684\u8fdb\u7a0b\uff0c\u5728\u5206\u914d\u7ed9\u5b83\u7684 CPU \u65f6\u95f4\u7247\u7528\u5b8c\u4e4b\u540e\u5c31\u4f1a\u8f6c\u4e3a\u5c31\u7eea\u72b6\u6001\uff0c\u7b49\u5f85\u4e0b\u4e00\u6b21\u8c03\u5ea6\u3002 \u963b\u585e\u72b6\u6001\u662f\u7f3a\u5c11\u9700\u8981\u7684\u8d44\u6e90\u4ece\u800c\u7531\u8fd0\u884c\u72b6\u6001\u8f6c\u6362\u800c\u6765\uff0c\u4f46\u662f\u8be5\u8d44\u6e90\u4e0d\u5305\u62ec CPU \u65f6\u95f4\uff0c\u7f3a\u5c11 CPU \u65f6\u95f4\u4f1a\u4ece\u8fd0\u884c\u6001\u8f6c\u6362\u4e3a\u5c31\u7eea\u6001\u3002","title":"\u8fdb\u7a0b\u72b6\u6001\u7684\u5207\u6362"},{"location":"bbb/b1/#_3","text":"\u4e0d\u540c\u73af\u5883\u7684\u8c03\u5ea6\u7b97\u6cd5\u76ee\u6807\u4e0d\u540c\uff0c\u56e0\u6b64\u9700\u8981\u9488\u5bf9\u4e0d\u540c\u73af\u5883\u6765\u8ba8\u8bba\u8c03\u5ea6\u7b97\u6cd5\u3002","title":"\u8fdb\u7a0b\u8c03\u5ea6\u7b97\u6cd5"},{"location":"bbb/b1/#1_1","text":"\u6279\u5904\u7406\u7cfb\u7edf\u6ca1\u6709\u592a\u591a\u7684\u7528\u6237\u64cd\u4f5c\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\uff0c\u8c03\u5ea6\u7b97\u6cd5\u76ee\u6807\u662f\u4fdd\u8bc1\u541e\u5410\u91cf\u548c\u5468\u8f6c\u65f6\u95f4\uff08\u4ece\u63d0\u4ea4\u5230\u7ec8\u6b62\u7684\u65f6\u95f4\uff09\u3002 1.1 \u5148\u6765\u5148\u670d\u52a1 first-come first-serverd\uff08FCFS\uff09 \u975e\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u6309\u7167\u8bf7\u6c42\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u6709\u5229\u4e8e\u957f\u4f5c\u4e1a\uff0c\u4f46\u4e0d\u5229\u4e8e\u77ed\u4f5c\u4e1a\uff0c\u56e0\u4e3a\u77ed\u4f5c\u4e1a\u5fc5\u987b\u4e00\u76f4\u7b49\u5f85\u524d\u9762\u7684\u957f\u4f5c\u4e1a\u6267\u884c\u5b8c\u6bd5\u624d\u80fd\u6267\u884c\uff0c\u800c\u957f\u4f5c\u4e1a\u53c8\u9700\u8981\u6267\u884c\u5f88\u957f\u65f6\u95f4\uff0c\u9020\u6210\u4e86\u77ed\u4f5c\u4e1a\u7b49\u5f85\u65f6\u95f4\u8fc7\u957f\u3002 1.2 \u77ed\u4f5c\u4e1a\u4f18\u5148 shortest job first\uff08SJF\uff09 \u975e\u62a2\u5360\u5f0f\u7684\u8c03\u5ea6\u7b97\u6cd5\uff0c\u6309\u4f30\u8ba1\u8fd0\u884c\u65f6\u95f4\u6700\u77ed\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u957f\u4f5c\u4e1a\u6709\u53ef\u80fd\u4f1a\u997f\u6b7b\uff0c\u5904\u4e8e\u4e00\u76f4\u7b49\u5f85\u77ed\u4f5c\u4e1a\u6267\u884c\u5b8c\u6bd5\u7684\u72b6\u6001\u3002\u56e0\u4e3a\u5982\u679c\u4e00\u76f4\u6709\u77ed\u4f5c\u4e1a\u5230\u6765\uff0c\u90a3\u4e48\u957f\u4f5c\u4e1a\u6c38\u8fdc\u5f97\u4e0d\u5230\u8c03\u5ea6\u3002 1.3 \u6700\u77ed\u5269\u4f59\u65f6\u95f4\u4f18\u5148 shortest remaining time next\uff08SRTN\uff09 \u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u7684\u62a2\u5360\u5f0f\u7248\u672c\uff0c\u6309\u5269\u4f59\u8fd0\u884c\u65f6\u95f4\u7684\u987a\u5e8f\u8fdb\u884c\u8c03\u5ea6\u3002 \u5f53\u4e00\u4e2a\u65b0\u7684\u4f5c\u4e1a\u5230\u8fbe\u65f6\uff0c\u5176\u6574\u4e2a\u8fd0\u884c\u65f6\u95f4\u4e0e\u5f53\u524d\u8fdb\u7a0b\u7684\u5269\u4f59\u65f6\u95f4\u4f5c\u6bd4\u8f83\u3002\u5982\u679c\u65b0\u7684\u8fdb\u7a0b\u9700\u8981\u7684\u65f6\u95f4\u66f4\u5c11\uff0c\u5219\u6302\u8d77\u5f53\u524d\u8fdb\u7a0b\uff0c\u8fd0\u884c\u65b0\u7684\u8fdb\u7a0b\u3002\u5426\u5219\u65b0\u7684\u8fdb\u7a0b\u7b49\u5f85\u3002","title":"1. \u6279\u5904\u7406\u7cfb\u7edf"},{"location":"bbb/b1/#2_1","text":"\u4ea4\u4e92\u5f0f\u7cfb\u7edf\u6709\u5927\u91cf\u7684\u7528\u6237\u4ea4\u4e92\u64cd\u4f5c\uff0c\u5728\u8be5\u7cfb\u7edf\u4e2d\u8c03\u5ea6\u7b97\u6cd5\u7684\u76ee\u6807\u662f\u5feb\u901f\u5730\u8fdb\u884c\u54cd\u5e94\u3002 2.1 \u65f6\u95f4\u7247\u8f6e\u8f6c \u5c06\u6240\u6709\u5c31\u7eea\u8fdb\u7a0b\u6309 FCFS \u7684\u539f\u5219\u6392\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6bcf\u6b21\u8c03\u5ea6\u65f6\uff0c\u628a CPU \u65f6\u95f4\u5206\u914d\u7ed9\u961f\u9996\u8fdb\u7a0b\uff0c\u8be5\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u4e00\u4e2a\u65f6\u95f4\u7247\u3002\u5f53\u65f6\u95f4\u7247\u7528\u5b8c\u65f6\uff0c\u7531\u8ba1\u65f6\u5668\u53d1\u51fa\u65f6\u949f\u4e2d\u65ad\uff0c\u8c03\u5ea6\u7a0b\u5e8f\u4fbf\u505c\u6b62\u8be5\u8fdb\u7a0b\u7684\u6267\u884c\uff0c\u5e76\u5c06\u5b83\u9001\u5f80\u5c31\u7eea\u961f\u5217\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u7ee7\u7eed\u628a CPU \u65f6\u95f4\u5206\u914d\u7ed9\u961f\u9996\u7684\u8fdb\u7a0b\u3002 \u65f6\u95f4\u7247\u8f6e\u8f6c\u7b97\u6cd5\u7684\u6548\u7387\u548c\u65f6\u95f4\u7247\u7684\u5927\u5c0f\u6709\u5f88\u5927\u5173\u7cfb\uff1a \u56e0\u4e3a\u8fdb\u7a0b\u5207\u6362\u90fd\u8981\u4fdd\u5b58\u8fdb\u7a0b\u7684\u4fe1\u606f\u5e76\u4e14\u8f7d\u5165\u65b0\u8fdb\u7a0b\u7684\u4fe1\u606f\uff0c\u5982\u679c\u65f6\u95f4\u7247\u592a\u5c0f\uff0c\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u5207\u6362\u5f97\u592a\u9891\u7e41\uff0c\u5728\u8fdb\u7a0b\u5207\u6362\u4e0a\u5c31\u4f1a\u82b1\u8fc7\u591a\u65f6\u95f4\u3002 \u800c\u5982\u679c\u65f6\u95f4\u7247\u8fc7\u957f\uff0c\u90a3\u4e48\u5b9e\u65f6\u6027\u5c31\u4e0d\u80fd\u5f97\u5230\u4fdd\u8bc1\u3002 2.2 \u4f18\u5148\u7ea7\u8c03\u5ea6 \u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u6309\u4f18\u5148\u7ea7\u8fdb\u884c\u8c03\u5ea6\u3002 \u4e3a\u4e86\u9632\u6b62\u4f4e\u4f18\u5148\u7ea7\u7684\u8fdb\u7a0b\u6c38\u8fdc\u7b49\u4e0d\u5230\u8c03\u5ea6\uff0c\u53ef\u4ee5\u968f\u7740\u65f6\u95f4\u7684\u63a8\u79fb\u589e\u52a0\u7b49\u5f85\u8fdb\u7a0b\u7684\u4f18\u5148\u7ea7\u3002 2.3 \u591a\u7ea7\u53cd\u9988\u961f\u5217 \u4e00\u4e2a\u8fdb\u7a0b\u9700\u8981\u6267\u884c 100 \u4e2a\u65f6\u95f4\u7247\uff0c\u5982\u679c\u91c7\u7528\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5\uff0c\u90a3\u4e48\u9700\u8981\u4ea4\u6362 100 \u6b21\u3002 \u591a\u7ea7\u961f\u5217\u662f\u4e3a\u8fd9\u79cd\u9700\u8981\u8fde\u7eed\u6267\u884c\u591a\u4e2a\u65f6\u95f4\u7247\u7684\u8fdb\u7a0b\u8003\u8651\uff0c\u5b83\u8bbe\u7f6e\u4e86\u591a\u4e2a\u961f\u5217\uff0c\u6bcf\u4e2a\u961f\u5217\u65f6\u95f4\u7247\u5927\u5c0f\u90fd\u4e0d\u540c\uff0c\u4f8b\u5982 1,2,4,8,..\u3002\u8fdb\u7a0b\u5728\u7b2c\u4e00\u4e2a\u961f\u5217\u6ca1\u6267\u884c\u5b8c\uff0c\u5c31\u4f1a\u88ab\u79fb\u5230\u4e0b\u4e00\u4e2a\u961f\u5217\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\uff0c\u4e4b\u524d\u7684\u8fdb\u7a0b\u53ea\u9700\u8981\u4ea4\u6362 7 \u6b21\u3002 \u6bcf\u4e2a\u961f\u5217\u4f18\u5148\u6743\u4e5f\u4e0d\u540c\uff0c\u6700\u4e0a\u9762\u7684\u4f18\u5148\u6743\u6700\u9ad8\u3002\u56e0\u6b64\u53ea\u6709\u4e0a\u4e00\u4e2a\u961f\u5217\u6ca1\u6709\u8fdb\u7a0b\u5728\u6392\u961f\uff0c\u624d\u80fd\u8c03\u5ea6\u5f53\u524d\u961f\u5217\u4e0a\u7684\u8fdb\u7a0b\u3002 \u53ef\u4ee5\u5c06\u8fd9\u79cd\u8c03\u5ea6\u7b97\u6cd5\u770b\u6210\u662f\u65f6\u95f4\u7247\u8f6e\u8f6c\u8c03\u5ea6\u7b97\u6cd5\u548c\u4f18\u5148\u7ea7\u8c03\u5ea6\u7b97\u6cd5\u7684\u7ed3\u5408\u3002","title":"2. \u4ea4\u4e92\u5f0f\u7cfb\u7edf"},{"location":"bbb/b1/#3_1","text":"\u5b9e\u65f6\u7cfb\u7edf\u8981\u6c42\u4e00\u4e2a\u8bf7\u6c42\u5728\u4e00\u4e2a\u786e\u5b9a\u65f6\u95f4\u5185\u5f97\u5230\u54cd\u5e94\u3002 \u5206\u4e3a\u786c\u5b9e\u65f6\u548c\u8f6f\u5b9e\u65f6\uff0c\u524d\u8005\u5fc5\u987b\u6ee1\u8db3\u7edd\u5bf9\u7684\u622a\u6b62\u65f6\u95f4\uff0c\u540e\u8005\u53ef\u4ee5\u5bb9\u5fcd\u4e00\u5b9a\u7684\u8d85\u65f6\u3002","title":"3. \u5b9e\u65f6\u7cfb\u7edf"},{"location":"bbb/b1/#_4","text":"","title":"\u8fdb\u7a0b\u540c\u6b65"},{"location":"bbb/b1/#1_2","text":"\u5bf9\u4e34\u754c\u8d44\u6e90\u8fdb\u884c\u8bbf\u95ee\u7684\u90a3\u6bb5\u4ee3\u7801\u79f0\u4e3a\u4e34\u754c\u533a\u3002 \u4e3a\u4e86\u4e92\u65a5\u8bbf\u95ee\u4e34\u754c\u8d44\u6e90\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u5728\u8fdb\u5165\u4e34\u754c\u533a\u4e4b\u524d\uff0c\u9700\u8981\u5148\u8fdb\u884c\u68c0\u67e5\u3002 // entry section // critical section; // exit section","title":"1. \u4e34\u754c\u533a"},{"location":"bbb/b1/#2_2","text":"\u540c\u6b65\uff1a\u591a\u4e2a\u8fdb\u7a0b\u56e0\u4e3a\u5408\u4f5c\u4ea7\u751f\u7684\u76f4\u63a5\u5236\u7ea6\u5173\u7cfb\uff0c\u4f7f\u5f97\u8fdb\u7a0b\u6709\u4e00\u5b9a\u7684\u5148\u540e\u6267\u884c\u5173\u7cfb\u3002 \u4e92\u65a5\uff1a\u591a\u4e2a\u8fdb\u7a0b\u5728\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u80fd\u8fdb\u5165\u4e34\u754c\u533a\u3002","title":"2. \u540c\u6b65\u4e0e\u4e92\u65a5"},{"location":"bbb/b1/#3_2","text":"\u4fe1\u53f7\u91cf\uff08Semaphore\uff09\u662f\u4e00\u4e2a\u6574\u578b\u53d8\u91cf\uff0c\u53ef\u4ee5\u5bf9\u5176\u6267\u884c down \u548c up \u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5e38\u89c1\u7684 P \u548c V \u64cd\u4f5c\u3002 down : \u5982\u679c\u4fe1\u53f7\u91cf\u5927\u4e8e 0 \uff0c\u6267\u884c -1 \u64cd\u4f5c\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u7b49\u4e8e 0\uff0c\u8fdb\u7a0b\u7761\u7720\uff0c\u7b49\u5f85\u4fe1\u53f7\u91cf\u5927\u4e8e 0\uff1b up \uff1a\u5bf9\u4fe1\u53f7\u91cf\u6267\u884c +1 \u64cd\u4f5c\uff0c\u5524\u9192\u7761\u7720\u7684\u8fdb\u7a0b\u8ba9\u5176\u5b8c\u6210 down \u64cd\u4f5c\u3002 down \u548c up \u64cd\u4f5c\u9700\u8981\u88ab\u8bbe\u8ba1\u6210\u539f\u8bed\uff0c\u4e0d\u53ef\u5206\u5272\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5728\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u7684\u65f6\u5019\u5c4f\u853d\u4e2d\u65ad\u3002 \u5982\u679c\u4fe1\u53f7\u91cf\u7684\u53d6\u503c\u53ea\u80fd\u4e3a 0 \u6216\u8005 1\uff0c\u90a3\u4e48\u5c31\u6210\u4e3a\u4e86 \u4e92\u65a5\u91cf\uff08Mutex\uff09 \uff0c0 \u8868\u793a\u4e34\u754c\u533a\u5df2\u7ecf\u52a0\u9501\uff0c1 \u8868\u793a\u4e34\u754c\u533a\u89e3\u9501\u3002 typedef int semaphore; semaphore mutex = 1; void P1() { down(&mutex); // \u4e34\u754c\u533a up(&mutex); } void P2() { down(&mutex); // \u4e34\u754c\u533a up(&mutex); } \\<font size=3> \u4f7f\u7528\u4fe1\u53f7\u91cf\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898 \\</font> \\</br> \u95ee\u9898\u63cf\u8ff0\uff1a\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u533a\u6765\u4fdd\u5b58\u7269\u54c1\uff0c\u53ea\u6709\u7f13\u51b2\u533a\u6ca1\u6709\u6ee1\uff0c\u751f\u4ea7\u8005\u624d\u53ef\u4ee5\u653e\u5165\u7269\u54c1\uff1b\u53ea\u6709\u7f13\u51b2\u533a\u4e0d\u4e3a\u7a7a\uff0c\u6d88\u8d39\u8005\u624d\u53ef\u4ee5\u62ff\u8d70\u7269\u54c1\u3002 \u56e0\u4e3a\u7f13\u51b2\u533a\u5c5e\u4e8e\u4e34\u754c\u8d44\u6e90\uff0c\u56e0\u6b64\u9700\u8981\u4f7f\u7528\u4e00\u4e2a\u4e92\u65a5\u91cf mutex \u6765\u63a7\u5236\u5bf9\u7f13\u51b2\u533a\u7684\u4e92\u65a5\u8bbf\u95ee\u3002 \u4e3a\u4e86\u540c\u6b65\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u7684\u884c\u4e3a\uff0c\u9700\u8981\u8bb0\u5f55\u7f13\u51b2\u533a\u4e2d\u7269\u54c1\u7684\u6570\u91cf\u3002\u6570\u91cf\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf\u6765\u8fdb\u884c\u7edf\u8ba1\uff0c\u8fd9\u91cc\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u4fe1\u53f7\u91cf\uff1aempty \u8bb0\u5f55\u7a7a\u7f13\u51b2\u533a\u7684\u6570\u91cf\uff0cfull \u8bb0\u5f55\u6ee1\u7f13\u51b2\u533a\u7684\u6570\u91cf\u3002\u5176\u4e2d\uff0cempty \u4fe1\u53f7\u91cf\u662f\u5728\u751f\u4ea7\u8005\u8fdb\u7a0b\u4e2d\u4f7f\u7528\uff0c\u5f53 empty \u4e0d\u4e3a 0 \u65f6\uff0c\u751f\u4ea7\u8005\u624d\u53ef\u4ee5\u653e\u5165\u7269\u54c1\uff1bfull \u4fe1\u53f7\u91cf\u662f\u5728\u6d88\u8d39\u8005\u8fdb\u7a0b\u4e2d\u4f7f\u7528\uff0c\u5f53 full \u4fe1\u53f7\u91cf\u4e0d\u4e3a 0 \u65f6\uff0c\u6d88\u8d39\u8005\u624d\u53ef\u4ee5\u53d6\u8d70\u7269\u54c1\u3002 \u6ce8\u610f\uff0c\u4e0d\u80fd\u5148\u5bf9\u7f13\u51b2\u533a\u8fdb\u884c\u52a0\u9501\uff0c\u518d\u6d4b\u8bd5\u4fe1\u53f7\u91cf\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u80fd\u5148\u6267\u884c down(mutex) \u518d\u6267\u884c down(empty)\u3002\u5982\u679c\u8fd9\u4e48\u505a\u4e86\uff0c\u90a3\u4e48\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff1a\u751f\u4ea7\u8005\u5bf9\u7f13\u51b2\u533a\u52a0\u9501\u540e\uff0c\u6267\u884c down(empty) \u64cd\u4f5c\uff0c\u53d1\u73b0 empty = 0\uff0c\u6b64\u65f6\u751f\u4ea7\u8005\u7761\u7720\u3002\u6d88\u8d39\u8005\u4e0d\u80fd\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u56e0\u4e3a\u751f\u4ea7\u8005\u5bf9\u7f13\u51b2\u533a\u52a0\u9501\u4e86\uff0c\u6d88\u8d39\u8005\u5c31\u65e0\u6cd5\u6267\u884c up(empty) \u64cd\u4f5c\uff0cempty \u6c38\u8fdc\u90fd\u4e3a 0\uff0c\u5bfc\u81f4\u751f\u4ea7\u8005\u6c38\u8fdc\u7b49\u5f85\u4e0b\uff0c\u4e0d\u4f1a\u91ca\u653e\u9501\uff0c\u6d88\u8d39\u8005\u56e0\u6b64\u4e5f\u4f1a\u6c38\u8fdc\u7b49\u5f85\u4e0b\u53bb\u3002 #define N 100 typedef int semaphore; semaphore mutex = 1; semaphore empty = N; semaphore full = 0; void producer() { while(TRUE) { int item = produce_item(); down(&empty); down(&mutex); insert_item(item); up(&mutex); up(&full); } } void consumer() { while(TRUE) { down(&full); down(&mutex); int item = remove_item(); consume_item(item); up(&mutex); up(&empty); } }","title":"3. \u4fe1\u53f7\u91cf"},{"location":"bbb/b1/#4","text":"\u4f7f\u7528\u4fe1\u53f7\u91cf\u673a\u5236\u5b9e\u73b0\u7684\u751f\u4ea7\u8005\u6d88\u8d39\u8005\u95ee\u9898\u9700\u8981\u5ba2\u6237\u7aef\u4ee3\u7801\u505a\u5f88\u591a\u63a7\u5236\uff0c\u800c\u7ba1\u7a0b\u628a\u63a7\u5236\u7684\u4ee3\u7801\u72ec\u7acb\u51fa\u6765\uff0c\u4e0d\u4ec5\u4e0d\u5bb9\u6613\u51fa\u9519\uff0c\u4e5f\u4f7f\u5f97\u5ba2\u6237\u7aef\u4ee3\u7801\u8c03\u7528\u66f4\u5bb9\u6613\u3002 c \u8bed\u8a00\u4e0d\u652f\u6301\u7ba1\u7a0b\uff0c\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u4f7f\u7528\u4e86\u7c7b Pascal \u8bed\u8a00\u6765\u63cf\u8ff0\u7ba1\u7a0b\u3002\u793a\u4f8b\u4ee3\u7801\u7684\u7ba1\u7a0b\u63d0\u4f9b\u4e86 insert() \u548c remove() \u65b9\u6cd5\uff0c\u5ba2\u6237\u7aef\u4ee3\u7801\u901a\u8fc7\u8c03\u7528\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u6765\u89e3\u51b3\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898\u3002 monitor ProducerConsumer integer i; condition c; procedure insert(); begin // ... end; procedure remove(); begin // ... end; end monitor; \u7ba1\u7a0b\u6709\u4e00\u4e2a\u91cd\u8981\u7279\u6027\uff1a\u5728\u4e00\u4e2a\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u8fdb\u7a0b\u4f7f\u7528\u7ba1\u7a0b\u3002\u8fdb\u7a0b\u5728\u65e0\u6cd5\u7ee7\u7eed\u6267\u884c\u7684\u65f6\u5019\u4e0d\u80fd\u4e00\u76f4\u5360\u7528\u7ba1\u7a0b\uff0c\u5426\u5219\u5176\u5b83\u8fdb\u7a0b\u6c38\u8fdc\u4e0d\u80fd\u4f7f\u7528\u7ba1\u7a0b\u3002 \u7ba1\u7a0b\u5f15\u5165\u4e86 \u6761\u4ef6\u53d8\u91cf \u4ee5\u53ca\u76f8\u5173\u7684\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u5b9e\u73b0\u540c\u6b65\u64cd\u4f5c\u3002\u5bf9\u6761\u4ef6\u53d8\u91cf\u6267\u884c wait() \u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8c03\u7528\u8fdb\u7a0b\u963b\u585e\uff0c\u628a\u7ba1\u7a0b\u8ba9\u51fa\u6765\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6301\u6709\u3002signal() \u64cd\u4f5c\u7528\u4e8e\u5524\u9192\u88ab\u963b\u585e\u7684\u8fdb\u7a0b\u3002 \u4f7f\u7528\u7ba1\u7a0b\u5b9e\u73b0\u751f\u4ea7\u8005-\u6d88\u8d39\u8005\u95ee\u9898 // \u7ba1\u7a0b monitor ProducerConsumer condition full, empty; integer count := 0; condition c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 then signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N -1 then signal(full); end; end monitor; // \u751f\u4ea7\u8005\u5ba2\u6237\u7aef procedure producer begin while true do begin item = produce_item; ProducerConsumer.insert(item); end end; // \u6d88\u8d39\u8005\u5ba2\u6237\u7aef procedure consumer begin while true do begin item = ProducerConsumer.remove; consume_item(item); end end;","title":"4. \u7ba1\u7a0b"},{"location":"bbb/b1/#_5","text":"\u751f\u4ea7\u8005\u548c\u6d88\u8d39\u8005\u95ee\u9898\u524d\u9762\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u4e86\u3002","title":"\u7ecf\u5178\u540c\u6b65\u95ee\u9898"},{"location":"bbb/b1/#1_3","text":"\u4e94\u4e2a\u54f2\u5b66\u5bb6\u56f4\u7740\u4e00\u5f20\u5706\u684c\uff0c\u6bcf\u4e2a\u54f2\u5b66\u5bb6\u9762\u524d\u653e\u7740\u98df\u7269\u3002\u54f2\u5b66\u5bb6\u7684\u751f\u6d3b\u6709\u4e24\u79cd\u4ea4\u66ff\u6d3b\u52a8\uff1a\u5403\u996d\u4ee5\u53ca\u601d\u8003\u3002\u5f53\u4e00\u4e2a\u54f2\u5b66\u5bb6\u5403\u996d\u65f6\uff0c\u9700\u8981\u5148\u62ff\u8d77\u81ea\u5df1\u5de6\u53f3\u4e24\u8fb9\u7684\u4e24\u6839\u7b77\u5b50\uff0c\u5e76\u4e14\u4e00\u6b21\u53ea\u80fd\u62ff\u8d77\u4e00\u6839\u7b77\u5b50\u3002 \u4e0b\u9762\u662f\u4e00\u79cd\u9519\u8bef\u7684\u89e3\u6cd5\uff0c\u5982\u679c\u6240\u6709\u54f2\u5b66\u5bb6\u540c\u65f6\u62ff\u8d77\u5de6\u624b\u8fb9\u7684\u7b77\u5b50\uff0c\u90a3\u4e48\u6240\u6709\u54f2\u5b66\u5bb6\u90fd\u5728\u7b49\u5f85\u5176\u5b83\u54f2\u5b66\u5bb6\u5403\u5b8c\u5e76\u91ca\u653e\u81ea\u5df1\u624b\u4e2d\u7684\u7b77\u5b50\uff0c\u5bfc\u81f4\u6b7b\u9501\u3002 #define N 5 void philosopher(int i) { while(TRUE) { think(); take(i); // \u62ff\u8d77\u5de6\u8fb9\u7684\u7b77\u5b50 take((i+1)%N); // \u62ff\u8d77\u53f3\u8fb9\u7684\u7b77\u5b50 eat(); put(i); put((i+1)%N); } } \u4e3a\u4e86\u9632\u6b62\u6b7b\u9501\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u4e24\u4e2a\u6761\u4ef6\uff1a \u5fc5\u987b\u540c\u65f6\u62ff\u8d77\u5de6\u53f3\u4e24\u6839\u7b77\u5b50\uff1b \u53ea\u6709\u5728\u4e24\u4e2a\u90bb\u5c45\u90fd\u6ca1\u6709\u8fdb\u9910\u7684\u60c5\u51b5\u4e0b\u624d\u5141\u8bb8\u8fdb\u9910\u3002 #define N 5 #define LEFT (i + N - 1) % N // \u5de6\u90bb\u5c45 #define RIGHT (i + 1) % N // \u53f3\u90bb\u5c45 #define THINKING 0 #define HUNGRY 1 #define EATING 2 typedef int semaphore; int state[N]; // \u8ddf\u8e2a\u6bcf\u4e2a\u54f2\u5b66\u5bb6\u7684\u72b6\u6001 semaphore mutex = 1; // \u4e34\u754c\u533a\u7684\u4e92\u65a5\uff0c\u4e34\u754c\u533a\u662f state \u6570\u7ec4\uff0c\u5bf9\u5176\u4fee\u6539\u9700\u8981\u4e92\u65a5 semaphore s[N]; // \u6bcf\u4e2a\u54f2\u5b66\u5bb6\u4e00\u4e2a\u4fe1\u53f7\u91cf void philosopher(int i) { while(TRUE) { think(i); take_two(i); eat(i); put_two(i); } } void take_two(int i) { down(&mutex); state[i] = HUNGRY; check(i); up(&mutex); down(&s[i]); // \u53ea\u6709\u6536\u5230\u901a\u77e5\u4e4b\u540e\u624d\u53ef\u4ee5\u5f00\u59cb\u5403\uff0c\u5426\u5219\u4f1a\u4e00\u76f4\u7b49\u4e0b\u53bb } void put_two(i) { down(&mutex); state[i] = THINKING; check(LEFT); // \u5c1d\u8bd5\u901a\u77e5\u5de6\u53f3\u90bb\u5c45\uff0c\u81ea\u5df1\u5403\u5b8c\u4e86\uff0c\u4f60\u4eec\u53ef\u4ee5\u5f00\u59cb\u5403\u4e86 check(RIGHT); up(&mutex); } void eat(int i) { down(&mutex); state[i] = EATING; up(&mutex); } // \u68c0\u67e5\u4e24\u4e2a\u90bb\u5c45\u662f\u5426\u90fd\u6ca1\u6709\u7528\u9910\uff0c\u5982\u679c\u662f\u7684\u8bdd\uff0c\u5c31 up(&s[i])\uff0c\u4f7f\u5f97 down(&s[i]) \u80fd\u591f\u5f97\u5230\u901a\u77e5\u5e76\u7ee7\u7eed\u6267\u884c void check(i) { if(state[i] == HUNGRY && state[LEFT] != EATING && state[RIGHT] !=EATING) { state[i] = EATING; up(&s[i]); } }","title":"1. \u54f2\u5b66\u5bb6\u8fdb\u9910\u95ee\u9898"},{"location":"bbb/b1/#2-","text":"\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u540c\u65f6\u5bf9\u6570\u636e\u8fdb\u884c\u8bfb\u64cd\u4f5c\uff0c\u4f46\u662f\u4e0d\u5141\u8bb8\u8bfb\u548c\u5199\u4ee5\u53ca\u5199\u548c\u5199\u64cd\u4f5c\u540c\u65f6\u53d1\u751f\u3002 \u4e00\u4e2a\u6574\u578b\u53d8\u91cf count \u8bb0\u5f55\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u8bfb\u64cd\u4f5c\u7684\u8fdb\u7a0b\u6570\u91cf\uff0c\u4e00\u4e2a\u4e92\u65a5\u91cf count_mutex \u7528\u4e8e\u5bf9 count \u52a0\u9501\uff0c\u4e00\u4e2a\u4e92\u65a5\u91cf data_mutex \u7528\u4e8e\u5bf9\u8bfb\u5199\u7684\u6570\u636e\u52a0\u9501\u3002 typedef int semaphore; semaphore count_mutex = 1; semaphore data_mutex = 1; int count = 0; void reader() { while(TRUE) { down(&count_mutex); count++; if(count == 1) down(&data_mutex); // \u7b2c\u4e00\u4e2a\u8bfb\u8005\u9700\u8981\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u9501\uff0c\u9632\u6b62\u5199\u8fdb\u7a0b\u8bbf\u95ee up(&count_mutex); read(); down(&count_mutex); count--; if(count == 0) up(&data_mutex); up(&count_mutex); } } void writer() { while(TRUE) { down(&data_mutex); write(); up(&data_mutex); } } \u4ee5\u4e0b\u5185\u5bb9\u7531 @Bandi Yugandhar \u63d0\u4f9b\u3002 The first case may result Writer to starve. This case favous Writers i.e no writer, once added to the queue, shall be kept waiting longer than absolutely necessary(only when there are readers that entered the queue before the writer). int readcount, writecount; //(initial value = 0) semaphore rmutex, wmutex, readLock, resource; //(initial value = 1) //READER void reader() { <ENTRY Section> down(&readLock); // reader is trying to enter down(&rmutex); // lock to increase readcount readcount++; if (readcount == 1) down(&resource); //if you are the first reader then lock the resource up(&rmutex); //release for other readers up(&readLock); //Done with trying to access the resource <CRITICAL Section> //reading is performed <EXIT Section> down(&rmutex); //reserve exit section - avoids race condition with readers readcount--; //indicate you're leaving if (readcount == 0) //checks if you are last reader leaving up(&resource); //if last, you must release the locked resource up(&rmutex); //release exit section for other readers } //WRITER void writer() { <ENTRY Section> down(&wmutex); //reserve entry section for writers - avoids race conditions writecount++; //report yourself as a writer entering if (writecount == 1) //checks if you're first writer down(&readLock); //if you're first, then you must lock the readers out. Prevent them from trying to enter CS up(&wmutex); //release entry section <CRITICAL Section> down(&resource); //reserve the resource for yourself - prevents other writers from simultaneously editing the shared resource //writing is performed up(&resource); //release file <EXIT Section> down(&wmutex); //reserve exit section writecount--; //indicate you're leaving if (writecount == 0) //checks if you're the last writer up(&readLock); //if you're last writer, you must unlock the readers. Allows them to try enter CS for reading up(&wmutex); //release exit section } We can observe that every reader is forced to acquire ReadLock. On the otherhand, writers doesn\u2019t need to lock individually. Once the first writer locks the ReadLock, it will be released only when there is no writer left in the queue. From the both cases we observed that either reader or writer has to starve. Below solutionadds the constraint that no thread shall be allowed to starve; that is, the operation of obtaining a lock on the shared data will always terminate in a bounded amount of time. int readCount; // init to 0; number of readers currently accessing resource // all semaphores initialised to 1 Semaphore resourceAccess; // controls access (read/write) to the resource Semaphore readCountAccess; // for syncing changes to shared variable readCount Semaphore serviceQueue; // FAIRNESS: preserves ordering of requests (signaling must be FIFO) void writer() { down(&serviceQueue); // wait in line to be servicexs // <ENTER> down(&resourceAccess); // request exclusive access to resource // </ENTER> up(&serviceQueue); // let next in line be serviced // <WRITE> writeResource(); // writing is performed // </WRITE> // <EXIT> up(&resourceAccess); // release resource access for next reader/writer // </EXIT> } void reader() { down(&serviceQueue); // wait in line to be serviced down(&readCountAccess); // request exclusive access to readCount // <ENTER> if (readCount == 0) // if there are no readers already reading: down(&resourceAccess); // request resource access for readers (writers blocked) readCount++; // update count of active readers // </ENTER> up(&serviceQueue); // let next in line be serviced up(&readCountAccess); // release access to readCount // <READ> readResource(); // reading is performed // </READ> down(&readCountAccess); // request exclusive access to readCount // <EXIT> readCount--; // update count of active readers if (readCount == 0) // if there are no readers left: up(&resourceAccess); // release resource access for all // </EXIT> up(&readCountAccess); // release access to readCount }","title":"2. \u8bfb\u8005-\u5199\u8005\u95ee\u9898"},{"location":"bbb/b1/#_6","text":"\u8fdb\u7a0b\u540c\u6b65\u4e0e\u8fdb\u7a0b\u901a\u4fe1\u5f88\u5bb9\u6613\u6df7\u6dc6\uff0c\u5b83\u4eec\u7684\u533a\u522b\u5728\u4e8e\uff1a \u8fdb\u7a0b\u540c\u6b65\uff1a\u63a7\u5236\u591a\u4e2a\u8fdb\u7a0b\u6309\u4e00\u5b9a\u987a\u5e8f\u6267\u884c\uff1b \u8fdb\u7a0b\u901a\u4fe1\uff1a\u8fdb\u7a0b\u95f4\u4f20\u8f93\u4fe1\u606f\u3002 \u8fdb\u7a0b\u901a\u4fe1\u662f\u4e00\u79cd\u624b\u6bb5\uff0c\u800c\u8fdb\u7a0b\u540c\u6b65\u662f\u4e00\u79cd\u76ee\u7684\u3002\u4e5f\u53ef\u4ee5\u8bf4\uff0c\u4e3a\u4e86\u80fd\u591f\u8fbe\u5230\u8fdb\u7a0b\u540c\u6b65\u7684\u76ee\u7684\uff0c\u9700\u8981\u8ba9\u8fdb\u7a0b\u8fdb\u884c\u901a\u4fe1\uff0c\u4f20\u8f93\u4e00\u4e9b\u8fdb\u7a0b\u540c\u6b65\u6240\u9700\u8981\u7684\u4fe1\u606f\u3002","title":"\u8fdb\u7a0b\u901a\u4fe1"},{"location":"bbb/b1/#1_4","text":"\u7ba1\u9053\u662f\u901a\u8fc7\u8c03\u7528 pipe \u51fd\u6570\u521b\u5efa\u7684\uff0cfd[0] \u7528\u4e8e\u8bfb\uff0cfd[1] \u7528\u4e8e\u5199\u3002 #include <unistd.h> int pipe(int fd[2]); \u5b83\u5177\u6709\u4ee5\u4e0b\u9650\u5236\uff1a \u53ea\u652f\u6301\u534a\u53cc\u5de5\u901a\u4fe1\uff08\u5355\u5411\u4ea4\u66ff\u4f20\u8f93\uff09\uff1b \u53ea\u80fd\u5728\u7236\u5b50\u8fdb\u7a0b\u6216\u8005\u5144\u5f1f\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u3002","title":"1. \u7ba1\u9053"},{"location":"bbb/b1/#2-fifo","text":"\u4e5f\u79f0\u4e3a\u547d\u540d\u7ba1\u9053\uff0c\u53bb\u9664\u4e86\u7ba1\u9053\u53ea\u80fd\u5728\u7236\u5b50\u8fdb\u7a0b\u4e2d\u4f7f\u7528\u7684\u9650\u5236\u3002 #include <sys/stat.h> int mkfifo(const char *path, mode_t mode); int mkfifoat(int fd, const char *path, mode_t mode); FIFO \u5e38\u7528\u4e8e\u5ba2\u6237-\u670d\u52a1\u5668\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0cFIFO \u7528\u4f5c\u6c47\u805a\u70b9\uff0c\u5728\u5ba2\u6237\u8fdb\u7a0b\u548c\u670d\u52a1\u5668\u8fdb\u7a0b\u4e4b\u95f4\u4f20\u9012\u6570\u636e\u3002","title":"2. FIFO"},{"location":"bbb/b1/#3_3","text":"\u76f8\u6bd4\u4e8e FIFO\uff0c\u6d88\u606f\u961f\u5217\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a \u6d88\u606f\u961f\u5217\u53ef\u4ee5\u72ec\u7acb\u4e8e\u8bfb\u5199\u8fdb\u7a0b\u5b58\u5728\uff0c\u4ece\u800c\u907f\u514d\u4e86 FIFO \u4e2d\u540c\u6b65\u7ba1\u9053\u7684\u6253\u5f00\u548c\u5173\u95ed\u65f6\u53ef\u80fd\u4ea7\u751f\u7684\u56f0\u96be\uff1b \u907f\u514d\u4e86 FIFO \u7684\u540c\u6b65\u963b\u585e\u95ee\u9898\uff0c\u4e0d\u9700\u8981\u8fdb\u7a0b\u81ea\u5df1\u63d0\u4f9b\u540c\u6b65\u65b9\u6cd5\uff1b \u8bfb\u8fdb\u7a0b\u53ef\u4ee5\u6839\u636e\u6d88\u606f\u7c7b\u578b\u6709\u9009\u62e9\u5730\u63a5\u6536\u6d88\u606f\uff0c\u800c\u4e0d\u50cf FIFO \u90a3\u6837\u53ea\u80fd\u9ed8\u8ba4\u5730\u63a5\u6536\u3002","title":"3. \u6d88\u606f\u961f\u5217"},{"location":"bbb/b1/#4_1","text":"\u5b83\u662f\u4e00\u4e2a\u8ba1\u6570\u5668\uff0c\u7528\u4e8e\u4e3a\u591a\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u5bf9\u5171\u4eab\u6570\u636e\u5bf9\u8c61\u7684\u8bbf\u95ee\u3002","title":"4. \u4fe1\u53f7\u91cf"},{"location":"bbb/b1/#5","text":"\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\u5171\u4eab\u4e00\u4e2a\u7ed9\u5b9a\u7684\u5b58\u50a8\u533a\u3002\u56e0\u4e3a\u6570\u636e\u4e0d\u9700\u8981\u5728\u8fdb\u7a0b\u4e4b\u95f4\u590d\u5236\uff0c\u6240\u4ee5\u8fd9\u662f\u6700\u5feb\u7684\u4e00\u79cd IPC\u3002 \u9700\u8981\u4f7f\u7528\u4fe1\u53f7\u91cf\u7528\u6765\u540c\u6b65\u5bf9\u5171\u4eab\u5b58\u50a8\u7684\u8bbf\u95ee\u3002 \u591a\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u5c06\u540c\u4e00\u4e2a\u6587\u4ef6\u6620\u5c04\u5230\u5b83\u4eec\u7684\u5730\u5740\u7a7a\u95f4\u4ece\u800c\u5b9e\u73b0\u5171\u4eab\u5185\u5b58\u3002\u53e6\u5916 XSI \u5171\u4eab\u5185\u5b58\u4e0d\u662f\u4f7f\u7528\u6587\u4ef6\uff0c\u800c\u662f\u4f7f\u7528\u5185\u5b58\u7684\u533f\u540d\u6bb5\u3002","title":"5. \u5171\u4eab\u5b58\u50a8"},{"location":"bbb/b1/#6","text":"\u4e0e\u5176\u5b83\u901a\u4fe1\u673a\u5236\u4e0d\u540c\u7684\u662f\uff0c\u5b83\u53ef\u7528\u4e8e\u4e0d\u540c\u673a\u5668\u95f4\u7684\u8fdb\u7a0b\u901a\u4fe1\u3002","title":"6. \u5957\u63a5\u5b57"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/","text":"\u4e00\u3001\u53ef\u8bfb\u6027\u7684\u91cd\u8981\u6027 \u4e8c\u3001\u7528\u540d\u5b57\u8868\u8fbe\u4ee3\u7801\u542b\u4e49 \u4e09\u3001\u540d\u5b57\u4e0d\u80fd\u5e26\u6765\u6b67\u4e49 \u56db\u3001\u826f\u597d\u7684\u4ee3\u7801\u98ce\u683c \u4e94\u3001\u4e3a\u4f55\u7f16\u5199\u6ce8\u91ca \u516d\u3001\u5982\u4f55\u7f16\u5199\u6ce8\u91ca \u4e03\u3001\u63d0\u9ad8\u63a7\u5236\u6d41\u7684\u53ef\u8bfb\u6027 \u516b\u3001\u62c6\u5206\u957f\u8868\u8fbe\u5f0f \u4e5d\u3001\u53d8\u91cf\u4e0e\u53ef\u8bfb\u6027 \u5341\u3001\u62bd\u53d6\u51fd\u6570 \u5341\u4e00\u3001\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b \u5341\u4e8c\u3001\u7528\u81ea\u7136\u8bed\u8a00\u8868\u8ff0\u4ee3\u7801 \u5341\u4e09\u3001\u51cf\u5c11\u4ee3\u7801\u91cf \u53c2\u8003\u8d44\u6599 \u4e00\u3001\u53ef\u8bfb\u6027\u7684\u91cd\u8981\u6027 \u7f16\u7a0b\u6709\u5f88\u5927\u4e00\u90e8\u5206\u65f6\u95f4\u662f\u5728\u9605\u8bfb\u4ee3\u7801\uff0c\u4e0d\u4ec5\u8981\u9605\u8bfb\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u800c\u4e14\u8981\u9605\u8bfb\u522b\u4eba\u7684\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u53ef\u8bfb\u6027\u826f\u597d\u7684\u4ee3\u7801\u80fd\u591f\u5927\u5927\u63d0\u9ad8\u7f16\u7a0b\u6548\u7387\u3002 \u53ef\u8bfb\u6027\u826f\u597d\u7684\u4ee3\u7801\u5f80\u5f80\u4f1a\u8ba9\u4ee3\u7801\u67b6\u6784\u66f4\u597d\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5458\u66f4\u613f\u610f\u53bb\u4fee\u6539\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u800c\u4e14\u4e5f\u66f4\u5bb9\u6613\u4fee\u6539\u3002 \u53ea\u6709\u5728\u6838\u5fc3\u9886\u57df\u4e3a\u4e86\u6548\u7387\u624d\u53ef\u4ee5\u653e\u5f03\u53ef\u8bfb\u6027\uff0c\u5426\u5219\u53ef\u8bfb\u6027\u662f\u7b2c\u4e00\u4f4d\u3002 \u4e8c\u3001\u7528\u540d\u5b57\u8868\u8fbe\u4ee3\u7801\u542b\u4e49 \u4e00\u4e9b\u6bd4\u8f83\u6709\u8868\u8fbe\u529b\u7684\u5355\u8bcd\uff1a \u5355\u8bcd \u53ef\u66ff\u4ee3\u5355\u8bcd send deliver\u3001dispatch\u3001announce\u3001distribute\u3001route find search\u3001extract\u3001locate\u3001recover start launch\u3001create\u3001begin\u3001open make create\u3001set up\u3001build\u3001generate\u3001compose\u3001add\u3001new \u4f7f\u7528 i\u3001j\u3001k \u4f5c\u4e3a\u5faa\u73af\u8fed\u4ee3\u5668\u7684\u540d\u5b57\u8fc7\u4e8e\u7b80\u5355\uff0cuser_i\u3001member_i \u8fd9\u79cd\u540d\u5b57\u4f1a\u66f4\u6709\u8868\u8fbe\u529b\u3002\u56e0\u4e3a\u5faa\u73af\u5c42\u6b21\u8d8a\u591a\uff0c\u4ee3\u7801\u8d8a\u96be\u7406\u89e3\uff0c\u6709\u8868\u8fbe\u529b\u7684\u8fed\u4ee3\u5668\u540d\u5b57\u53ef\u8bfb\u6027\u4f1a\u66f4\u9ad8\u3002 \u4e3a\u540d\u5b57\u6dfb\u52a0\u5f62\u5bb9\u8bcd\u7b49\u4fe1\u606f\u80fd\u8ba9\u540d\u5b57\u66f4\u5177\u6709\u8868\u8fbe\u529b\uff0c\u4f46\u662f\u540d\u5b57\u4e5f\u4f1a\u53d8\u957f\u3002\u540d\u5b57\u957f\u77ed\u7684\u51c6\u5219\u662f\uff1a\u4f5c\u7528\u57df\u8d8a\u5927\uff0c\u540d\u5b57\u8d8a\u957f\u3002\u56e0\u6b64\u53ea\u6709\u5728\u77ed\u4f5c\u7528\u57df\u624d\u80fd\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u540d\u5b57\u3002 \u4e09\u3001\u540d\u5b57\u4e0d\u80fd\u5e26\u6765\u6b67\u4e49 \u8d77\u5b8c\u540d\u5b57\u8981\u601d\u8003\u4e00\u4e0b\u522b\u4eba\u4f1a\u5bf9\u8fd9\u4e2a\u540d\u5b57\u6709\u4f55\u89e3\u8bfb\uff0c\u4f1a\u4e0d\u4f1a\u8bef\u89e3\u4e86\u539f\u672c\u60f3\u8868\u8fbe\u7684\u542b\u4e49\u3002 \u5e03\u5c14\u76f8\u5173\u7684\u547d\u540d\u52a0\u4e0a is\u3001can\u3001should\u3001has \u7b49\u524d\u7f00\u3002 \u7528 min\u3001max \u8868\u793a\u6570\u91cf\u8303\u56f4\uff1b \u7528 first\u3001last \u8868\u793a\u8bbf\u95ee\u7a7a\u95f4\u7684\u5305\u542b\u8303\u56f4\uff1b begin\u3001end \u8868\u793a\u8bbf\u95ee\u7a7a\u95f4\u7684\u6392\u9664\u8303\u56f4\uff0c\u5373 end \u4e0d\u5305\u542b\u5c3e\u90e8\u3002 \u56db\u3001\u826f\u597d\u7684\u4ee3\u7801\u98ce\u683c \u9002\u5f53\u7684\u7a7a\u884c\u548c\u7f29\u8fdb\u3002 \u6392\u5217\u6574\u9f50\u7684\u6ce8\u91ca\uff1a int a = 1; // \u6ce8\u91ca int b = 11; // \u6ce8\u91ca int c = 111; // \u6ce8\u91ca \u8bed\u53e5\u987a\u5e8f\u4e0d\u80fd\u968f\u610f\uff0c\u6bd4\u5982\u4e0e html \u8868\u5355\u76f8\u5173\u8054\u7684\u53d8\u91cf\u7684\u8d4b\u503c\u5e94\u8be5\u548c\u8868\u5355\u5728 html \u4e2d\u7684\u987a\u5e8f\u4e00\u81f4\u3002 \u4e94\u3001\u4e3a\u4f55\u7f16\u5199\u6ce8\u91ca \u9605\u8bfb\u4ee3\u7801\u9996\u5148\u4f1a\u6ce8\u610f\u5230\u6ce8\u91ca\uff0c\u5982\u679c\u6ce8\u91ca\u6ca1\u592a\u5927\u4f5c\u7528\uff0c\u90a3\u4e48\u5c31\u4f1a\u6d6a\u8d39\u4ee3\u7801\u9605\u8bfb\u7684\u65f6\u95f4\u3002\u90a3\u4e9b\u80fd\u76f4\u63a5\u770b\u51fa\u542b\u4e49\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u5199\u6ce8\u91ca\uff0c\u7279\u522b\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u52a0\u4e0a\u6ce8\u91ca\uff0c\u6bd4\u5982\u90a3\u4e9b\u7b80\u5355\u7684 getter \u548c setter \u65b9\u6cd5\uff0c\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u5199\u6ce8\u91ca\u53cd\u800c\u8ba9\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5dee\u3002 \u4e0d\u80fd\u56e0\u4e3a\u6709\u6ce8\u91ca\u5c31\u968f\u4fbf\u8d77\u4e2a\u540d\u5b57\uff0c\u800c\u662f\u4e89\u53d6\u8d77\u4e2a\u597d\u540d\u5b57\u800c\u4e0d\u5199\u6ce8\u91ca\u3002 \u53ef\u4ee5\u7528\u6ce8\u91ca\u6765\u8bb0\u5f55\u91c7\u7528\u5f53\u524d\u89e3\u51b3\u529e\u6cd5\u7684\u601d\u8003\u8fc7\u7a0b\uff0c\u4ece\u800c\u8ba9\u8bfb\u8005\u66f4\u5bb9\u6613\u7406\u89e3\u4ee3\u7801\u3002 \u6ce8\u91ca\u7528\u6765\u63d0\u9192\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002 \u7528 TODO \u7b49\u505a\u6807\u8bb0\uff1a \u6807\u8bb0 \u7528\u6cd5 TODO \u5f85\u505a FIXME \u5f85\u4fee\u590d HACK \u7c97\u7cd9\u7684\u89e3\u51b3\u65b9\u6848 XXX \u5371\u9669\uff01\u8fd9\u91cc\u6709\u91cd\u8981\u7684\u95ee\u9898 \u516d\u3001\u5982\u4f55\u7f16\u5199\u6ce8\u91ca \u5c3d\u91cf\u7b80\u6d01\u660e\u4e86\uff1a // The first String is student's name // The Second Integer is student's score Map<String, Integer> scoreMap = new HashMap<>(); // Student's name -> Student's score Map<String, Integer> scoreMap = new HashMap<>(); \u6dfb\u52a0\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a // ... // Example: add(1, 2), return 3 int add(int x, int y) { return x + y; } \u4f7f\u7528\u4e13\u4e1a\u540d\u8bcd\u6765\u7f29\u77ed\u6982\u5ff5\u4e0a\u7684\u89e3\u91ca\uff0c\u6bd4\u5982\u7528\u8bbe\u8ba1\u6a21\u5f0f\u540d\u6765\u8bf4\u660e\u4ee3\u7801\u3002 \u4e03\u3001\u63d0\u9ad8\u63a7\u5236\u6d41\u7684\u53ef\u8bfb\u6027 \u6761\u4ef6\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5de6\u4fa7\u662f\u53d8\u91cf\uff0c\u53f3\u4fa7\u662f\u5e38\u6570\u3002\u6bd4\u5982\u4e0b\u9762\u7b2c\u4e00\u4e2a\u8bed\u53e5\u6b63\u786e\uff1a if (len < 10) if (10 > len) \u53ea\u6709\u5728\u903b\u8f91\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 ? : \u4e09\u76ee\u8fd0\u7b97\u7b26\u6765\u4f7f\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u5426\u5219\u5e94\u8be5\u62c6\u5206\u6210 if / else\uff1b do / while \u7684\u6761\u4ef6\u653e\u5728\u540e\u9762\uff0c\u4e0d\u591f\u7b80\u5355\u660e\u4e86\uff0c\u5e76\u4e14\u4f1a\u6709\u4e00\u4e9b\u8ff7\u60d1\u7684\u5730\u65b9\uff0c\u6700\u597d\u4f7f\u7528 while \u6765\u4ee3\u66ff\u3002 \u5982\u679c\u53ea\u6709\u4e00\u4e2a goto \u76ee\u6807\uff0c\u90a3\u4e48 goto \u5c1a\u4e14\u8fd8\u80fd\u63a5\u53d7\uff0c\u4f46\u662f\u8fc7\u4e8e\u590d\u6742\u7684 goto \u4f1a\u8ba9\u4ee3\u7801\u53ef\u8bfb\u6027\u7279\u522b\u5dee\uff0c\u5e94\u8be5\u907f\u514d\u4f7f\u7528 goto\u3002 \u5728\u5d4c\u5957\u7684\u5faa\u73af\u4e2d\uff0c\u7528\u4e00\u4e9b return \u8bed\u53e5\u5f80\u5f80\u80fd\u51cf\u5c11\u5d4c\u5957\u7684\u5c42\u6570\u3002 \u516b\u3001\u62c6\u5206\u957f\u8868\u8fbe\u5f0f \u957f\u8868\u8fbe\u5f0f\u7684\u53ef\u8bfb\u6027\u5f88\u5dee\uff0c\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u89e3\u91ca\u53d8\u91cf\u4ece\u800c\u62c6\u5206\u8868\u8fbe\u5f0f\uff1a if line.split(':')[0].strip() == \"root\": ... username = line.split(':')[0].strip() if username == \"root\": ... \u4f7f\u7528\u6469\u6839\u5b9a\u7406\u7b80\u5316\u4e00\u4e9b\u903b\u8f91\u8868\u8fbe\u5f0f\uff1a if (!a && !b) { ... } if (!(a || b)) { ... } \u4e5d\u3001\u53d8\u91cf\u4e0e\u53ef\u8bfb\u6027 \u53bb\u9664\u63a7\u5236\u6d41\u53d8\u91cf \u3002\u5728\u5faa\u73af\u4e2d\u901a\u8fc7\u4f7f\u7528 break \u6216\u8005 return \u53ef\u4ee5\u51cf\u5c11\u63a7\u5236\u6d41\u53d8\u91cf\u7684\u4f7f\u7528\u3002 boolean done = false; while (/* condition */ && !done) { ... if ( ... ) { done = true; continue; } } while(/* condition */) { ... if ( ... ) { break; } } \u51cf\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u3002\u4f5c\u7528\u57df\u8d8a\u5c0f\uff0c\u8d8a\u5bb9\u6613\u5b9a\u4f4d\u5230\u53d8\u91cf\u6240\u6709\u4f7f\u7528\u7684\u5730\u65b9\u3002 JavaScript \u53ef\u4ee5\u7528\u95ed\u5305\u51cf\u5c0f\u4f5c\u7528\u57df\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e2d submit_form \u662f\u51fd\u6570\u53d8\u91cf\uff0csubmitted \u53d8\u91cf\u63a7\u5236\u51fd\u6570\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u4e24\u6b21\u3002\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u4e2d submitted \u662f\u5168\u5c40\u53d8\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u5b9e\u73b0\u628a submitted \u653e\u5230\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u4ece\u800c\u9650\u5236\u4e86\u8d77\u4f5c\u7528\u57df\u8303\u56f4\u3002 submitted = false; var submit_form = function(form_name) { if (submitted) { return; } submitted = true; }; var submit_form = (function() { var submitted = false; return function(form_name) { if(submitted) { return; } submitted = true; } }()); // () \u4f7f\u5f97\u5916\u5c42\u533f\u540d\u51fd\u6570\u7acb\u5373\u6267\u884c JavaScript \u4e2d\u6ca1\u6709\u7528 var \u58f0\u660e\u7684\u53d8\u91cf\u90fd\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u800c\u5168\u5c40\u53d8\u91cf\u5f88\u5bb9\u6613\u9020\u6210\u8ff7\u60d1\uff0c\u56e0\u6b64\u5e94\u5f53\u603b\u662f\u7528 var \u6765\u58f0\u660e\u53d8\u91cf\u3002 \u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5e94\u5f53\u79bb\u5b83\u4f7f\u7528\u7684\u4f4d\u7f6e\u6700\u8fd1\u3002 \u5b9e\u4f8b\u89e3\u6790 \u5728\u4e00\u4e2a\u7f51\u9875\u4e2d\u6709\u4ee5\u4e0b\u6587\u672c\u8f93\u5165\u5b57\u6bb5\uff1a <input type = \"text\" id = \"input1\" value = \"a\"> <input type = \"text\" id = \"input2\" value = \"b\"> <input type = \"text\" id = \"input3\" value = \"\"> <input type = \"text\" id = \"input4\" value = \"d\"> \u73b0\u5728\u8981\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u628a\u5b83\u653e\u5230\u7b2c\u4e00\u4e2a\u7a7a\u7684 input \u5b57\u6bb5\u4e2d\uff0c\u521d\u59cb\u5b9e\u73b0\u5982\u4e0b\uff1a var setFirstEmptyInput = function(new_alue) { var found = false; var i = 1; var elem = document.getElementById('input' + i); while (elem != null) { if (elem.value === '') { found = true; break; } i++; elem = document.getElementById('input' + i); } if (found) elem.value = new_value; return elem; } \u4ee5\u4e0a\u5b9e\u73b0\u6709\u4ee5\u4e0b\u95ee\u9898\uff1a found \u53ef\u4ee5\u53bb\u9664\uff1b elem \u4f5c\u7528\u57df\u8fc7\u5927\uff1b \u53ef\u4ee5\u7528 for \u5faa\u73af\u4ee3\u66ff while \u5faa\u73af\uff1b var setFirstEmptyInput = function(new_value) { for (var i = 1; true; i++) { var elem = document.getElementById('input' + i); if (elem === null) { return null; } if (elem.value === '') { elem.value = new_value; return elem; } } }; \u5341\u3001\u62bd\u53d6\u51fd\u6570 \u5de5\u7a0b\u5b66\u5c31\u662f\u628a\u5927\u95ee\u9898\u62c6\u5206\u6210\u5c0f\u95ee\u9898\u518d\u628a\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u653e\u56de\u4e00\u8d77\u3002 \u9996\u5148\u5e94\u8be5\u660e\u786e\u4e00\u4e2a\u51fd\u6570\u7684\u9ad8\u5c42\u6b21\u76ee\u6807\uff0c\u7136\u540e\u5bf9\u4e8e\u4e0d\u662f\u76f4\u63a5\u4e3a\u4e86\u8fd9\u4e2a\u76ee\u6807\u5de5\u4f5c\u7684\u4ee3\u7801\uff0c\u62bd\u53d6\u51fa\u6765\u653e\u5230\u72ec\u7acb\u7684\u51fd\u6570\u4e2d\u3002 \u4ecb\u7ecd\u6027\u7684\u4ee3\u7801\uff1a int findClostElement(int[] arr) { int clostIdx; int clostDist = Interger.MAX_VALUE; for (int i = 0; i < arr.length; i++) { int x = ...; int y = ...; int z = ...; int value = x * y * z; int dist = Math.sqrt(Math.pow(value, 2), Math.pow(arr[i], 2)); if (dist < clostDist) { clostIdx = i; clostDist = value; } } return clostIdx; } \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u5faa\u73af\u90e8\u5206\u4e3b\u8981\u8ba1\u7b97\u8ddd\u79bb\uff0c\u8fd9\u90e8\u5206\u4e0d\u5c5e\u4e8e\u4ee3\u7801\u9ad8\u5c42\u6b21\u76ee\u6807\uff0c\u9ad8\u5c42\u6b21\u76ee\u6807\u662f\u5bfb\u627e\u6700\u5c0f\u8ddd\u79bb\u7684\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u8fd9\u90e8\u5206\u4ee3\u66ff\u63d0\u53d6\u5230\u72ec\u7acb\u7684\u51fd\u6570\u4e2d\u3002\u8fd9\u6837\u505a\u4e5f\u5e26\u6765\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\u6709\uff1a\u53ef\u4ee5\u5355\u72ec\u8fdb\u884c\u6d4b\u8bd5\u3001\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u7a0b\u5e8f\u9519\u8bef\u5e76\u4fee\u6539\u3002 public int findClostElement(int[] arr) { int clostIdx; int clostDist = Interger.MAX_VALUE; for (int i = 0; i < arr.length; i++) { int dist = computDist(arr, i); if (dist < clostDist) { clostIdx = i; clostDist = value; } } return clostIdx; } \u5e76\u4e0d\u662f\u51fd\u6570\u62bd\u53d6\u7684\u8d8a\u591a\u8d8a\u597d\uff0c\u5982\u679c\u62bd\u53d6\u8fc7\u591a\uff0c\u5728\u9605\u8bfb\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u80fd\u9700\u8981\u4e0d\u65ad\u8df3\u6765\u8df3\u53bb\u3002\u53ea\u6709\u5728\u5f53\u524d\u51fd\u6570\u4e0d\u9700\u8981\u53bb\u4e86\u89e3\u67d0\u4e00\u5757\u4ee3\u7801\u7ec6\u8282\u800c\u80fd\u591f\u8868\u8fbe\u5176\u5185\u5bb9\u65f6\uff0c\u628a\u8fd9\u5757\u4ee3\u7801\u62bd\u53d6\u6210\u5b50\u51fd\u6570\u624d\u662f\u597d\u7684\u3002 \u51fd\u6570\u62bd\u53d6\u4e5f\u7528\u4e8e\u51cf\u5c0f\u4ee3\u7801\u7684\u5197\u4f59\u3002 \u5341\u4e00\u3001\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b \u53ea\u505a\u4e00\u4ef6\u4e8b\u7684\u4ee3\u7801\u5f88\u5bb9\u6613\u8ba9\u4eba\u77e5\u9053\u5176\u8981\u505a\u7684\u4e8b\uff1b \u57fa\u672c\u6d41\u7a0b\uff1a\u5217\u51fa\u4ee3\u7801\u6240\u505a\u7684\u6240\u6709\u4efb\u52a1\uff1b\u628a\u6bcf\u4e2a\u4efb\u52a1\u62c6\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u6216\u8005\u4e0d\u540c\u7684\u6bb5\u843d\u3002 \u5341\u4e8c\u3001\u7528\u81ea\u7136\u8bed\u8a00\u8868\u8ff0\u4ee3\u7801 \u5148\u7528\u81ea\u7136\u8bed\u8a00\u4e66\u5199\u4ee3\u7801\u903b\u8f91\uff0c\u4e5f\u5c31\u662f\u4f2a\u4ee3\u7801\uff0c\u7136\u540e\u518d\u5199\u4ee3\u7801\uff0c\u8fd9\u6837\u4ee3\u7801\u903b\u8f91\u4f1a\u66f4\u6e05\u6670\u3002 \u5341\u4e09\u3001\u51cf\u5c11\u4ee3\u7801\u91cf \u4e0d\u8981\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u7f16\u7801\u8fc7\u7a0b\u4f1a\u6709\u5f88\u591a\u53d8\u5316\uff0c\u8fc7\u5ea6\u8bbe\u8ba1\u7684\u5185\u5bb9\u5230\u6700\u540e\u5f80\u5f80\u662f\u65e0\u7528\u7684\u3002 \u591a\u7528\u6807\u51c6\u5e93\u5b9e\u73b0\u3002 \u53c2\u8003\u8d44\u6599 Dustin, Boswell, Trevor, \u7b49. \u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u827a\u672f [M]. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2012.","title":"\u4ee3\u7801\u53ef\u8bfb\u6027"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_1","text":"\u7f16\u7a0b\u6709\u5f88\u5927\u4e00\u90e8\u5206\u65f6\u95f4\u662f\u5728\u9605\u8bfb\u4ee3\u7801\uff0c\u4e0d\u4ec5\u8981\u9605\u8bfb\u81ea\u5df1\u7684\u4ee3\u7801\uff0c\u800c\u4e14\u8981\u9605\u8bfb\u522b\u4eba\u7684\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u53ef\u8bfb\u6027\u826f\u597d\u7684\u4ee3\u7801\u80fd\u591f\u5927\u5927\u63d0\u9ad8\u7f16\u7a0b\u6548\u7387\u3002 \u53ef\u8bfb\u6027\u826f\u597d\u7684\u4ee3\u7801\u5f80\u5f80\u4f1a\u8ba9\u4ee3\u7801\u67b6\u6784\u66f4\u597d\uff0c\u56e0\u4e3a\u7a0b\u5e8f\u5458\u66f4\u613f\u610f\u53bb\u4fee\u6539\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u800c\u4e14\u4e5f\u66f4\u5bb9\u6613\u4fee\u6539\u3002 \u53ea\u6709\u5728\u6838\u5fc3\u9886\u57df\u4e3a\u4e86\u6548\u7387\u624d\u53ef\u4ee5\u653e\u5f03\u53ef\u8bfb\u6027\uff0c\u5426\u5219\u53ef\u8bfb\u6027\u662f\u7b2c\u4e00\u4f4d\u3002","title":"\u4e00\u3001\u53ef\u8bfb\u6027\u7684\u91cd\u8981\u6027"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_2","text":"\u4e00\u4e9b\u6bd4\u8f83\u6709\u8868\u8fbe\u529b\u7684\u5355\u8bcd\uff1a \u5355\u8bcd \u53ef\u66ff\u4ee3\u5355\u8bcd send deliver\u3001dispatch\u3001announce\u3001distribute\u3001route find search\u3001extract\u3001locate\u3001recover start launch\u3001create\u3001begin\u3001open make create\u3001set up\u3001build\u3001generate\u3001compose\u3001add\u3001new \u4f7f\u7528 i\u3001j\u3001k \u4f5c\u4e3a\u5faa\u73af\u8fed\u4ee3\u5668\u7684\u540d\u5b57\u8fc7\u4e8e\u7b80\u5355\uff0cuser_i\u3001member_i \u8fd9\u79cd\u540d\u5b57\u4f1a\u66f4\u6709\u8868\u8fbe\u529b\u3002\u56e0\u4e3a\u5faa\u73af\u5c42\u6b21\u8d8a\u591a\uff0c\u4ee3\u7801\u8d8a\u96be\u7406\u89e3\uff0c\u6709\u8868\u8fbe\u529b\u7684\u8fed\u4ee3\u5668\u540d\u5b57\u53ef\u8bfb\u6027\u4f1a\u66f4\u9ad8\u3002 \u4e3a\u540d\u5b57\u6dfb\u52a0\u5f62\u5bb9\u8bcd\u7b49\u4fe1\u606f\u80fd\u8ba9\u540d\u5b57\u66f4\u5177\u6709\u8868\u8fbe\u529b\uff0c\u4f46\u662f\u540d\u5b57\u4e5f\u4f1a\u53d8\u957f\u3002\u540d\u5b57\u957f\u77ed\u7684\u51c6\u5219\u662f\uff1a\u4f5c\u7528\u57df\u8d8a\u5927\uff0c\u540d\u5b57\u8d8a\u957f\u3002\u56e0\u6b64\u53ea\u6709\u5728\u77ed\u4f5c\u7528\u57df\u624d\u80fd\u4f7f\u7528\u4e00\u4e9b\u7b80\u5355\u540d\u5b57\u3002","title":"\u4e8c\u3001\u7528\u540d\u5b57\u8868\u8fbe\u4ee3\u7801\u542b\u4e49"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_3","text":"\u8d77\u5b8c\u540d\u5b57\u8981\u601d\u8003\u4e00\u4e0b\u522b\u4eba\u4f1a\u5bf9\u8fd9\u4e2a\u540d\u5b57\u6709\u4f55\u89e3\u8bfb\uff0c\u4f1a\u4e0d\u4f1a\u8bef\u89e3\u4e86\u539f\u672c\u60f3\u8868\u8fbe\u7684\u542b\u4e49\u3002 \u5e03\u5c14\u76f8\u5173\u7684\u547d\u540d\u52a0\u4e0a is\u3001can\u3001should\u3001has \u7b49\u524d\u7f00\u3002 \u7528 min\u3001max \u8868\u793a\u6570\u91cf\u8303\u56f4\uff1b \u7528 first\u3001last \u8868\u793a\u8bbf\u95ee\u7a7a\u95f4\u7684\u5305\u542b\u8303\u56f4\uff1b begin\u3001end \u8868\u793a\u8bbf\u95ee\u7a7a\u95f4\u7684\u6392\u9664\u8303\u56f4\uff0c\u5373 end \u4e0d\u5305\u542b\u5c3e\u90e8\u3002","title":"\u4e09\u3001\u540d\u5b57\u4e0d\u80fd\u5e26\u6765\u6b67\u4e49"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_4","text":"\u9002\u5f53\u7684\u7a7a\u884c\u548c\u7f29\u8fdb\u3002 \u6392\u5217\u6574\u9f50\u7684\u6ce8\u91ca\uff1a int a = 1; // \u6ce8\u91ca int b = 11; // \u6ce8\u91ca int c = 111; // \u6ce8\u91ca \u8bed\u53e5\u987a\u5e8f\u4e0d\u80fd\u968f\u610f\uff0c\u6bd4\u5982\u4e0e html \u8868\u5355\u76f8\u5173\u8054\u7684\u53d8\u91cf\u7684\u8d4b\u503c\u5e94\u8be5\u548c\u8868\u5355\u5728 html \u4e2d\u7684\u987a\u5e8f\u4e00\u81f4\u3002","title":"\u56db\u3001\u826f\u597d\u7684\u4ee3\u7801\u98ce\u683c"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_5","text":"\u9605\u8bfb\u4ee3\u7801\u9996\u5148\u4f1a\u6ce8\u610f\u5230\u6ce8\u91ca\uff0c\u5982\u679c\u6ce8\u91ca\u6ca1\u592a\u5927\u4f5c\u7528\uff0c\u90a3\u4e48\u5c31\u4f1a\u6d6a\u8d39\u4ee3\u7801\u9605\u8bfb\u7684\u65f6\u95f4\u3002\u90a3\u4e9b\u80fd\u76f4\u63a5\u770b\u51fa\u542b\u4e49\u7684\u4ee3\u7801\u4e0d\u9700\u8981\u5199\u6ce8\u91ca\uff0c\u7279\u522b\u662f\u4e0d\u9700\u8981\u4e3a\u6bcf\u4e2a\u65b9\u6cd5\u90fd\u52a0\u4e0a\u6ce8\u91ca\uff0c\u6bd4\u5982\u90a3\u4e9b\u7b80\u5355\u7684 getter \u548c setter \u65b9\u6cd5\uff0c\u4e3a\u8fd9\u4e9b\u65b9\u6cd5\u5199\u6ce8\u91ca\u53cd\u800c\u8ba9\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5dee\u3002 \u4e0d\u80fd\u56e0\u4e3a\u6709\u6ce8\u91ca\u5c31\u968f\u4fbf\u8d77\u4e2a\u540d\u5b57\uff0c\u800c\u662f\u4e89\u53d6\u8d77\u4e2a\u597d\u540d\u5b57\u800c\u4e0d\u5199\u6ce8\u91ca\u3002 \u53ef\u4ee5\u7528\u6ce8\u91ca\u6765\u8bb0\u5f55\u91c7\u7528\u5f53\u524d\u89e3\u51b3\u529e\u6cd5\u7684\u601d\u8003\u8fc7\u7a0b\uff0c\u4ece\u800c\u8ba9\u8bfb\u8005\u66f4\u5bb9\u6613\u7406\u89e3\u4ee3\u7801\u3002 \u6ce8\u91ca\u7528\u6765\u63d0\u9192\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u3002 \u7528 TODO \u7b49\u505a\u6807\u8bb0\uff1a \u6807\u8bb0 \u7528\u6cd5 TODO \u5f85\u505a FIXME \u5f85\u4fee\u590d HACK \u7c97\u7cd9\u7684\u89e3\u51b3\u65b9\u6848 XXX \u5371\u9669\uff01\u8fd9\u91cc\u6709\u91cd\u8981\u7684\u95ee\u9898","title":"\u4e94\u3001\u4e3a\u4f55\u7f16\u5199\u6ce8\u91ca"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_6","text":"\u5c3d\u91cf\u7b80\u6d01\u660e\u4e86\uff1a // The first String is student's name // The Second Integer is student's score Map<String, Integer> scoreMap = new HashMap<>(); // Student's name -> Student's score Map<String, Integer> scoreMap = new HashMap<>(); \u6dfb\u52a0\u6d4b\u8bd5\u7528\u4f8b\u6765\u8bf4\u660e\uff1a // ... // Example: add(1, 2), return 3 int add(int x, int y) { return x + y; } \u4f7f\u7528\u4e13\u4e1a\u540d\u8bcd\u6765\u7f29\u77ed\u6982\u5ff5\u4e0a\u7684\u89e3\u91ca\uff0c\u6bd4\u5982\u7528\u8bbe\u8ba1\u6a21\u5f0f\u540d\u6765\u8bf4\u660e\u4ee3\u7801\u3002","title":"\u516d\u3001\u5982\u4f55\u7f16\u5199\u6ce8\u91ca"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_7","text":"\u6761\u4ef6\u8868\u8fbe\u5f0f\u4e2d\uff0c\u5de6\u4fa7\u662f\u53d8\u91cf\uff0c\u53f3\u4fa7\u662f\u5e38\u6570\u3002\u6bd4\u5982\u4e0b\u9762\u7b2c\u4e00\u4e2a\u8bed\u53e5\u6b63\u786e\uff1a if (len < 10) if (10 > len) \u53ea\u6709\u5728\u903b\u8f91\u7b80\u5355\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528 ? : \u4e09\u76ee\u8fd0\u7b97\u7b26\u6765\u4f7f\u4ee3\u7801\u66f4\u7d27\u51d1\uff0c\u5426\u5219\u5e94\u8be5\u62c6\u5206\u6210 if / else\uff1b do / while \u7684\u6761\u4ef6\u653e\u5728\u540e\u9762\uff0c\u4e0d\u591f\u7b80\u5355\u660e\u4e86\uff0c\u5e76\u4e14\u4f1a\u6709\u4e00\u4e9b\u8ff7\u60d1\u7684\u5730\u65b9\uff0c\u6700\u597d\u4f7f\u7528 while \u6765\u4ee3\u66ff\u3002 \u5982\u679c\u53ea\u6709\u4e00\u4e2a goto \u76ee\u6807\uff0c\u90a3\u4e48 goto \u5c1a\u4e14\u8fd8\u80fd\u63a5\u53d7\uff0c\u4f46\u662f\u8fc7\u4e8e\u590d\u6742\u7684 goto \u4f1a\u8ba9\u4ee3\u7801\u53ef\u8bfb\u6027\u7279\u522b\u5dee\uff0c\u5e94\u8be5\u907f\u514d\u4f7f\u7528 goto\u3002 \u5728\u5d4c\u5957\u7684\u5faa\u73af\u4e2d\uff0c\u7528\u4e00\u4e9b return \u8bed\u53e5\u5f80\u5f80\u80fd\u51cf\u5c11\u5d4c\u5957\u7684\u5c42\u6570\u3002","title":"\u4e03\u3001\u63d0\u9ad8\u63a7\u5236\u6d41\u7684\u53ef\u8bfb\u6027"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_8","text":"\u957f\u8868\u8fbe\u5f0f\u7684\u53ef\u8bfb\u6027\u5f88\u5dee\uff0c\u53ef\u4ee5\u5f15\u5165\u4e00\u4e9b\u89e3\u91ca\u53d8\u91cf\u4ece\u800c\u62c6\u5206\u8868\u8fbe\u5f0f\uff1a if line.split(':')[0].strip() == \"root\": ... username = line.split(':')[0].strip() if username == \"root\": ... \u4f7f\u7528\u6469\u6839\u5b9a\u7406\u7b80\u5316\u4e00\u4e9b\u903b\u8f91\u8868\u8fbe\u5f0f\uff1a if (!a && !b) { ... } if (!(a || b)) { ... }","title":"\u516b\u3001\u62c6\u5206\u957f\u8868\u8fbe\u5f0f"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_9","text":"\u53bb\u9664\u63a7\u5236\u6d41\u53d8\u91cf \u3002\u5728\u5faa\u73af\u4e2d\u901a\u8fc7\u4f7f\u7528 break \u6216\u8005 return \u53ef\u4ee5\u51cf\u5c11\u63a7\u5236\u6d41\u53d8\u91cf\u7684\u4f7f\u7528\u3002 boolean done = false; while (/* condition */ && !done) { ... if ( ... ) { done = true; continue; } } while(/* condition */) { ... if ( ... ) { break; } } \u51cf\u5c0f\u53d8\u91cf\u4f5c\u7528\u57df \u3002\u4f5c\u7528\u57df\u8d8a\u5c0f\uff0c\u8d8a\u5bb9\u6613\u5b9a\u4f4d\u5230\u53d8\u91cf\u6240\u6709\u4f7f\u7528\u7684\u5730\u65b9\u3002 JavaScript \u53ef\u4ee5\u7528\u95ed\u5305\u51cf\u5c0f\u4f5c\u7528\u57df\u3002\u4ee5\u4e0b\u4ee3\u7801\u4e2d submit_form \u662f\u51fd\u6570\u53d8\u91cf\uff0csubmitted \u53d8\u91cf\u63a7\u5236\u51fd\u6570\u4e0d\u4f1a\u88ab\u63d0\u4ea4\u4e24\u6b21\u3002\u7b2c\u4e00\u4e2a\u5b9e\u73b0\u4e2d submitted \u662f\u5168\u5c40\u53d8\u91cf\uff0c\u7b2c\u4e8c\u4e2a\u5b9e\u73b0\u628a submitted \u653e\u5230\u533f\u540d\u51fd\u6570\u4e2d\uff0c\u4ece\u800c\u9650\u5236\u4e86\u8d77\u4f5c\u7528\u57df\u8303\u56f4\u3002 submitted = false; var submit_form = function(form_name) { if (submitted) { return; } submitted = true; }; var submit_form = (function() { var submitted = false; return function(form_name) { if(submitted) { return; } submitted = true; } }()); // () \u4f7f\u5f97\u5916\u5c42\u533f\u540d\u51fd\u6570\u7acb\u5373\u6267\u884c JavaScript \u4e2d\u6ca1\u6709\u7528 var \u58f0\u660e\u7684\u53d8\u91cf\u90fd\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u800c\u5168\u5c40\u53d8\u91cf\u5f88\u5bb9\u6613\u9020\u6210\u8ff7\u60d1\uff0c\u56e0\u6b64\u5e94\u5f53\u603b\u662f\u7528 var \u6765\u58f0\u660e\u53d8\u91cf\u3002 \u53d8\u91cf\u5b9a\u4e49\u7684\u4f4d\u7f6e\u5e94\u5f53\u79bb\u5b83\u4f7f\u7528\u7684\u4f4d\u7f6e\u6700\u8fd1\u3002 \u5b9e\u4f8b\u89e3\u6790 \u5728\u4e00\u4e2a\u7f51\u9875\u4e2d\u6709\u4ee5\u4e0b\u6587\u672c\u8f93\u5165\u5b57\u6bb5\uff1a <input type = \"text\" id = \"input1\" value = \"a\"> <input type = \"text\" id = \"input2\" value = \"b\"> <input type = \"text\" id = \"input3\" value = \"\"> <input type = \"text\" id = \"input4\" value = \"d\"> \u73b0\u5728\u8981\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u5e76\u628a\u5b83\u653e\u5230\u7b2c\u4e00\u4e2a\u7a7a\u7684 input \u5b57\u6bb5\u4e2d\uff0c\u521d\u59cb\u5b9e\u73b0\u5982\u4e0b\uff1a var setFirstEmptyInput = function(new_alue) { var found = false; var i = 1; var elem = document.getElementById('input' + i); while (elem != null) { if (elem.value === '') { found = true; break; } i++; elem = document.getElementById('input' + i); } if (found) elem.value = new_value; return elem; } \u4ee5\u4e0a\u5b9e\u73b0\u6709\u4ee5\u4e0b\u95ee\u9898\uff1a found \u53ef\u4ee5\u53bb\u9664\uff1b elem \u4f5c\u7528\u57df\u8fc7\u5927\uff1b \u53ef\u4ee5\u7528 for \u5faa\u73af\u4ee3\u66ff while \u5faa\u73af\uff1b var setFirstEmptyInput = function(new_value) { for (var i = 1; true; i++) { var elem = document.getElementById('input' + i); if (elem === null) { return null; } if (elem.value === '') { elem.value = new_value; return elem; } } };","title":"\u4e5d\u3001\u53d8\u91cf\u4e0e\u53ef\u8bfb\u6027"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_10","text":"\u5de5\u7a0b\u5b66\u5c31\u662f\u628a\u5927\u95ee\u9898\u62c6\u5206\u6210\u5c0f\u95ee\u9898\u518d\u628a\u8fd9\u4e9b\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u653e\u56de\u4e00\u8d77\u3002 \u9996\u5148\u5e94\u8be5\u660e\u786e\u4e00\u4e2a\u51fd\u6570\u7684\u9ad8\u5c42\u6b21\u76ee\u6807\uff0c\u7136\u540e\u5bf9\u4e8e\u4e0d\u662f\u76f4\u63a5\u4e3a\u4e86\u8fd9\u4e2a\u76ee\u6807\u5de5\u4f5c\u7684\u4ee3\u7801\uff0c\u62bd\u53d6\u51fa\u6765\u653e\u5230\u72ec\u7acb\u7684\u51fd\u6570\u4e2d\u3002 \u4ecb\u7ecd\u6027\u7684\u4ee3\u7801\uff1a int findClostElement(int[] arr) { int clostIdx; int clostDist = Interger.MAX_VALUE; for (int i = 0; i < arr.length; i++) { int x = ...; int y = ...; int z = ...; int value = x * y * z; int dist = Math.sqrt(Math.pow(value, 2), Math.pow(arr[i], 2)); if (dist < clostDist) { clostIdx = i; clostDist = value; } } return clostIdx; } \u4ee5\u4e0a\u4ee3\u7801\u4e2d\u5faa\u73af\u90e8\u5206\u4e3b\u8981\u8ba1\u7b97\u8ddd\u79bb\uff0c\u8fd9\u90e8\u5206\u4e0d\u5c5e\u4e8e\u4ee3\u7801\u9ad8\u5c42\u6b21\u76ee\u6807\uff0c\u9ad8\u5c42\u6b21\u76ee\u6807\u662f\u5bfb\u627e\u6700\u5c0f\u8ddd\u79bb\u7684\u503c\uff0c\u56e0\u6b64\u53ef\u4ee5\u628a\u8fd9\u90e8\u5206\u4ee3\u66ff\u63d0\u53d6\u5230\u72ec\u7acb\u7684\u51fd\u6570\u4e2d\u3002\u8fd9\u6837\u505a\u4e5f\u5e26\u6765\u4e00\u4e2a\u989d\u5916\u7684\u597d\u5904\u6709\uff1a\u53ef\u4ee5\u5355\u72ec\u8fdb\u884c\u6d4b\u8bd5\u3001\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u7a0b\u5e8f\u9519\u8bef\u5e76\u4fee\u6539\u3002 public int findClostElement(int[] arr) { int clostIdx; int clostDist = Interger.MAX_VALUE; for (int i = 0; i < arr.length; i++) { int dist = computDist(arr, i); if (dist < clostDist) { clostIdx = i; clostDist = value; } } return clostIdx; } \u5e76\u4e0d\u662f\u51fd\u6570\u62bd\u53d6\u7684\u8d8a\u591a\u8d8a\u597d\uff0c\u5982\u679c\u62bd\u53d6\u8fc7\u591a\uff0c\u5728\u9605\u8bfb\u4ee3\u7801\u7684\u65f6\u5019\u53ef\u80fd\u9700\u8981\u4e0d\u65ad\u8df3\u6765\u8df3\u53bb\u3002\u53ea\u6709\u5728\u5f53\u524d\u51fd\u6570\u4e0d\u9700\u8981\u53bb\u4e86\u89e3\u67d0\u4e00\u5757\u4ee3\u7801\u7ec6\u8282\u800c\u80fd\u591f\u8868\u8fbe\u5176\u5185\u5bb9\u65f6\uff0c\u628a\u8fd9\u5757\u4ee3\u7801\u62bd\u53d6\u6210\u5b50\u51fd\u6570\u624d\u662f\u597d\u7684\u3002 \u51fd\u6570\u62bd\u53d6\u4e5f\u7528\u4e8e\u51cf\u5c0f\u4ee3\u7801\u7684\u5197\u4f59\u3002","title":"\u5341\u3001\u62bd\u53d6\u51fd\u6570"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_11","text":"\u53ea\u505a\u4e00\u4ef6\u4e8b\u7684\u4ee3\u7801\u5f88\u5bb9\u6613\u8ba9\u4eba\u77e5\u9053\u5176\u8981\u505a\u7684\u4e8b\uff1b \u57fa\u672c\u6d41\u7a0b\uff1a\u5217\u51fa\u4ee3\u7801\u6240\u505a\u7684\u6240\u6709\u4efb\u52a1\uff1b\u628a\u6bcf\u4e2a\u4efb\u52a1\u62c6\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\uff0c\u6216\u8005\u4e0d\u540c\u7684\u6bb5\u843d\u3002","title":"\u5341\u4e00\u3001\u4e00\u6b21\u53ea\u505a\u4e00\u4ef6\u4e8b"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_12","text":"\u5148\u7528\u81ea\u7136\u8bed\u8a00\u4e66\u5199\u4ee3\u7801\u903b\u8f91\uff0c\u4e5f\u5c31\u662f\u4f2a\u4ee3\u7801\uff0c\u7136\u540e\u518d\u5199\u4ee3\u7801\uff0c\u8fd9\u6837\u4ee3\u7801\u903b\u8f91\u4f1a\u66f4\u6e05\u6670\u3002","title":"\u5341\u4e8c\u3001\u7528\u81ea\u7136\u8bed\u8a00\u8868\u8ff0\u4ee3\u7801"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_13","text":"\u4e0d\u8981\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u7f16\u7801\u8fc7\u7a0b\u4f1a\u6709\u5f88\u591a\u53d8\u5316\uff0c\u8fc7\u5ea6\u8bbe\u8ba1\u7684\u5185\u5bb9\u5230\u6700\u540e\u5f80\u5f80\u662f\u65e0\u7528\u7684\u3002 \u591a\u7528\u6807\u51c6\u5e93\u5b9e\u73b0\u3002","title":"\u5341\u4e09\u3001\u51cf\u5c11\u4ee3\u7801\u91cf"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E5%8F%AF%E8%AF%BB%E6%80%A7/#_14","text":"Dustin, Boswell, Trevor, \u7b49. \u7f16\u5199\u53ef\u8bfb\u4ee3\u7801\u7684\u827a\u672f [M]. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2012.","title":"\u53c2\u8003\u8d44\u6599"},{"location":"bbb/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E8%A7%84%E8%8C%83/","text":"Twitter Java Style Guide Google Java Style Guide \u963f\u91cc\u5df4\u5df4Java\u5f00\u53d1\u624b\u518c","title":"\u4ee3\u7801\u98ce\u683c\u89c4\u8303"},{"location":"bbb/%E7%AE%97%E6%B3%95/","text":"\u7b97\u6cd5","title":"\u7b97\u6cd5"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","text":"\u4e00\u3001\u6982\u8ff0 \u4e8c\u3001\u521b\u5efa\u578b 1. \u5355\u4f8b\uff08Singleton\uff09 Intent Class Diagram Implementation Examples JDK 2. \u7b80\u5355\u5de5\u5382\uff08Simple Factory\uff09 Intent Class Diagram Implementation 3. \u5de5\u5382\u65b9\u6cd5\uff08Factory Method\uff09 Intent Class Diagram Implementation JDK 4. \u62bd\u8c61\u5de5\u5382\uff08Abstract Factory\uff09 Intent Class Diagram Implementation JDK 5. \u751f\u6210\u5668\uff08Builder\uff09 Intent Class Diagram Implementation JDK 6. \u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09 Intent Class Diagram Implementation JDK \u4e09\u3001\u884c\u4e3a\u578b 1. \u8d23\u4efb\u94fe\uff08Chain Of Responsibility\uff09 Intent Class Diagram Implementation JDK 2. \u547d\u4ee4\uff08Command\uff09 Intent Class Diagram Implementation JDK 3. \u89e3\u91ca\u5668\uff08Interpreter\uff09 Intent Class Diagram Implementation JDK 4. \u8fed\u4ee3\u5668\uff08Iterator\uff09 Intent Class Diagram Implementation JDK 5. \u4e2d\u4ecb\u8005\uff08Mediator\uff09 Intent Class Diagram Implementation JDK 6. \u5907\u5fd8\u5f55\uff08Memento\uff09 Intent Class Diagram Implementation JDK 7. \u89c2\u5bdf\u8005\uff08Observer\uff09 Intent Class Diagram Implementation JDK 8. \u72b6\u6001\uff08State\uff09 Intent Class Diagram Implementation 9. \u7b56\u7565\uff08Strategy\uff09 Intent Class Diagram \u4e0e\u72b6\u6001\u6a21\u5f0f\u7684\u6bd4\u8f83 Implementation JDK 10. \u6a21\u677f\u65b9\u6cd5\uff08Template Method\uff09 Intent Class Diagram Implementation JDK 11. \u8bbf\u95ee\u8005\uff08Visitor\uff09 Intent Class Diagram Implementation JDK 12. \u7a7a\u5bf9\u8c61\uff08Null\uff09 Intent Class Diagram Implementation \u56db\u3001\u7ed3\u6784\u578b 1. \u9002\u914d\u5668\uff08Adapter\uff09 Intent Class Diagram Implementation JDK 2. \u6865\u63a5\uff08Bridge\uff09 Intent Class Diagram Implementation JDK 3. \u7ec4\u5408\uff08Composite\uff09 Intent Class Diagram Implementation JDK 4. \u88c5\u9970\uff08Decorator\uff09 Intent Class Diagram Implementation \u8bbe\u8ba1\u539f\u5219 JDK 5. \u5916\u89c2\uff08Facade\uff09 Intent Class Diagram Implementation \u8bbe\u8ba1\u539f\u5219 6. \u4eab\u5143\uff08Flyweight\uff09 Intent Class Diagram Implementation JDK 7. \u4ee3\u7406\uff08Proxy\uff09 Intent Class Diagram Implementation JDK \u53c2\u8003\u8d44\u6599 \u4e00\u3001\u6982\u8ff0 \u8bbe\u8ba1\u6a21\u5f0f\u662f\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6848\uff0c\u5b66\u4e60\u73b0\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ef\u4ee5\u505a\u5230\u7ecf\u9a8c\u590d\u7528\u3002 \u62e5\u6709\u8bbe\u8ba1\u6a21\u5f0f\u8bcd\u6c47\uff0c\u5728\u6c9f\u901a\u65f6\u5c31\u80fd\u7528\u66f4\u5c11\u7684\u8bcd\u6c47\u6765\u8ba8\u8bba\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4e86\u89e3\u5e95\u5c42\u7ec6\u8282\u3002 \u4e8c\u3001\u521b\u5efa\u578b 1. \u5355\u4f8b\uff08Singleton\uff09 Intent \u786e\u4fdd\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u8be5\u5b9e\u4f8b\u7684\u5168\u5c40\u8bbf\u95ee\u70b9\u3002 Class Diagram \u4f7f\u7528\u4e00\u4e2a\u79c1\u6709\u6784\u9020\u51fd\u6570\u3001\u4e00\u4e2a\u79c1\u6709\u9759\u6001\u53d8\u91cf\u4ee5\u53ca\u4e00\u4e2a\u516c\u6709\u9759\u6001\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u79c1\u6709\u6784\u9020\u51fd\u6570\u4fdd\u8bc1\u4e86\u4e0d\u80fd\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u53ea\u80fd\u901a\u8fc7\u516c\u6709\u9759\u6001\u51fd\u6570\u8fd4\u56de\u552f\u4e00\u7684\u79c1\u6709\u9759\u6001\u53d8\u91cf\u3002 Implementation \u2160 \u61d2\u6c49\u5f0f-\u7ebf\u7a0b\u4e0d\u5b89\u5168 \u4ee5\u4e0b\u5b9e\u73b0\u4e2d\uff0c\u79c1\u6709\u9759\u6001\u53d8\u91cf uniqueInstance \u88ab\u5ef6\u8fdf\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5230\u8be5\u7c7b\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u5b9e\u4f8b\u5316 uniqueInstance\uff0c\u4ece\u800c\u8282\u7ea6\u8d44\u6e90\u3002 \u8fd9\u4e2a\u5b9e\u73b0\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u80fd\u591f\u540c\u65f6\u8fdb\u5165 if (uniqueInstance == null) \uff0c\u5e76\u4e14\u6b64\u65f6 uniqueInstance \u4e3a null\uff0c\u90a3\u4e48\u4f1a\u6709\u591a\u4e2a\u7ebf\u7a0b\u6267\u884c uniqueInstance = new Singleton(); \u8bed\u53e5\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5b9e\u4f8b\u5316\u591a\u6b21 uniqueInstance\u3002 public class Singleton { private static Singleton uniqueInstance; private Singleton() { } public static Singleton getUniqueInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } } \u2161 \u997f\u6c49\u5f0f-\u7ebf\u7a0b\u5b89\u5168 \u7ebf\u7a0b\u4e0d\u5b89\u5168\u95ee\u9898\u4e3b\u8981\u662f\u7531\u4e8e uniqueInstance \u88ab\u5b9e\u4f8b\u5316\u591a\u6b21\uff0c\u91c7\u53d6\u76f4\u63a5\u5b9e\u4f8b\u5316 uniqueInstance \u7684\u65b9\u5f0f\u5c31\u4e0d\u4f1a\u4ea7\u751f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u95ee\u9898\u3002 \u4f46\u662f\u76f4\u63a5\u5b9e\u4f8b\u5316\u7684\u65b9\u5f0f\u4e5f\u4e22\u5931\u4e86\u5ef6\u8fdf\u5b9e\u4f8b\u5316\u5e26\u6765\u7684\u8282\u7ea6\u8d44\u6e90\u7684\u597d\u5904\u3002 private static Singleton uniqueInstance = new Singleton(); \u2162 \u61d2\u6c49\u5f0f-\u7ebf\u7a0b\u5b89\u5168 \u53ea\u9700\u8981\u5bf9 getUniqueInstance() \u65b9\u6cd5\u52a0\u9501\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8be5\u65b9\u6cd5\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5b9e\u4f8b\u5316\u591a\u6b21 uniqueInstance\u3002 \u4f46\u662f\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u8be5\u65b9\u6cd5\u4e4b\u540e\uff0c\u5176\u5b83\u8bd5\u56fe\u8fdb\u5165\u8be5\u65b9\u6cd5\u7684\u7ebf\u7a0b\u90fd\u5fc5\u987b\u7b49\u5f85\uff0c\u5373\u4f7f uniqueInstance \u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e86\u3002\u8fd9\u4f1a\u8ba9\u7ebf\u7a0b\u963b\u585e\u65f6\u95f4\u8fc7\u957f\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u6709\u6027\u80fd\u95ee\u9898\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u3002 public static synchronized Singleton getUniqueInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } \u2163 \u53cc\u91cd\u6821\u9a8c\u9501-\u7ebf\u7a0b\u5b89\u5168 uniqueInstance \u53ea\u9700\u8981\u88ab\u5b9e\u4f8b\u5316\u4e00\u6b21\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002\u52a0\u9501\u64cd\u4f5c\u53ea\u9700\u8981\u5bf9\u5b9e\u4f8b\u5316\u90a3\u90e8\u5206\u7684\u4ee3\u7801\u8fdb\u884c\uff0c\u53ea\u6709\u5f53 uniqueInstance \u6ca1\u6709\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u624d\u9700\u8981\u8fdb\u884c\u52a0\u9501\u3002 \u53cc\u91cd\u6821\u9a8c\u9501\u5148\u5224\u65ad uniqueInstance \u662f\u5426\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5b9e\u4f8b\u5316\uff0c\u90a3\u4e48\u624d\u5bf9\u5b9e\u4f8b\u5316\u8bed\u53e5\u8fdb\u884c\u52a0\u9501\u3002 public class Singleton { private volatile static Singleton uniqueInstance; private Singleton() { } public static Singleton getUniqueInstance() { if (uniqueInstance == null) { synchronized (Singleton.class) { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } } } return uniqueInstance; } } \u8003\u8651\u4e0b\u9762\u7684\u5b9e\u73b0\uff0c\u4e5f\u5c31\u662f\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a if \u8bed\u53e5\u3002\u5728 uniqueInstance == null \u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u4e86 if \u8bed\u53e5\uff0c\u90a3\u4e48\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u8fdb\u5165 if \u8bed\u53e5\u5757\u5185\u3002\u867d\u7136\u5728 if \u8bed\u53e5\u5757\u5185\u6709\u52a0\u9501\u64cd\u4f5c\uff0c\u4f46\u662f\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6267\u884c uniqueInstance = new Singleton(); \u8fd9\u6761\u8bed\u53e5\uff0c\u53ea\u662f\u5148\u540e\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fdb\u884c\u4e24\u6b21\u5b9e\u4f8b\u5316\u3002\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u53cc\u91cd\u6821\u9a8c\u9501\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u4f7f\u7528\u4e24\u4e2a if \u8bed\u53e5\uff1a\u7b2c\u4e00\u4e2a if \u8bed\u53e5\u7528\u6765\u907f\u514d uniqueInstance \u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684\u52a0\u9501\u64cd\u4f5c\uff0c\u800c\u7b2c\u4e8c\u4e2a if \u8bed\u53e5\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u6240\u4ee5\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0 uniqueInstance == null \u65f6\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fdb\u884c\u5b9e\u4f8b\u5316\u64cd\u4f5c\u3002 if (uniqueInstance == null) { synchronized (Singleton.class) { uniqueInstance = new Singleton(); } } uniqueInstance \u91c7\u7528 volatile \u5173\u952e\u5b57\u4fee\u9970\u4e5f\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c uniqueInstance = new Singleton(); \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662f\u5206\u4e3a\u4e09\u6b65\u6267\u884c\uff1a \u4e3a uniqueInstance \u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u521d\u59cb\u5316 uniqueInstance \u5c06 uniqueInstance \u6307\u5411\u5206\u914d\u7684\u5185\u5b58\u5730\u5740 \u4f46\u662f\u7531\u4e8e JVM \u5177\u6709\u6307\u4ee4\u91cd\u6392\u7684\u7279\u6027\uff0c\u6267\u884c\u987a\u5e8f\u6709\u53ef\u80fd\u53d8\u6210 1>3>2\u3002\u6307\u4ee4\u91cd\u6392\u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u4f46\u662f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u5f97\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0c\u7ebf\u7a0b T 1 \u6267\u884c\u4e86 1 \u548c 3\uff0c\u6b64\u65f6 T 2 \u8c03\u7528 getUniqueInstance() \u540e\u53d1\u73b0 uniqueInstance \u4e0d\u4e3a\u7a7a\uff0c\u56e0\u6b64\u8fd4\u56de uniqueInstance\uff0c\u4f46\u6b64\u65f6 uniqueInstance \u8fd8\u672a\u88ab\u521d\u59cb\u5316\u3002 \u4f7f\u7528 volatile \u53ef\u4ee5\u7981\u6b62 JVM \u7684\u6307\u4ee4\u91cd\u6392\uff0c\u4fdd\u8bc1\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u2164 \u9759\u6001\u5185\u90e8\u7c7b\u5b9e\u73b0 \u5f53 Singleton \u7c7b\u88ab\u52a0\u8f7d\u65f6\uff0c\u9759\u6001\u5185\u90e8\u7c7b SingletonHolder \u6ca1\u6709\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u3002\u53ea\u6709\u5f53\u8c03\u7528 getUniqueInstance() \u65b9\u6cd5\u4ece\u800c\u89e6\u53d1 SingletonHolder.INSTANCE \u65f6 SingletonHolder \u624d\u4f1a\u88ab\u52a0\u8f7d\uff0c\u6b64\u65f6\u521d\u59cb\u5316 INSTANCE \u5b9e\u4f8b\uff0c\u5e76\u4e14 JVM \u80fd\u786e\u4fdd INSTANCE \u53ea\u88ab\u5b9e\u4f8b\u5316\u4e00\u6b21\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u5177\u6709\u5ef6\u8fdf\u521d\u59cb\u5316\u7684\u597d\u5904\uff0c\u800c\u4e14\u7531 JVM \u63d0\u4f9b\u4e86\u5bf9\u7ebf\u7a0b\u5b89\u5168\u7684\u652f\u6301\u3002 public class Singleton { private Singleton() { } private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } public static Singleton getUniqueInstance() { return SingletonHolder.INSTANCE; } } \u2165 \u679a\u4e3e\u5b9e\u73b0 public enum Singleton { INSTANCE; private String objName; public String getObjName() { return objName; } public void setObjName(String objName) { this.objName = objName; } public static void main(String[] args) { // \u5355\u4f8b\u6d4b\u8bd5 Singleton firstSingleton = Singleton.INSTANCE; firstSingleton.setObjName(\"firstName\"); System.out.println(firstSingleton.getObjName()); Singleton secondSingleton = Singleton.INSTANCE; secondSingleton.setObjName(\"secondName\"); System.out.println(firstSingleton.getObjName()); System.out.println(secondSingleton.getObjName()); // \u53cd\u5c04\u83b7\u53d6\u5b9e\u4f8b\u6d4b\u8bd5 try { Singleton[] enumConstants = Singleton.class.getEnumConstants(); for (Singleton enumConstant : enumConstants) { System.out.println(enumConstant.getObjName()); } } catch (Exception e) { e.printStackTrace(); } } } firstName secondName secondName secondName \u8be5\u5b9e\u73b0\u53ef\u4ee5\u9632\u6b62\u53cd\u5c04\u653b\u51fb\u3002\u5728\u5176\u5b83\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7 setAccessible() \u65b9\u6cd5\u53ef\u4ee5\u5c06\u79c1\u6709\u6784\u9020\u51fd\u6570\u7684\u8bbf\u95ee\u7ea7\u522b\u8bbe\u7f6e\u4e3a public\uff0c\u7136\u540e\u8c03\u7528\u6784\u9020\u51fd\u6570\u4ece\u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5982\u679c\u8981\u9632\u6b62\u8fd9\u79cd\u653b\u51fb\uff0c\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u9632\u6b62\u591a\u6b21\u5b9e\u4f8b\u5316\u7684\u4ee3\u7801\u3002\u8be5\u5b9e\u73b0\u662f\u7531 JVM \u4fdd\u8bc1\u53ea\u4f1a\u5b9e\u4f8b\u5316\u4e00\u6b21\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7684\u53cd\u5c04\u653b\u51fb\u3002 \u8be5\u5b9e\u73b0\u5728\u591a\u6b21\u5e8f\u5217\u5316\u548c\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u4e0d\u4f1a\u5f97\u5230\u591a\u4e2a\u5b9e\u4f8b\u3002\u800c\u5176\u5b83\u5b9e\u73b0\u9700\u8981\u4f7f\u7528 transient \u4fee\u9970\u6240\u6709\u5b57\u6bb5\uff0c\u5e76\u4e14\u5b9e\u73b0\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u6cd5\u3002 Examples Logger Classes Configuration Classes Accesing resources in shared mode Factories implemented as Singletons JDK java.lang.Runtime#getRuntime() java.awt.Desktop#getDesktop() java.lang.System#getSecurityManager() 2. \u7b80\u5355\u5de5\u5382\uff08Simple Factory\uff09 Intent \u5728\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u65f6\u4e0d\u5411\u5ba2\u6237\u66b4\u9732\u5185\u90e8\u7ec6\u8282\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u5bf9\u8c61\u7684\u901a\u7528\u63a5\u53e3\u3002 Class Diagram \u7b80\u5355\u5de5\u5382\u628a\u5b9e\u4f8b\u5316\u7684\u64cd\u4f5c\u5355\u72ec\u653e\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u6210\u4e3a\u7b80\u5355\u5de5\u5382\u7c7b\uff0c\u8ba9\u7b80\u5355\u5de5\u5382\u7c7b\u6765\u51b3\u5b9a\u5e94\u8be5\u7528\u54ea\u4e2a\u5177\u4f53\u5b50\u7c7b\u6765\u5b9e\u4f8b\u5316\u3002 \u8fd9\u6837\u505a\u80fd\u628a\u5ba2\u6237\u7c7b\u548c\u5177\u4f53\u5b50\u7c7b\u7684\u5b9e\u73b0\u89e3\u8026\uff0c\u5ba2\u6237\u7c7b\u4e0d\u518d\u9700\u8981\u77e5\u9053\u6709\u54ea\u4e9b\u5b50\u7c7b\u4ee5\u53ca\u5e94\u5f53\u5b9e\u4f8b\u5316\u54ea\u4e2a\u5b50\u7c7b\u3002\u5ba2\u6237\u7c7b\u5f80\u5f80\u6709\u591a\u4e2a\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u7b80\u5355\u5de5\u5382\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5ba2\u6237\u7c7b\u90fd\u8981\u77e5\u9053\u6240\u6709\u5b50\u7c7b\u7684\u7ec6\u8282\u3002\u800c\u4e14\u4e00\u65e6\u5b50\u7c7b\u53d1\u751f\u6539\u53d8\uff0c\u4f8b\u5982\u589e\u52a0\u5b50\u7c7b\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5ba2\u6237\u7c7b\u90fd\u8981\u8fdb\u884c\u4fee\u6539\u3002 Implementation public interface Product { } public class ConcreteProduct implements Product { } public class ConcreteProduct1 implements Product { } public class ConcreteProduct2 implements Product { } \u4ee5\u4e0b\u7684 Client \u7c7b\u5305\u542b\u4e86\u5b9e\u4f8b\u5316\u7684\u4ee3\u7801\uff0c\u8fd9\u662f\u4e00\u79cd\u9519\u8bef\u7684\u5b9e\u73b0\u3002\u5982\u679c\u5728\u5ba2\u6237\u7c7b\u4e2d\u5b58\u5728\u8fd9\u79cd\u5b9e\u4f8b\u5316\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u8003\u8651\u5c06\u4ee3\u7801\u653e\u5230\u7b80\u5355\u5de5\u5382\u4e2d\u3002 public class Client { public static void main(String[] args) { int type = 1; Product product; if (type == 1) { product = new ConcreteProduct1(); } else if (type == 2) { product = new ConcreteProduct2(); } else { product = new ConcreteProduct(); } // do something with the product } } \u4ee5\u4e0b\u7684 SimpleFactory \u662f\u7b80\u5355\u5de5\u5382\u5b9e\u73b0\uff0c\u5b83\u88ab\u6240\u6709\u9700\u8981\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u5ba2\u6237\u7c7b\u8c03\u7528\u3002 public class SimpleFactory { public Product createProduct(int type) { if (type == 1) { return new ConcreteProduct1(); } else if (type == 2) { return new ConcreteProduct2(); } return new ConcreteProduct(); } } public class Client { public static void main(String[] args) { SimpleFactory simpleFactory = new SimpleFactory(); Product product = simpleFactory.createProduct(1); // do something with the product } } 3. \u5de5\u5382\u65b9\u6cd5\uff08Factory Method\uff09 Intent \u5b9a\u4e49\u4e86\u4e00\u4e2a\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u4f46\u7531\u5b50\u7c7b\u51b3\u5b9a\u8981\u5b9e\u4f8b\u5316\u54ea\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u628a\u5b9e\u4f8b\u5316\u64cd\u4f5c\u63a8\u8fdf\u5230\u5b50\u7c7b\u3002 Class Diagram \u5728\u7b80\u5355\u5de5\u5382\u4e2d\uff0c\u521b\u5efa\u5bf9\u8c61\u7684\u662f\u53e6\u4e00\u4e2a\u7c7b\uff0c\u800c\u5728\u5de5\u5382\u65b9\u6cd5\u4e2d\uff0c\u662f\u7531\u5b50\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61\u3002 \u4e0b\u56fe\u4e2d\uff0cFactory \u6709\u4e00\u4e2a doSomething() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u7528\u5230\u4e00\u4e2a\u4ea7\u54c1\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u5bf9\u8c61\u7531 factoryMethod() \u65b9\u6cd5\u521b\u5efa\u3002\u8be5\u65b9\u6cd5\u662f\u62bd\u8c61\u7684\uff0c\u9700\u8981\u7531\u5b50\u7c7b\u53bb\u5b9e\u73b0\u3002 Implementation public abstract class Factory { abstract public Product factoryMethod(); public void doSomething() { Product product = factoryMethod(); // do something with the product } } public class ConcreteFactory extends Factory { public Product factoryMethod() { return new ConcreteProduct(); } } public class ConcreteFactory1 extends Factory { public Product factoryMethod() { return new ConcreteProduct1(); } } public class ConcreteFactory2 extends Factory { public Product factoryMethod() { return new ConcreteProduct2(); } } JDK java.util.Calendar java.util.ResourceBundle java.text.NumberFormat java.nio.charset.Charset java.net.URLStreamHandlerFactory java.util.EnumSet javax.xml.bind.JAXBContext 4. \u62bd\u8c61\u5de5\u5382\uff08Abstract Factory\uff09 Intent \u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\uff0c\u7528\u4e8e\u521b\u5efa \u76f8\u5173\u7684\u5bf9\u8c61\u5bb6\u65cf \u3002 Class Diagram \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u521b\u5efa\u7684\u662f\u5bf9\u8c61\u5bb6\u65cf\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5bf9\u8c61\u662f\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b\u4e00\u8d77\u521b\u5efa\u51fa\u6765\u3002\u800c\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53ea\u662f\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u548c\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u6709\u5f88\u5927\u4e0d\u540c\u3002 \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u7528\u5230\u4e86\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u6765\u521b\u5efa\u5355\u4e00\u5bf9\u8c61\uff0cAbstractFactory \u4e2d\u7684 createProductA() \u548c createProductB() \u65b9\u6cd5\u90fd\u662f\u8ba9\u5b50\u7c7b\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5355\u72ec\u6765\u770b\u5c31\u662f\u5728\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u7b26\u5408\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u7684\u5b9a\u4e49\u3002 \u81f3\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u5bb6\u65cf\u8fd9\u4e00\u6982\u5ff5\u662f\u5728 Client \u4f53\u73b0\uff0cClient \u8981\u901a\u8fc7 AbstractFactory \u540c\u65f6\u8c03\u7528\u4e24\u4e2a\u65b9\u6cd5\u6765\u521b\u5efa\u51fa\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5728\u8fd9\u91cc\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5c31\u6709\u5f88\u5927\u7684\u76f8\u5173\u6027\uff0cClient \u9700\u8981\u540c\u65f6\u521b\u5efa\u51fa\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u3002 \u4ece\u9ad8\u5c42\u6b21\u6765\u770b\uff0c\u62bd\u8c61\u5de5\u5382\u4f7f\u7528\u4e86\u7ec4\u5408\uff0c\u5373 Cilent \u7ec4\u5408\u4e86 AbstractFactory\uff0c\u800c\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u4f7f\u7528\u4e86\u7ee7\u627f\u3002 Implementation public class AbstractProductA { } public class AbstractProductB { } public class ProductA1 extends AbstractProductA { } public class ProductA2 extends AbstractProductA { } public class ProductB1 extends AbstractProductB { } public class ProductB2 extends AbstractProductB { } public abstract class AbstractFactory { abstract AbstractProductA createProductA(); abstract AbstractProductB createProductB(); } public class ConcreteFactory1 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA1(); } AbstractProductB createProductB() { return new ProductB1(); } } public class ConcreteFactory2 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA2(); } AbstractProductB createProductB() { return new ProductB2(); } } public class Client { public static void main(String[] args) { AbstractFactory abstractFactory = new ConcreteFactory1(); AbstractProductA productA = abstractFactory.createProductA(); AbstractProductB productB = abstractFactory.createProductB(); // do something with productA and productB } } JDK javax.xml.parsers.DocumentBuilderFactory javax.xml.transform.TransformerFactory javax.xml.xpath.XPathFactory 5. \u751f\u6210\u5668\uff08Builder\uff09 Intent \u5c01\u88c5\u4e00\u4e2a\u5bf9\u8c61\u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u5e76\u5141\u8bb8\u6309\u6b65\u9aa4\u6784\u9020\u3002 Class Diagram Implementation \u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u6613\u7684 StringBuilder \u5b9e\u73b0\uff0c\u53c2\u8003\u4e86 JDK 1.8 \u6e90\u7801\u3002 public class AbstractStringBuilder { protected char[] value; protected int count; public AbstractStringBuilder(int capacity) { count = 0; value = new char[capacity]; } public AbstractStringBuilder append(char c) { ensureCapacityInternal(count + 1); value[count++] = c; return this; } private void ensureCapacityInternal(int minimumCapacity) { // overflow-conscious code if (minimumCapacity - value.length > 0) expandCapacity(minimumCapacity); } void expandCapacity(int minimumCapacity) { int newCapacity = value.length * 2 + 2; if (newCapacity - minimumCapacity < 0) newCapacity = minimumCapacity; if (newCapacity < 0) { if (minimumCapacity < 0) // overflow throw new OutOfMemoryError(); newCapacity = Integer.MAX_VALUE; } value = Arrays.copyOf(value, newCapacity); } } public class StringBuilder extends AbstractStringBuilder { public StringBuilder() { super(16); } @Override public String toString() { // Create a copy, don't share the array return new String(value, 0, count); } } public class Client { public static void main(String[] args) { StringBuilder sb = new StringBuilder(); final int count = 26; for (int i = 0; i < count; i++) { sb.append((char) ('a' + i)); } System.out.println(sb.toString()); } } abcdefghijklmnopqrstuvwxyz JDK java.lang.StringBuilder java.nio.ByteBuffer java.lang.StringBuffer java.lang.Appendable Apache Camel builders 6. \u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09 Intent \u4f7f\u7528\u539f\u578b\u5b9e\u4f8b\u6307\u5b9a\u8981\u521b\u5efa\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u901a\u8fc7\u590d\u5236\u8fd9\u4e2a\u539f\u578b\u6765\u521b\u5efa\u65b0\u5bf9\u8c61\u3002 Class Diagram Implementation public abstract class Prototype { abstract Prototype myClone(); } public class ConcretePrototype extends Prototype { private String filed; public ConcretePrototype(String filed) { this.filed = filed; } @Override Prototype myClone() { return new ConcretePrototype(filed); } @Override public String toString() { return filed; } } public class Client { public static void main(String[] args) { Prototype prototype = new ConcretePrototype(\"abc\"); Prototype clone = prototype.myClone(); System.out.println(clone.toString()); } } abc JDK java.lang.Object#clone() \u4e09\u3001\u884c\u4e3a\u578b 1. \u8d23\u4efb\u94fe\uff08Chain Of Responsibility\uff09 Intent \u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u53d1\u9001\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002 Class Diagram Handler\uff1a\u5b9a\u4e49\u5904\u7406\u8bf7\u6c42\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u5b9e\u73b0\u540e\u7ee7\u94fe\uff08successor\uff09 Implementation public abstract class Handler { protected Handler successor; public Handler(Handler successor) { this.successor = successor; } protected abstract void handleRequest(Request request); } public class ConcreteHandler1 extends Handler { public ConcreteHandler1(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.getType() == RequestType.TYPE1) { System.out.println(request.getName() + \" is handle by ConcreteHandler1\"); return; } if (successor != null) { successor.handleRequest(request); } } } public class ConcreteHandler2 extends Handler { public ConcreteHandler2(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.getType() == RequestType.TYPE2) { System.out.println(request.getName() + \" is handle by ConcreteHandler2\"); return; } if (successor != null) { successor.handleRequest(request); } } } public class Request { private RequestType type; private String name; public Request(RequestType type, String name) { this.type = type; this.name = name; } public RequestType getType() { return type; } public String getName() { return name; } } public enum RequestType { TYPE1, TYPE2 } public class Client { public static void main(String[] args) { Handler handler1 = new ConcreteHandler1(null); Handler handler2 = new ConcreteHandler2(handler1); Request request1 = new Request(RequestType.TYPE1, \"request1\"); handler2.handleRequest(request1); Request request2 = new Request(RequestType.TYPE2, \"request2\"); handler2.handleRequest(request2); } } request1 is handle by ConcreteHandler1 request2 is handle by ConcreteHandler2 JDK java.util.logging.Logger#log() Apache Commons Chain javax.servlet.Filter#doFilter() 2. \u547d\u4ee4\uff08Command\uff09 Intent \u5c06\u547d\u4ee4\u5c01\u88c5\u6210\u5bf9\u8c61\u4e2d\uff0c\u5177\u6709\u4ee5\u4e0b\u4f5c\u7528\uff1a \u4f7f\u7528\u547d\u4ee4\u6765\u53c2\u6570\u5316\u5176\u5b83\u5bf9\u8c61 \u5c06\u547d\u4ee4\u653e\u5165\u961f\u5217\u4e2d\u8fdb\u884c\u6392\u961f \u5c06\u547d\u4ee4\u7684\u64cd\u4f5c\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d \u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c Class Diagram Command\uff1a\u547d\u4ee4 Receiver\uff1a\u547d\u4ee4\u63a5\u6536\u8005\uff0c\u4e5f\u5c31\u662f\u547d\u4ee4\u771f\u6b63\u7684\u6267\u884c\u8005 Invoker\uff1a\u901a\u8fc7\u5b83\u6765\u8c03\u7528\u547d\u4ee4 Client\uff1a\u53ef\u4ee5\u8bbe\u7f6e\u547d\u4ee4\u4e0e\u547d\u4ee4\u7684\u63a5\u6536\u8005 Implementation \u8bbe\u8ba1\u4e00\u4e2a\u9065\u63a7\u5668\uff0c\u53ef\u4ee5\u63a7\u5236\u7535\u706f\u5f00\u5173\u3002 public interface Command { void execute(); } public class LightOnCommand implements Command { Light light; public LightOnCommand(Light light) { this.light = light; } @Override public void execute() { light.on(); } } public class LightOffCommand implements Command { Light light; public LightOffCommand(Light light) { this.light = light; } @Override public void execute() { light.off(); } } public class Light { public void on() { System.out.println(\"Light is on!\"); } public void off() { System.out.println(\"Light is off!\"); } } /** * \u9065\u63a7\u5668 */ public class Invoker { private Command[] onCommands; private Command[] offCommands; private final int slotNum = 7; public Invoker() { this.onCommands = new Command[slotNum]; this.offCommands = new Command[slotNum]; } public void setOnCommand(Command command, int slot) { onCommands[slot] = command; } public void setOffCommand(Command command, int slot) { offCommands[slot] = command; } public void onButtonWasPushed(int slot) { onCommands[slot].execute(); } public void offButtonWasPushed(int slot) { offCommands[slot].execute(); } } public class Client { public static void main(String[] args) { Invoker invoker = new Invoker(); Light light = new Light(); Command lightOnCommand = new LightOnCommand(light); Command lightOffCommand = new LightOffCommand(light); invoker.setOnCommand(lightOnCommand, 0); invoker.setOffCommand(lightOffCommand, 0); invoker.onButtonWasPushed(0); invoker.offButtonWasPushed(0); } } JDK java.lang.Runnable Netflix Hystrix javax.swing.Action 3. \u89e3\u91ca\u5668\uff08Interpreter\uff09 Intent \u4e3a\u8bed\u8a00\u521b\u5efa\u89e3\u91ca\u5668\uff0c\u901a\u5e38\u7531\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u8bed\u6cd5\u5206\u6790\u6765\u5b9a\u4e49\u3002 Class Diagram TerminalExpression\uff1a\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff0c\u6bcf\u4e2a\u7ec8\u7ed3\u7b26\u90fd\u9700\u8981\u4e00\u4e2a TerminalExpression\u3002 Context\uff1a\u4e0a\u4e0b\u6587\uff0c\u5305\u542b\u89e3\u91ca\u5668\u4e4b\u5916\u7684\u4e00\u4e9b\u5168\u5c40\u4fe1\u606f\u3002 Implementation \u4ee5\u4e0b\u662f\u4e00\u4e2a\u89c4\u5219\u68c0\u9a8c\u5668\u5b9e\u73b0\uff0c\u5177\u6709 and \u548c or \u89c4\u5219\uff0c\u901a\u8fc7\u89c4\u5219\u53ef\u4ee5\u6784\u5efa\u4e00\u9897\u89e3\u6790\u6811\uff0c\u7528\u6765\u68c0\u9a8c\u4e00\u4e2a\u6587\u672c\u662f\u5426\u6ee1\u8db3\u89e3\u6790\u6811\u5b9a\u4e49\u7684\u89c4\u5219\u3002 \u4f8b\u5982\u4e00\u9897\u89e3\u6790\u6811\u4e3a D And (A Or (B C))\uff0c\u6587\u672c \"D A\" \u6ee1\u8db3\u8be5\u89e3\u6790\u6811\u5b9a\u4e49\u7684\u89c4\u5219\u3002 \u8fd9\u91cc\u7684 Context \u6307\u7684\u662f String\u3002 public abstract class Expression { public abstract boolean interpret(String str); } public class TerminalExpression extends Expression { private String literal = null; public TerminalExpression(String str) { literal = str; } public boolean interpret(String str) { StringTokenizer st = new StringTokenizer(str); while (st.hasMoreTokens()) { String test = st.nextToken(); if (test.equals(literal)) { return true; } } return false; } } public class AndExpression extends Expression { private Expression expression1 = null; private Expression expression2 = null; public AndExpression(Expression expression1, Expression expression2) { this.expression1 = expression1; this.expression2 = expression2; } public boolean interpret(String str) { return expression1.interpret(str) && expression2.interpret(str); } } public class OrExpression extends Expression { private Expression expression1 = null; private Expression expression2 = null; public OrExpression(Expression expression1, Expression expression2) { this.expression1 = expression1; this.expression2 = expression2; } public boolean interpret(String str) { return expression1.interpret(str) || expression2.interpret(str); } } public class Client { /** * \u6784\u5efa\u89e3\u6790\u6811 */ public static Expression buildInterpreterTree() { // Literal Expression terminal1 = new TerminalExpression(\"A\"); Expression terminal2 = new TerminalExpression(\"B\"); Expression terminal3 = new TerminalExpression(\"C\"); Expression terminal4 = new TerminalExpression(\"D\"); // B C Expression alternation1 = new OrExpression(terminal2, terminal3); // A Or (B C) Expression alternation2 = new OrExpression(terminal1, alternation1); // D And (A Or (B C)) return new AndExpression(terminal4, alternation2); } public static void main(String[] args) { Expression define = buildInterpreterTree(); String context1 = \"D A\"; String context2 = \"A B\"; System.out.println(define.interpret(context1)); System.out.println(define.interpret(context2)); } } true false JDK java.util.Pattern java.text.Normalizer All subclasses of java.text.Format javax.el.ELResolver 4. \u8fed\u4ee3\u5668\uff08Iterator\uff09 Intent \u63d0\u4f9b\u4e00\u79cd\u987a\u5e8f\u8bbf\u95ee\u805a\u5408\u5bf9\u8c61\u5143\u7d20\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u66b4\u9732\u805a\u5408\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u3002 Class Diagram Aggregate \u662f\u805a\u5408\u7c7b\uff0c\u5176\u4e2d createIterator() \u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a Iterator\uff1b Iterator \u4e3b\u8981\u5b9a\u4e49\u4e86 hasNext() \u548c next() \u65b9\u6cd5\u3002 Client \u7ec4\u5408\u4e86 Aggregate\uff0c\u4e3a\u4e86\u8fed\u4ee3\u904d\u5386 Aggregate\uff0c\u4e5f\u9700\u8981\u7ec4\u5408 Iterator\u3002 Implementation public interface Aggregate { Iterator createIterator(); } public class ConcreteAggregate implements Aggregate { private Integer[] items; public ConcreteAggregate() { items = new Integer[10]; for (int i = 0; i < items.length; i++) { items[i] = i; } } @Override public Iterator createIterator() { return new ConcreteIterator<Integer>(items); } } public interface Iterator<Item> { Item next(); boolean hasNext(); } public class ConcreteIterator<Item> implements Iterator { private Item[] items; private int position = 0; public ConcreteIterator(Item[] items) { this.items = items; } @Override public Object next() { return items[position++]; } @Override public boolean hasNext() { return position < items.length; } } public class Client { public static void main(String[] args) { Aggregate aggregate = new ConcreteAggregate(); Iterator<Integer> iterator = aggregate.createIterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); } } } JDK java.util.Iterator java.util.Enumeration 5. \u4e2d\u4ecb\u8005\uff08Mediator\uff09 Intent \u96c6\u4e2d\u76f8\u5173\u5bf9\u8c61\u4e4b\u95f4\u590d\u6742\u7684\u6c9f\u901a\u548c\u63a7\u5236\u65b9\u5f0f\u3002 Class Diagram Mediator\uff1a\u4e2d\u4ecb\u8005\uff0c\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u7528\u4e8e\u4e0e\u5404\u540c\u4e8b\uff08Colleague\uff09\u5bf9\u8c61\u901a\u4fe1\u3002 Colleague\uff1a\u540c\u4e8b\uff0c\u76f8\u5173\u5bf9\u8c61 Implementation Alarm\uff08\u95f9\u949f\uff09\u3001CoffeePot\uff08\u5496\u5561\u58f6\uff09\u3001Calendar\uff08\u65e5\u5386\uff09\u3001Sprinkler\uff08\u55b7\u5934\uff09\u662f\u4e00\u7ec4\u76f8\u5173\u7684\u5bf9\u8c61\uff0c\u5728\u67d0\u4e2a\u5bf9\u8c61\u7684\u4e8b\u4ef6\u4ea7\u751f\u65f6\u9700\u8981\u53bb\u64cd\u4f5c\u5176\u5b83\u5bf9\u8c61\uff0c\u5f62\u6210\u4e86\u4e0b\u9762\u8fd9\u79cd\u4f9d\u8d56\u7ed3\u6784\uff1a \u4f7f\u7528\u4e2d\u4ecb\u8005\u6a21\u5f0f\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u4f9d\u8d56\u7ed3\u6784\u53d8\u6210\u661f\u5f62\u7ed3\u6784\uff1a public abstract class Colleague { public abstract void onEvent(Mediator mediator); } public class Alarm extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"alarm\"); } public void doAlarm() { System.out.println(\"doAlarm()\"); } } public class CoffeePot extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"coffeePot\"); } public void doCoffeePot() { System.out.println(\"doCoffeePot()\"); } } public class Calender extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"calender\"); } public void doCalender() { System.out.println(\"doCalender()\"); } } public class Sprinkler extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"sprinkler\"); } public void doSprinkler() { System.out.println(\"doSprinkler()\"); } } public abstract class Mediator { public abstract void doEvent(String eventType); } public class ConcreteMediator extends Mediator { private Alarm alarm; private CoffeePot coffeePot; private Calender calender; private Sprinkler sprinkler; public ConcreteMediator(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler) { this.alarm = alarm; this.coffeePot = coffeePot; this.calender = calender; this.sprinkler = sprinkler; } @Override public void doEvent(String eventType) { switch (eventType) { case \"alarm\": doAlarmEvent(); break; case \"coffeePot\": doCoffeePotEvent(); break; case \"calender\": doCalenderEvent(); break; default: doSprinklerEvent(); } } public void doAlarmEvent() { alarm.doAlarm(); coffeePot.doCoffeePot(); calender.doCalender(); sprinkler.doSprinkler(); } public void doCoffeePotEvent() { // ... } public void doCalenderEvent() { // ... } public void doSprinklerEvent() { // ... } } public class Client { public static void main(String[] args) { Alarm alarm = new Alarm(); CoffeePot coffeePot = new CoffeePot(); Calender calender = new Calender(); Sprinkler sprinkler = new Sprinkler(); Mediator mediator = new ConcreteMediator(alarm, coffeePot, calender, sprinkler); // \u95f9\u949f\u4e8b\u4ef6\u5230\u8fbe\uff0c\u8c03\u7528\u4e2d\u4ecb\u8005\u5c31\u53ef\u4ee5\u64cd\u4f5c\u76f8\u5173\u5bf9\u8c61 alarm.onEvent(mediator); } } doAlarm() doCoffeePot() doCalender() doSprinkler() JDK All scheduleXXX() methods of java.util.Timer java.util.concurrent.Executor#execute() submit() and invokeXXX() methods of java.util.concurrent.ExecutorService scheduleXXX() methods of java.util.concurrent.ScheduledExecutorService java.lang.reflect.Method#invoke() 6. \u5907\u5fd8\u5f55\uff08Memento\uff09 Intent \u5728\u4e0d\u8fdd\u53cd\u5c01\u88c5\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4ece\u800c\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u5c06\u5bf9\u8c61\u6062\u590d\u5230\u6700\u521d\u72b6\u6001\u3002 Class Diagram Originator\uff1a\u539f\u59cb\u5bf9\u8c61 Caretaker\uff1a\u8d1f\u8d23\u4fdd\u5b58\u597d\u5907\u5fd8\u5f55 Menento\uff1a\u5907\u5fd8\u5f55\uff0c\u5b58\u50a8\u539f\u59cb\u5bf9\u8c61\u7684\u7684\u72b6\u6001\u3002\u5907\u5fd8\u5f55\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a\u63a5\u53e3\uff0c\u4e00\u4e2a\u662f\u63d0\u4f9b\u7ed9 Caretaker \u7684\u7a84\u63a5\u53e3\uff1a\u5b83\u53ea\u80fd\u5c06\u5907\u5fd8\u5f55\u4f20\u9012\u7ed9\u5176\u5b83\u5bf9\u8c61\uff1b\u4e00\u4e2a\u662f\u63d0\u4f9b\u7ed9 Originator \u7684\u5bbd\u63a5\u53e3\uff0c\u5141\u8bb8\u5b83\u8bbf\u95ee\u5230\u5148\u524d\u72b6\u6001\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u3002\u7406\u60f3\u60c5\u51b5\u662f\u53ea\u5141\u8bb8 Originator \u8bbf\u95ee\u672c\u5907\u5fd8\u5f55\u7684\u5185\u90e8\u72b6\u6001\u3002 Implementation \u4ee5\u4e0b\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u8ba1\u7b97\u5668\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8f93\u5165\u4e24\u4e2a\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e24\u4e2a\u503c\u7684\u548c\u3002\u5907\u5fd8\u5f55\u6a21\u5f0f\u5141\u8bb8\u5c06\u8fd9\u4e24\u4e2a\u503c\u5b58\u50a8\u8d77\u6765\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u65f6\u523b\u7528\u5b58\u50a8\u7684\u72b6\u6001\u8fdb\u884c\u6062\u590d\u3002 \u5b9e\u73b0\u53c2\u8003\uff1a Memento Pattern - Calculator Example - Java Sourcecode /** * Originator Interface */ public interface Calculator { // Create Memento PreviousCalculationToCareTaker backupLastCalculation(); // setMemento void restorePreviousCalculation(PreviousCalculationToCareTaker memento); int getCalculationResult(); void setFirstNumber(int firstNumber); void setSecondNumber(int secondNumber); } /** * Originator Implementation */ public class CalculatorImp implements Calculator { private int firstNumber; private int secondNumber; @Override public PreviousCalculationToCareTaker backupLastCalculation() { // create a memento object used for restoring two numbers return new PreviousCalculationImp(firstNumber, secondNumber); } @Override public void restorePreviousCalculation(PreviousCalculationToCareTaker memento) { this.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber(); this.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber(); } @Override public int getCalculationResult() { // result is adding two numbers return firstNumber + secondNumber; } @Override public void setFirstNumber(int firstNumber) { this.firstNumber = firstNumber; } @Override public void setSecondNumber(int secondNumber) { this.secondNumber = secondNumber; } } /** * Memento Interface to Originator * * This interface allows the originator to restore its state */ public interface PreviousCalculationToOriginator { int getFirstNumber(); int getSecondNumber(); } /** * Memento interface to CalculatorOperator (Caretaker) */ public interface PreviousCalculationToCareTaker { // no operations permitted for the caretaker } /** * Memento Object Implementation * <p> * Note that this object implements both interfaces to Originator and CareTaker */ public class PreviousCalculationImp implements PreviousCalculationToCareTaker, PreviousCalculationToOriginator { private int firstNumber; private int secondNumber; public PreviousCalculationImp(int firstNumber, int secondNumber) { this.firstNumber = firstNumber; this.secondNumber = secondNumber; } @Override public int getFirstNumber() { return firstNumber; } @Override public int getSecondNumber() { return secondNumber; } } /** * CareTaker object */ public class Client { public static void main(String[] args) { // program starts Calculator calculator = new CalculatorImp(); // assume user enters two numbers calculator.setFirstNumber(10); calculator.setSecondNumber(100); // find result System.out.println(calculator.getCalculationResult()); // Store result of this calculation in case of error PreviousCalculationToCareTaker memento = calculator.backupLastCalculation(); // user enters a number calculator.setFirstNumber(17); // user enters a wrong second number and calculates result calculator.setSecondNumber(-290); // calculate result System.out.println(calculator.getCalculationResult()); // user hits CTRL + Z to undo last operation and see last result calculator.restorePreviousCalculation(memento); // result restored System.out.println(calculator.getCalculationResult()); } } 110 -273 110 JDK java.io.Serializable 7. \u89c2\u5bdf\u8005\uff08Observer\uff09 Intent \u5b9a\u4e49\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u5bf9\u591a\u4f9d\u8d56\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u72b6\u6001\u6539\u53d8\u65f6\uff0c\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u90fd\u4f1a\u6536\u5230\u901a\u77e5\u5e76\u4e14\u81ea\u52a8\u66f4\u65b0\u72b6\u6001\u3002 \u4e3b\u9898\uff08Subject\uff09\u662f\u88ab\u89c2\u5bdf\u7684\u5bf9\u8c61\uff0c\u800c\u5176\u6240\u6709\u4f9d\u8d56\u8005\uff08Observer\uff09\u79f0\u4e3a\u89c2\u5bdf\u8005\u3002 Class Diagram \u4e3b\u9898\uff08Subject\uff09\u5177\u6709\u6ce8\u518c\u548c\u79fb\u9664\u89c2\u5bdf\u8005\u3001\u5e76\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u7684\u529f\u80fd\uff0c\u4e3b\u9898\u662f\u901a\u8fc7\u7ef4\u62a4\u4e00\u5f20\u89c2\u5bdf\u8005\u5217\u8868\u6765\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u7684\u3002 \u89c2\u5bdf\u8005\uff08Observer\uff09\u7684\u6ce8\u518c\u529f\u80fd\u9700\u8981\u8c03\u7528\u4e3b\u9898\u7684 registerObserver() \u65b9\u6cd5\u3002 Implementation \u5929\u6c14\u6570\u636e\u5e03\u544a\u677f\u4f1a\u5728\u5929\u6c14\u4fe1\u606f\u53d1\u751f\u6539\u53d8\u65f6\u66f4\u65b0\u5176\u5185\u5bb9\uff0c\u5e03\u544a\u677f\u6709\u591a\u4e2a\uff0c\u5e76\u4e14\u5728\u5c06\u6765\u4f1a\u7ee7\u7eed\u589e\u52a0\u3002 public interface Subject { void registerObserver(Observer o); void removeObserver(Observer o); void notifyObserver(); } public class WeatherData implements Subject { private List<Observer> observers; private float temperature; private float humidity; private float pressure; public WeatherData() { observers = new ArrayList<>(); } public void setMeasurements(float temperature, float humidity, float pressure) { this.temperature = temperature; this.humidity = humidity; this.pressure = pressure; notifyObserver(); } @Override public void registerObserver(Observer o) { observers.add(o); } @Override public void removeObserver(Observer o) { int i = observers.indexOf(o); if (i >= 0) { observers.remove(i); } } @Override public void notifyObserver() { for (Observer o : observers) { o.update(temperature, humidity, pressure); } } } public interface Observer { void update(float temp, float humidity, float pressure); } public class StatisticsDisplay implements Observer { public StatisticsDisplay(Subject weatherData) { weatherData.reisterObserver(this); } @Override public void update(float temp, float humidity, float pressure) { System.out.println(\"StatisticsDisplay.update: \" + temp + \" \" + humidity + \" \" + pressure); } } public class CurrentConditionsDisplay implements Observer { public CurrentConditionsDisplay(Subject weatherData) { weatherData.registerObserver(this); } @Override public void update(float temp, float humidity, float pressure) { System.out.println(\"CurrentConditionsDisplay.update: \" + temp + \" \" + humidity + \" \" + pressure); } } public class WeatherStation { public static void main(String[] args) { WeatherData weatherData = new WeatherData(); CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData); StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData); weatherData.setMeasurements(0, 0, 0); weatherData.setMeasurements(1, 1, 1); } } CurrentConditionsDisplay.update: 0.0 0.0 0.0 StatisticsDisplay.update: 0.0 0.0 0.0 CurrentConditionsDisplay.update: 1.0 1.0 1.0 StatisticsDisplay.update: 1.0 1.0 1.0 JDK java.util.Observer java.util.EventListener javax.servlet.http.HttpSessionBindingListener RxJava 8. \u72b6\u6001\uff08State\uff09 Intent \u5141\u8bb8\u5bf9\u8c61\u5728\u5185\u90e8\u72b6\u6001\u6539\u53d8\u65f6\u6539\u53d8\u5b83\u7684\u884c\u4e3a\uff0c\u5bf9\u8c61\u770b\u8d77\u6765\u597d\u50cf\u4fee\u6539\u4e86\u5b83\u6240\u5c5e\u7684\u7c7b\u3002 Class Diagram Implementation \u7cd6\u679c\u9500\u552e\u673a\u6709\u591a\u79cd\u72b6\u6001\uff0c\u6bcf\u79cd\u72b6\u6001\u4e0b\u9500\u552e\u673a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u72b6\u6001\u53ef\u4ee5\u53d1\u751f\u8f6c\u79fb\uff0c\u4f7f\u5f97\u9500\u552e\u673a\u7684\u884c\u4e3a\u4e5f\u53d1\u751f\u6539\u53d8\u3002 public interface State { /** * \u6295\u5165 25 \u5206\u94b1 */ void insertQuarter(); /** * \u9000\u56de 25 \u5206\u94b1 */ void ejectQuarter(); /** * \u8f6c\u52a8\u66f2\u67c4 */ void turnCrank(); /** * \u53d1\u653e\u7cd6\u679c */ void dispense(); } public class HasQuarterState implements State { private GumballMachine gumballMachine; public HasQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You can't insert another quarter\"); } @Override public void ejectQuarter() { System.out.println(\"Quarter returned\"); gumballMachine.setState(gumballMachine.getNoQuarterState()); } @Override public void turnCrank() { System.out.println(\"You turned...\"); gumballMachine.setState(gumballMachine.getSoldState()); } @Override public void dispense() { System.out.println(\"No gumball dispensed\"); } } public class NoQuarterState implements State { GumballMachine gumballMachine; public NoQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You insert a quarter\"); gumballMachine.setState(gumballMachine.getHasQuarterState()); } @Override public void ejectQuarter() { System.out.println(\"You haven't insert a quarter\"); } @Override public void turnCrank() { System.out.println(\"You turned, but there's no quarter\"); } @Override public void dispense() { System.out.println(\"You need to pay first\"); } } public class SoldOutState implements State { GumballMachine gumballMachine; public SoldOutState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You can't insert a quarter, the machine is sold out\"); } @Override public void ejectQuarter() { System.out.println(\"You can't eject, you haven't inserted a quarter yet\"); } @Override public void turnCrank() { System.out.println(\"You turned, but there are no gumballs\"); } @Override public void dispense() { System.out.println(\"No gumball dispensed\"); } } public class SoldState implements State { GumballMachine gumballMachine; public SoldState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"Please wait, we're already giving you a gumball\"); } @Override public void ejectQuarter() { System.out.println(\"Sorry, you already turned the crank\"); } @Override public void turnCrank() { System.out.println(\"Turning twice doesn't get you another gumball!\"); } @Override public void dispense() { gumballMachine.releaseBall(); if (gumballMachine.getCount() > 0) { gumballMachine.setState(gumballMachine.getNoQuarterState()); } else { System.out.println(\"Oops, out of gumballs\"); gumballMachine.setState(gumballMachine.getSoldOutState()); } } } public class GumballMachine { private State soldOutState; private State noQuarterState; private State hasQuarterState; private State soldState; private State state; private int count = 0; public GumballMachine(int numberGumballs) { count = numberGumballs; soldOutState = new SoldOutState(this); noQuarterState = new NoQuarterState(this); hasQuarterState = new HasQuarterState(this); soldState = new SoldState(this); if (numberGumballs > 0) { state = noQuarterState; } else { state = soldOutState; } } public void insertQuarter() { state.insertQuarter(); } public void ejectQuarter() { state.ejectQuarter(); } public void turnCrank() { state.turnCrank(); state.dispense(); } public void setState(State state) { this.state = state; } public void releaseBall() { System.out.println(\"A gumball comes rolling out the slot...\"); if (count != 0) { count -= 1; } } public State getSoldOutState() { return soldOutState; } public State getNoQuarterState() { return noQuarterState; } public State getHasQuarterState() { return hasQuarterState; } public State getSoldState() { return soldState; } public int getCount() { return count; } } public class Client { public static void main(String[] args) { GumballMachine gumballMachine = new GumballMachine(5); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.ejectQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.ejectQuarter(); gumballMachine.insertQuarter(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); } } You insert a quarter You turned... A gumball comes rolling out the slot... You insert a quarter Quarter returned You turned, but there's no quarter You need to pay first You insert a quarter You turned... A gumball comes rolling out the slot... You insert a quarter You turned... A gumball comes rolling out the slot... You haven't insert a quarter You insert a quarter You can't insert another quarter You turned... A gumball comes rolling out the slot... You insert a quarter You turned... A gumball comes rolling out the slot... Oops, out of gumballs You can't insert a quarter, the machine is sold out You turned, but there are no gumballs No gumball dispensed 9. \u7b56\u7565\uff08Strategy\uff09 Intent \u5b9a\u4e49\u4e00\u7cfb\u5217\u7b97\u6cd5\uff0c\u5c01\u88c5\u6bcf\u4e2a\u7b97\u6cd5\uff0c\u5e76\u4f7f\u5b83\u4eec\u53ef\u4ee5\u4e92\u6362\u3002 \u7b56\u7565\u6a21\u5f0f\u53ef\u4ee5\u8ba9\u7b97\u6cd5\u72ec\u7acb\u4e8e\u4f7f\u7528\u5b83\u7684\u5ba2\u6237\u7aef\u3002 Class Diagram Strategy \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b97\u6cd5\u65cf\uff0c\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86 behavior() \u65b9\u6cd5\u3002 Context \u662f\u4f7f\u7528\u5230\u8be5\u7b97\u6cd5\u65cf\u7684\u7c7b\uff0c\u5176\u4e2d\u7684 doSomething() \u65b9\u6cd5\u4f1a\u8c03\u7528 behavior()\uff0csetStrategy(Strategy) \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u5730\u6539\u53d8 strategy \u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u80fd\u52a8\u6001\u5730\u6539\u53d8 Context \u6240\u4f7f\u7528\u7684\u7b97\u6cd5\u3002 \u4e0e\u72b6\u6001\u6a21\u5f0f\u7684\u6bd4\u8f83 \u72b6\u6001\u6a21\u5f0f\u7684\u7c7b\u56fe\u548c\u7b56\u7565\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u5e76\u4e14\u90fd\u662f\u80fd\u591f\u52a8\u6001\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\u3002\u4f46\u662f\u72b6\u6001\u6a21\u5f0f\u662f\u901a\u8fc7\u72b6\u6001\u8f6c\u79fb\u6765\u6539\u53d8 Context \u6240\u7ec4\u5408\u7684 State \u5bf9\u8c61\uff0c\u800c\u7b56\u7565\u6a21\u5f0f\u662f\u901a\u8fc7 Context \u672c\u8eab\u7684\u51b3\u7b56\u6765\u6539\u53d8\u7ec4\u5408\u7684 Strategy \u5bf9\u8c61\u3002\u6240\u8c13\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u662f\u6307 Context \u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7531\u4e8e\u4e00\u4e9b\u6761\u4ef6\u53d1\u751f\u6539\u53d8\u800c\u4f7f\u5f97 State \u5bf9\u8c61\u53d1\u751f\u6539\u53d8\uff0c\u6ce8\u610f\u5fc5\u987b\u8981\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u3002 \u72b6\u6001\u6a21\u5f0f\u4e3b\u8981\u662f\u7528\u6765\u89e3\u51b3\u72b6\u6001\u8f6c\u79fb\u7684\u95ee\u9898\uff0c\u5f53\u72b6\u6001\u53d1\u751f\u8f6c\u79fb\u4e86\uff0c\u90a3\u4e48 Context \u5bf9\u8c61\u5c31\u4f1a\u6539\u53d8\u5b83\u7684\u884c\u4e3a\uff1b\u800c\u7b56\u7565\u6a21\u5f0f\u4e3b\u8981\u662f\u7528\u6765\u5c01\u88c5\u4e00\u7ec4\u53ef\u4ee5\u4e92\u76f8\u66ff\u4ee3\u7684\u7b97\u6cd5\u65cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u9700\u8981\u52a8\u6001\u5730\u53bb\u66ff\u6362 Context \u4f7f\u7528\u7684\u7b97\u6cd5\u3002 Implementation \u8bbe\u8ba1\u4e00\u4e2a\u9e2d\u5b50\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u6539\u53d8\u53eb\u58f0\u3002\u8fd9\u91cc\u7684\u7b97\u6cd5\u65cf\u662f\u9e2d\u5b50\u7684\u53eb\u58f0\u884c\u4e3a\u3002 public interface QuackBehavior { void quack(); } public class Quack implements QuackBehavior { @Override public void quack() { System.out.println(\"quack!\"); } } public class Squeak implements QuackBehavior{ @Override public void quack() { System.out.println(\"squeak!\"); } } public class Duck { private QuackBehavior quackBehavior; public void performQuack() { if (quackBehavior != null) { quackBehavior.quack(); } } public void setQuackBehavior(QuackBehavior quackBehavior) { this.quackBehavior = quackBehavior; } } public class Client { public static void main(String[] args) { Duck duck = new Duck(); duck.setQuackBehavior(new Squeak()); duck.performQuack(); duck.setQuackBehavior(new Quack()); duck.performQuack(); } } squeak! quack! JDK java.util.Comparator#compare() javax.servlet.http.HttpServlet javax.servlet.Filter#doFilter() 10. \u6a21\u677f\u65b9\u6cd5\uff08Template Method\uff09 Intent \u5b9a\u4e49\u7b97\u6cd5\u6846\u67b6\uff0c\u5e76\u5c06\u4e00\u4e9b\u6b65\u9aa4\u7684\u5b9e\u73b0\u5ef6\u8fdf\u5230\u5b50\u7c7b\u3002 \u901a\u8fc7\u6a21\u677f\u65b9\u6cd5\uff0c\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u7b97\u6cd5\u7684\u67d0\u4e9b\u6b65\u9aa4\uff0c\u800c\u4e0d\u7528\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u3002 Class Diagram Implementation \u51b2\u5496\u5561\u548c\u51b2\u8336\u90fd\u6709\u7c7b\u4f3c\u7684\u6d41\u7a0b\uff0c\u4f46\u662f\u67d0\u4e9b\u6b65\u9aa4\u4f1a\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u8981\u6c42\u590d\u7528\u90a3\u4e9b\u76f8\u540c\u6b65\u9aa4\u7684\u4ee3\u7801\u3002 public abstract class CaffeineBeverage { final void prepareRecipe() { boilWater(); brew(); pourInCup(); addCondiments(); } abstract void brew(); abstract void addCondiments(); void boilWater() { System.out.println(\"boilWater\"); } void pourInCup() { System.out.println(\"pourInCup\"); } } public class Coffee extends CaffeineBeverage { @Override void brew() { System.out.println(\"Coffee.brew\"); } @Override void addCondiments() { System.out.println(\"Coffee.addCondiments\"); } } public class Tea extends CaffeineBeverage { @Override void brew() { System.out.println(\"Tea.brew\"); } @Override void addCondiments() { System.out.println(\"Tea.addCondiments\"); } } public class Client { public static void main(String[] args) { CaffeineBeverage caffeineBeverage = new Coffee(); caffeineBeverage.prepareRecipe(); System.out.println(\"-----------\"); caffeineBeverage = new Tea(); caffeineBeverage.prepareRecipe(); } } boilWater Coffee.brew pourInCup Coffee.addCondiments ----------- boilWater Tea.brew pourInCup Tea.addCondiments JDK java.util.Collections#sort() java.io.InputStream#skip() java.io.InputStream#read() java.util.AbstractList#indexOf() 11. \u8bbf\u95ee\u8005\uff08Visitor\uff09 Intent \u4e3a\u4e00\u4e2a\u5bf9\u8c61\u7ed3\u6784\uff08\u6bd4\u5982\u7ec4\u5408\u7ed3\u6784\uff09\u589e\u52a0\u65b0\u80fd\u529b\u3002 Class Diagram Visitor\uff1a\u8bbf\u95ee\u8005\uff0c\u4e3a\u6bcf\u4e00\u4e2a ConcreteElement \u58f0\u660e\u4e00\u4e2a visit \u64cd\u4f5c ConcreteVisitor\uff1a\u5177\u4f53\u8bbf\u95ee\u8005\uff0c\u5b58\u50a8\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u7d2f\u8ba1\u7ed3\u679c ObjectStructure\uff1a\u5bf9\u8c61\u7ed3\u6784\uff0c\u53ef\u4ee5\u662f\u7ec4\u5408\u7ed3\u6784\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u96c6\u5408\u3002 Implementation public interface Element { void accept(Visitor visitor); } class CustomerGroup { private List<Customer> customers = new ArrayList<>(); void accept(Visitor visitor) { for (Customer customer : customers) { customer.accept(visitor); } } void addCustomer(Customer customer) { customers.add(customer); } } public class Customer implements Element { private String name; private List<Order> orders = new ArrayList<>(); Customer(String name) { this.name = name; } String getName() { return name; } void addOrder(Order order) { orders.add(order); } public void accept(Visitor visitor) { visitor.visit(this); for (Order order : orders) { order.accept(visitor); } } } public class Order implements Element { private String name; private List<Item> items = new ArrayList(); Order(String name) { this.name = name; } Order(String name, String itemName) { this.name = name; this.addItem(new Item(itemName)); } String getName() { return name; } void addItem(Item item) { items.add(item); } public void accept(Visitor visitor) { visitor.visit(this); for (Item item : items) { item.accept(visitor); } } } public class Item implements Element { private String name; Item(String name) { this.name = name; } String getName() { return name; } public void accept(Visitor visitor) { visitor.visit(this); } } public interface Visitor { void visit(Customer customer); void visit(Order order); void visit(Item item); } public class GeneralReport implements Visitor { private int customersNo; private int ordersNo; private int itemsNo; public void visit(Customer customer) { System.out.println(customer.getName()); customersNo++; } public void visit(Order order) { System.out.println(order.getName()); ordersNo++; } public void visit(Item item) { System.out.println(item.getName()); itemsNo++; } public void displayResults() { System.out.println(\"Number of customers: \" + customersNo); System.out.println(\"Number of orders: \" + ordersNo); System.out.println(\"Number of items: \" + itemsNo); } } public class Client { public static void main(String[] args) { Customer customer1 = new Customer(\"customer1\"); customer1.addOrder(new Order(\"order1\", \"item1\")); customer1.addOrder(new Order(\"order2\", \"item1\")); customer1.addOrder(new Order(\"order3\", \"item1\")); Order order = new Order(\"order_a\"); order.addItem(new Item(\"item_a1\")); order.addItem(new Item(\"item_a2\")); order.addItem(new Item(\"item_a3\")); Customer customer2 = new Customer(\"customer2\"); customer2.addOrder(order); CustomerGroup customers = new CustomerGroup(); customers.addCustomer(customer1); customers.addCustomer(customer2); GeneralReport visitor = new GeneralReport(); customers.accept(visitor); visitor.displayResults(); } } customer1 order1 item1 order2 item1 order3 item1 customer2 order_a item_a1 item_a2 item_a3 Number of customers: 2 Number of orders: 4 Number of items: 6 JDK javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor 12. \u7a7a\u5bf9\u8c61\uff08Null\uff09 Intent \u4f7f\u7528\u4ec0\u4e48\u90fd\u4e0d\u505a\u7684\u7a7a\u5bf9\u8c61\u6765\u4ee3\u66ff NULL\u3002 \u4e00\u4e2a\u65b9\u6cd5\u8fd4\u56de NULL\uff0c\u610f\u5473\u7740\u65b9\u6cd5\u7684\u8c03\u7528\u7aef\u9700\u8981\u53bb\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u662f NULL\uff0c\u8fd9\u4e48\u505a\u4f1a\u5bfc\u81f4\u975e\u5e38\u591a\u7684\u5197\u4f59\u7684\u68c0\u67e5\u4ee3\u7801\u3002\u5e76\u4e14\u5982\u679c\u67d0\u4e00\u4e2a\u8c03\u7528\u7aef\u5fd8\u8bb0\u4e86\u505a\u8fd9\u4e2a\u68c0\u67e5\u8fd4\u56de\u503c\uff0c\u800c\u76f4\u63a5\u4f7f\u7528\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\u3002 Class Diagram Implementation public abstract class AbstractOperation { abstract void request(); } public class RealOperation extends AbstractOperation { @Override void request() { System.out.println(\"do something\"); } } public class NullOperation extends AbstractOperation{ @Override void request() { // do nothing } } public class Client { public static void main(String[] args) { AbstractOperation abstractOperation = func(-1); abstractOperation.request(); } public static AbstractOperation func(int para) { if (para < 0) { return new NullOperation(); } return new RealOperation(); } } \u56db\u3001\u7ed3\u6784\u578b 1. \u9002\u914d\u5668\uff08Adapter\uff09 Intent \u628a\u4e00\u4e2a\u7c7b\u63a5\u53e3\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u7528\u6237\u9700\u8981\u7684\u63a5\u53e3\u3002 Class Diagram Implementation \u9e2d\u5b50\uff08Duck\uff09\u548c\u706b\u9e21\uff08Turkey\uff09\u62e5\u6709\u4e0d\u540c\u7684\u53eb\u58f0\uff0cDuck \u7684\u53eb\u58f0\u8c03\u7528 quack() \u65b9\u6cd5\uff0c\u800c Turkey \u8c03\u7528 gobble() \u65b9\u6cd5\u3002 \u8981\u6c42\u5c06 Turkey \u7684 gobble() \u65b9\u6cd5\u9002\u914d\u6210 Duck \u7684 quack() \u65b9\u6cd5\uff0c\u4ece\u800c\u8ba9\u706b\u9e21\u5192\u5145\u9e2d\u5b50\uff01 public interface Duck { void quack(); } public interface Turkey { void gobble(); } public class WildTurkey implements Turkey { @Override public void gobble() { System.out.println(\"gobble!\"); } } public class TurkeyAdapter implements Duck { Turkey turkey; public TurkeyAdapter(Turkey turkey) { this.turkey = turkey; } @Override public void quack() { turkey.gobble(); } } public class Client { public static void main(String[] args) { Turkey turkey = new WildTurkey(); Duck duck = new TurkeyAdapter(turkey); duck.quack(); } } JDK java.util.Arrays#asList() java.util.Collections#list() java.util.Collections#enumeration() javax.xml.bind.annotation.adapters.XMLAdapter 2. \u6865\u63a5\uff08Bridge\uff09 Intent \u5c06\u62bd\u8c61\u4e0e\u5b9e\u73b0\u5206\u79bb\u5f00\u6765\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002 Class Diagram Abstraction\uff1a\u5b9a\u4e49\u62bd\u8c61\u7c7b\u7684\u63a5\u53e3 Implementor\uff1a\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u63a5\u53e3 Implementation RemoteControl \u8868\u793a\u9065\u63a7\u5668\uff0c\u6307\u4ee3 Abstraction\u3002 TV \u8868\u793a\u7535\u89c6\uff0c\u6307\u4ee3 Implementor\u3002 \u6865\u63a5\u6a21\u5f0f\u5c06\u9065\u63a7\u5668\u548c\u7535\u89c6\u5206\u79bb\u5f00\u6765\uff0c\u4ece\u800c\u53ef\u4ee5\u72ec\u7acb\u6539\u53d8\u9065\u63a7\u5668\u6216\u8005\u7535\u89c6\u7684\u5b9e\u73b0\u3002 public abstract class TV { public abstract void on(); public abstract void off(); public abstract void tuneChannel(); } public class Sony extends TV { @Override public void on() { System.out.println(\"Sony.on()\"); } @Override public void off() { System.out.println(\"Sony.off()\"); } @Override public void tuneChannel() { System.out.println(\"Sony.tuneChannel()\"); } } public class RCA extends TV { @Override public void on() { System.out.println(\"RCA.on()\"); } @Override public void off() { System.out.println(\"RCA.off()\"); } @Override public void tuneChannel() { System.out.println(\"RCA.tuneChannel()\"); } } public abstract class RemoteControl { protected TV tv; public RemoteControl(TV tv) { this.tv = tv; } public abstract void on(); public abstract void off(); public abstract void tuneChannel(); } public class ConcreteRemoteControl1 extends RemoteControl { public ConcreteRemoteControl1(TV tv) { super(tv); } @Override public void on() { System.out.println(\"ConcreteRemoteControl1.on()\"); tv.on(); } @Override public void off() { System.out.println(\"ConcreteRemoteControl1.off()\"); tv.off(); } @Override public void tuneChannel() { System.out.println(\"ConcreteRemoteControl1.tuneChannel()\"); tv.tuneChannel(); } } public class ConcreteRemoteControl2 extends RemoteControl { public ConcreteRemoteControl2(TV tv) { super(tv); } @Override public void on() { System.out.println(\"ConcreteRemoteControl2.on()\"); tv.on(); } @Override public void off() { System.out.println(\"ConcreteRemoteControl2.off()\"); tv.off(); } @Override public void tuneChannel() { System.out.println(\"ConcreteRemoteControl2.tuneChannel()\"); tv.tuneChannel(); } } public class Client { public static void main(String[] args) { RemoteControl remoteControl1 = new ConcreteRemoteControl1(new RCA()); remoteControl1.on(); remoteControl1.off(); remoteControl1.tuneChannel(); RemoteControl remoteControl2 = new ConcreteRemoteControl2(new Sony()); remoteControl2.on(); remoteControl2.off(); remoteControl2.tuneChannel(); } } JDK AWT (It provides an abstraction layer which maps onto the native OS the windowing support.) JDBC 3. \u7ec4\u5408\uff08Composite\uff09 Intent \u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u6765\u8868\u793a\u201c\u6574\u4f53/\u90e8\u5206\u201d\u5c42\u6b21\u5173\u7cfb\uff0c\u5141\u8bb8\u7528\u6237\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5355\u72ec\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u3002 Class Diagram \u7ec4\u4ef6\uff08Component\uff09\u7c7b\u662f\u7ec4\u5408\u7c7b\uff08Composite\uff09\u548c\u53f6\u5b50\u7c7b\uff08Leaf\uff09\u7684\u7236\u7c7b\uff0c\u53ef\u4ee5\u628a\u7ec4\u5408\u7c7b\u770b\u6210\u662f\u6811\u7684\u4e2d\u95f4\u8282\u70b9\u3002 \u7ec4\u5408\u5bf9\u8c61\u62e5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7ec4\u4ef6\u5bf9\u8c61\uff0c\u56e0\u6b64\u7ec4\u5408\u5bf9\u8c61\u7684\u64cd\u4f5c\u53ef\u4ee5\u59d4\u6258\u7ed9\u7ec4\u4ef6\u5bf9\u8c61\u53bb\u5904\u7406\uff0c\u800c\u7ec4\u4ef6\u5bf9\u8c61\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u7ec4\u5408\u5bf9\u8c61\u6216\u8005\u53f6\u5b50\u5bf9\u8c61\u3002 Implementation public abstract class Component { protected String name; public Component(String name) { this.name = name; } public void print() { print(0); } abstract void print(int level); abstract public void add(Component component); abstract public void remove(Component component); } public class Composite extends Component { private List<Component> child; public Composite(String name) { super(name); child = new ArrayList<>(); } @Override void print(int level) { for (int i = 0; i < level; i++) { System.out.print(\"--\"); } System.out.println(\"Composite:\" + name); for (Component component : child) { component.print(level + 1); } } @Override public void add(Component component) { child.add(component); } @Override public void remove(Component component) { child.remove(component); } } public class Leaf extends Component { public Leaf(String name) { super(name); } @Override void print(int level) { for (int i = 0; i < level; i++) { System.out.print(\"--\"); } System.out.println(\"left:\" + name); } @Override public void add(Component component) { throw new UnsupportedOperationException(); // \u727a\u7272\u900f\u660e\u6027\u6362\u53d6\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u662f\u53f6\u5b50\u8282\u70b9\u8fd8\u662f\u7ec4\u5408\u8282\u70b9 } @Override public void remove(Component component) { throw new UnsupportedOperationException(); } } public class Client { public static void main(String[] args) { Composite root = new Composite(\"root\"); Component node1 = new Leaf(\"1\"); Component node2 = new Composite(\"2\"); Component node3 = new Leaf(\"3\"); root.add(node1); root.add(node2); root.add(node3); Component node21 = new Leaf(\"21\"); Component node22 = new Composite(\"22\"); node2.add(node21); node2.add(node22); Component node221 = new Leaf(\"221\"); node22.add(node221); root.print(); } } Composite:root --left:1 --Composite:2 ----left:21 ----Composite:22 ------left:221 --left:3 JDK javax.swing.JComponent#add(Component) java.awt.Container#add(Component) java.util.Map#putAll(Map) java.util.List#addAll(Collection) java.util.Set#addAll(Collection) 4. \u88c5\u9970\uff08Decorator\uff09 Intent \u4e3a\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u529f\u80fd\u3002 Class Diagram \u88c5\u9970\u8005\uff08Decorator\uff09\u548c\u5177\u4f53\u7ec4\u4ef6\uff08ConcreteComponent\uff09\u90fd\u7ee7\u627f\u81ea\u7ec4\u4ef6\uff08Component\uff09\uff0c\u5177\u4f53\u7ec4\u4ef6\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u9700\u8981\u4f9d\u8d56\u4e8e\u5176\u5b83\u5bf9\u8c61\uff0c\u800c\u88c5\u9970\u8005\u7ec4\u5408\u4e86\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u8fd9\u6837\u5b83\u53ef\u4ee5\u88c5\u9970\u5176\u5b83\u88c5\u9970\u8005\u6216\u8005\u5177\u4f53\u7ec4\u4ef6\u3002\u6240\u8c13\u88c5\u9970\uff0c\u5c31\u662f\u628a\u8fd9\u4e2a\u88c5\u9970\u8005\u5957\u5728\u88ab\u88c5\u9970\u8005\u4e4b\u4e0a\uff0c\u4ece\u800c\u52a8\u6001\u6269\u5c55\u88ab\u88c5\u9970\u8005\u7684\u529f\u80fd\u3002\u88c5\u9970\u8005\u7684\u65b9\u6cd5\u6709\u4e00\u90e8\u5206\u662f\u81ea\u5df1\u7684\uff0c\u8fd9\u5c5e\u4e8e\u5b83\u7684\u529f\u80fd\uff0c\u7136\u540e\u8c03\u7528\u88ab\u88c5\u9970\u8005\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u4ece\u800c\u4e5f\u4fdd\u7559\u4e86\u88ab\u88c5\u9970\u8005\u7684\u529f\u80fd\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5177\u4f53\u7ec4\u4ef6\u5e94\u5f53\u662f\u88c5\u9970\u5c42\u6b21\u7684\u6700\u4f4e\u5c42\uff0c\u56e0\u4e3a\u53ea\u6709\u5177\u4f53\u7ec4\u4ef6\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u9700\u8981\u4f9d\u8d56\u4e8e\u5176\u5b83\u5bf9\u8c61\u3002 Implementation \u8bbe\u8ba1\u4e0d\u540c\u79cd\u7c7b\u7684\u996e\u6599\uff0c\u996e\u6599\u53ef\u4ee5\u6dfb\u52a0\u914d\u6599\uff0c\u6bd4\u5982\u53ef\u4ee5\u6dfb\u52a0\u725b\u5976\uff0c\u5e76\u4e14\u652f\u6301\u52a8\u6001\u6dfb\u52a0\u65b0\u914d\u6599\u3002\u6bcf\u589e\u52a0\u4e00\u79cd\u914d\u6599\uff0c\u8be5\u996e\u6599\u7684\u4ef7\u683c\u5c31\u4f1a\u589e\u52a0\uff0c\u8981\u6c42\u8ba1\u7b97\u4e00\u79cd\u996e\u6599\u7684\u4ef7\u683c\u3002 \u4e0b\u56fe\u8868\u793a\u5728 DarkRoast \u996e\u6599\u4e0a\u65b0\u589e\u65b0\u6dfb\u52a0 Mocha \u914d\u6599\uff0c\u4e4b\u540e\u53c8\u6dfb\u52a0\u4e86 Whip \u914d\u6599\u3002DarkRoast \u88ab Mocha \u5305\u88f9\uff0cMocha \u53c8\u88ab Whip \u5305\u88f9\u3002\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\u76f8\u540c\u7236\u7c7b\uff0c\u90fd\u6709 cost() \u65b9\u6cd5\uff0c\u5916\u5c42\u7c7b\u7684 cost() \u65b9\u6cd5\u8c03\u7528\u4e86\u5185\u5c42\u7c7b\u7684 cost() \u65b9\u6cd5\u3002 public interface Beverage { double cost(); } public class DarkRoast implements Beverage { @Override public double cost() { return 1; } } public class HouseBlend implements Beverage { @Override public double cost() { return 1; } } public abstract class CondimentDecorator implements Beverage { protected Beverage beverage; } public class Milk extends CondimentDecorator { public Milk(Beverage beverage) { this.beverage = beverage; } @Override public double cost() { return 1 + beverage.cost(); } } public class Mocha extends CondimentDecorator { public Mocha(Beverage beverage) { this.beverage = beverage; } @Override public double cost() { return 1 + beverage.cost(); } } public class Client { public static void main(String[] args) { Beverage beverage = new HouseBlend(); beverage = new Mocha(beverage); beverage = new Milk(beverage); System.out.println(beverage.cost()); } } 3.0 \u8bbe\u8ba1\u539f\u5219 \u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\uff1a\u4e5f\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002\u996e\u6599\u53ef\u4ee5\u52a8\u6001\u6dfb\u52a0\u65b0\u7684\u914d\u6599\uff0c\u800c\u4e0d\u9700\u8981\u53bb\u4fee\u6539\u996e\u6599\u7684\u4ee3\u7801\u3002 \u4e0d\u53ef\u80fd\u628a\u6240\u6709\u7684\u7c7b\u8bbe\u8ba1\u6210\u90fd\u6ee1\u8db3\u8fd9\u4e00\u539f\u5219\uff0c\u5e94\u5f53\u628a\u8be5\u539f\u5219\u5e94\u7528\u4e8e\u6700\u6709\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u7684\u5730\u65b9\u3002 JDK java.io.BufferedInputStream(InputStream) java.io.DataInputStream(InputStream) java.io.BufferedOutputStream(OutputStream) java.util.zip.ZipOutputStream(OutputStream) java.util.Collections#checked List|Map|Set|SortedSet|SortedMap 5. \u5916\u89c2\uff08Facade\uff09 Intent \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u7528\u6765\u8bbf\u95ee\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7fa4\u63a5\u53e3\uff0c\u4ece\u800c\u8ba9\u5b50\u7cfb\u7edf\u66f4\u5bb9\u6613\u4f7f\u7528\u3002 Class Diagram Implementation \u89c2\u770b\u7535\u5f71\u9700\u8981\u64cd\u4f5c\u5f88\u591a\u7535\u5668\uff0c\u4f7f\u7528\u5916\u89c2\u6a21\u5f0f\u5b9e\u73b0\u4e00\u952e\u770b\u7535\u5f71\u529f\u80fd\u3002 public class SubSystem { public void turnOnTV() { System.out.println(\"turnOnTV()\"); } public void setCD(String cd) { System.out.println(\"setCD( \" + cd + \" )\"); } public void startWatching(){ System.out.println(\"startWatching()\"); } } public class Facade { private SubSystem subSystem = new SubSystem(); public void watchMovie() { subSystem.turnOnTV(); subSystem.setCD(\"a movie\"); subSystem.startWatching(); } } public class Client { public static void main(String[] args) { Facade facade = new Facade(); facade.watchMovie(); } } \u8bbe\u8ba1\u539f\u5219 \u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff1a\u53ea\u548c\u4f60\u7684\u5bc6\u53cb\u8c08\u8bdd\u3002\u4e5f\u5c31\u662f\u8bf4\u5ba2\u6237\u5bf9\u8c61\u6240\u9700\u8981\u4ea4\u4e92\u7684\u5bf9\u8c61\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c11\u3002 6. \u4eab\u5143\uff08Flyweight\uff09 Intent \u5229\u7528\u5171\u4eab\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u4e00\u90e8\u5206\u5185\u90e8\u72b6\u6001\u662f\u76f8\u540c\u7684\u3002 Class Diagram Flyweight\uff1a\u4eab\u5143\u5bf9\u8c61 IntrinsicState\uff1a\u5185\u90e8\u72b6\u6001\uff0c\u4eab\u5143\u5bf9\u8c61\u5171\u4eab\u5185\u90e8\u72b6\u6001 ExtrinsicState\uff1a\u5916\u90e8\u72b6\u6001\uff0c\u6bcf\u4e2a\u4eab\u5143\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\u4e0d\u540c Implementation public interface Flyweight { void doOperation(String extrinsicState); } public class ConcreteFlyweight implements Flyweight { private String intrinsicState; public ConcreteFlyweight(String intrinsicState) { this.intrinsicState = intrinsicState; } @Override public void doOperation(String extrinsicState) { System.out.println(\"Object address: \" + System.identityHashCode(this)); System.out.println(\"IntrinsicState: \" + intrinsicState); System.out.println(\"ExtrinsicState: \" + extrinsicState); } } public class FlyweightFactory { private HashMap<String, Flyweight> flyweights = new HashMap<>(); Flyweight getFlyweight(String intrinsicState) { if (!flyweights.containsKey(intrinsicState)) { Flyweight flyweight = new ConcreteFlyweight(intrinsicState); flyweights.put(intrinsicState, flyweight); } return flyweights.get(intrinsicState); } } public class Client { public static void main(String[] args) { FlyweightFactory factory = new FlyweightFactory(); Flyweight flyweight1 = factory.getFlyweight(\"aa\"); Flyweight flyweight2 = factory.getFlyweight(\"aa\"); flyweight1.doOperation(\"x\"); flyweight2.doOperation(\"y\"); } } Object address: 1163157884 IntrinsicState: aa ExtrinsicState: x Object address: 1163157884 IntrinsicState: aa ExtrinsicState: y JDK Java \u5229\u7528\u7f13\u5b58\u6765\u52a0\u901f\u5927\u91cf\u5c0f\u5bf9\u8c61\u7684\u8bbf\u95ee\u65f6\u95f4\u3002 java.lang.Integer#valueOf(int) java.lang.Boolean#valueOf(boolean) java.lang.Byte#valueOf(byte) java.lang.Character#valueOf(char) 7. \u4ee3\u7406\uff08Proxy\uff09 Intent \u63a7\u5236\u5bf9\u5176\u5b83\u5bf9\u8c61\u7684\u8bbf\u95ee\u3002 Class Diagram \u4ee3\u7406\u6709\u4ee5\u4e0b\u56db\u7c7b\uff1a \u8fdc\u7a0b\u4ee3\u7406\uff08Remote Proxy\uff09\uff1a\u63a7\u5236\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\uff08\u4e0d\u540c\u5730\u5740\u7a7a\u95f4\uff09\u7684\u8bbf\u95ee\uff0c\u5b83\u8d1f\u8d23\u5c06\u8bf7\u6c42\u53ca\u5176\u53c2\u6570\u8fdb\u884c\u7f16\u7801\uff0c\u5e76\u5411\u4e0d\u540c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5bf9\u8c61\u53d1\u9001\u5df2\u7ecf\u7f16\u7801\u7684\u8bf7\u6c42\u3002 \u865a\u62df\u4ee3\u7406\uff08Virtual Proxy\uff09\uff1a\u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7f13\u5b58\u5b9e\u4f53\u7684\u9644\u52a0\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5ef6\u8fdf\u5bf9\u5b83\u7684\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u7f51\u7ad9\u52a0\u8f7d\u4e00\u4e2a\u5f88\u5927\u56fe\u7247\u65f6\uff0c\u4e0d\u80fd\u9a6c\u4e0a\u5b8c\u6210\uff0c\u53ef\u4ee5\u7528\u865a\u62df\u4ee3\u7406\u7f13\u5b58\u56fe\u7247\u7684\u5927\u5c0f\u4fe1\u606f\uff0c\u7136\u540e\u751f\u6210\u4e00\u5f20\u4e34\u65f6\u56fe\u7247\u4ee3\u66ff\u539f\u59cb\u56fe\u7247\u3002 \u4fdd\u62a4\u4ee3\u7406\uff08Protection Proxy\uff09\uff1a\u6309\u6743\u9650\u63a7\u5236\u5bf9\u8c61\u7684\u8bbf\u95ee\uff0c\u5b83\u8d1f\u8d23\u68c0\u67e5\u8c03\u7528\u8005\u662f\u5426\u5177\u6709\u5b9e\u73b0\u4e00\u4e2a\u8bf7\u6c42\u6240\u5fc5\u987b\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u667a\u80fd\u4ee3\u7406\uff08Smart Reference\uff09\uff1a\u53d6\u4ee3\u4e86\u7b80\u5355\u7684\u6307\u9488\uff0c\u5b83\u5728\u8bbf\u95ee\u5bf9\u8c61\u65f6\u6267\u884c\u4e00\u4e9b\u9644\u52a0\u64cd\u4f5c\uff1a\u8bb0\u5f55\u5bf9\u8c61\u7684\u5f15\u7528\u6b21\u6570\uff1b\u5f53\u7b2c\u4e00\u6b21\u5f15\u7528\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5c06\u5b83\u88c5\u5165\u5185\u5b58\uff1b\u5728\u8bbf\u95ee\u4e00\u4e2a\u5b9e\u9645\u5bf9\u8c61\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u9501\u5b9a\u4e86\u5b83\uff0c\u4ee5\u786e\u4fdd\u5176\u5b83\u5bf9\u8c61\u4e0d\u80fd\u6539\u53d8\u5b83\u3002 Implementation \u4ee5\u4e0b\u662f\u4e00\u4e2a\u865a\u62df\u4ee3\u7406\u7684\u5b9e\u73b0\uff0c\u6a21\u62df\u4e86\u56fe\u7247\u5ef6\u8fdf\u52a0\u8f7d\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e\u56fe\u7247\u5927\u5c0f\u76f8\u7b49\u7684\u4e34\u65f6\u5185\u5bb9\u53bb\u66ff\u6362\u539f\u59cb\u56fe\u7247\uff0c\u76f4\u5230\u56fe\u7247\u52a0\u8f7d\u5b8c\u6210\u624d\u5c06\u56fe\u7247\u663e\u793a\u51fa\u6765\u3002 public interface Image { void showImage(); } public class HighResolutionImage implements Image { private URL imageURL; private long startTime; private int height; private int width; public int getHeight() { return height; } public int getWidth() { return width; } public HighResolutionImage(URL imageURL) { this.imageURL = imageURL; this.startTime = System.currentTimeMillis(); this.width = 600; this.height = 600; } public boolean isLoad() { // \u6a21\u62df\u56fe\u7247\u52a0\u8f7d\uff0c\u5ef6\u8fdf 3s \u52a0\u8f7d\u5b8c\u6210 long endTime = System.currentTimeMillis(); return endTime - startTime > 3000; } @Override public void showImage() { System.out.println(\"Real Image: \" + imageURL); } } public class ImageProxy implements Image { private HighResolutionImage highResolutionImage; public ImageProxy(HighResolutionImage highResolutionImage) { this.highResolutionImage = highResolutionImage; } @Override public void showImage() { while (!highResolutionImage.isLoad()) { try { System.out.println(\"Temp Image: \" + highResolutionImage.getWidth() + \" \" + highResolutionImage.getHeight()); Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } } highResolutionImage.showImage(); } } public class ImageViewer { public static void main(String[] args) throws Exception { String image = \"http://image.jpg\"; URL url = new URL(image); HighResolutionImage highResolutionImage = new HighResolutionImage(url); ImageProxy imageProxy = new ImageProxy(highResolutionImage); imageProxy.showImage(); } } JDK java.lang.reflect.Proxy RMI \u53c2\u8003\u8d44\u6599 \u5f17\u91cc\u66fc. Head First \u8bbe\u8ba1\u6a21\u5f0f [M]. \u4e2d\u56fd\u7535\u529b\u51fa\u7248\u793e, 2007. Gamma E. \u8bbe\u8ba1\u6a21\u5f0f: \u53ef\u590d\u7528\u9762\u5411\u5bf9\u8c61\u8f6f\u4ef6\u7684\u57fa\u7840 [M]. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2007. Bloch J. Effective java[M]. Addison-Wesley Professional, 2017. Design Patterns Design patterns implemented in Java The breakdown of design patterns in JDK","title":"\u8bbe\u8ba1\u6a21\u5f0f"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_1","text":"\u8bbe\u8ba1\u6a21\u5f0f\u662f\u89e3\u51b3\u95ee\u9898\u7684\u65b9\u6848\uff0c\u5b66\u4e60\u73b0\u6709\u7684\u8bbe\u8ba1\u6a21\u5f0f\u53ef\u4ee5\u505a\u5230\u7ecf\u9a8c\u590d\u7528\u3002 \u62e5\u6709\u8bbe\u8ba1\u6a21\u5f0f\u8bcd\u6c47\uff0c\u5728\u6c9f\u901a\u65f6\u5c31\u80fd\u7528\u66f4\u5c11\u7684\u8bcd\u6c47\u6765\u8ba8\u8bba\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4e86\u89e3\u5e95\u5c42\u7ec6\u8282\u3002","title":"\u4e00\u3001\u6982\u8ff0"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_2","text":"","title":"\u4e8c\u3001\u521b\u5efa\u578b"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#1-singleton","text":"","title":"1. \u5355\u4f8b\uff08Singleton\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent","text":"\u786e\u4fdd\u4e00\u4e2a\u7c7b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5e76\u63d0\u4f9b\u8be5\u5b9e\u4f8b\u7684\u5168\u5c40\u8bbf\u95ee\u70b9\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram","text":"\u4f7f\u7528\u4e00\u4e2a\u79c1\u6709\u6784\u9020\u51fd\u6570\u3001\u4e00\u4e2a\u79c1\u6709\u9759\u6001\u53d8\u91cf\u4ee5\u53ca\u4e00\u4e2a\u516c\u6709\u9759\u6001\u51fd\u6570\u6765\u5b9e\u73b0\u3002 \u79c1\u6709\u6784\u9020\u51fd\u6570\u4fdd\u8bc1\u4e86\u4e0d\u80fd\u901a\u8fc7\u6784\u9020\u51fd\u6570\u6765\u521b\u5efa\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u53ea\u80fd\u901a\u8fc7\u516c\u6709\u9759\u6001\u51fd\u6570\u8fd4\u56de\u552f\u4e00\u7684\u79c1\u6709\u9759\u6001\u53d8\u91cf\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation","text":"","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#i-","text":"\u4ee5\u4e0b\u5b9e\u73b0\u4e2d\uff0c\u79c1\u6709\u9759\u6001\u53d8\u91cf uniqueInstance \u88ab\u5ef6\u8fdf\u5b9e\u4f8b\u5316\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\uff0c\u5982\u679c\u6ca1\u6709\u7528\u5230\u8be5\u7c7b\uff0c\u90a3\u4e48\u5c31\u4e0d\u4f1a\u5b9e\u4f8b\u5316 uniqueInstance\uff0c\u4ece\u800c\u8282\u7ea6\u8d44\u6e90\u3002 \u8fd9\u4e2a\u5b9e\u73b0\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u662f\u4e0d\u5b89\u5168\u7684\uff0c\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u80fd\u591f\u540c\u65f6\u8fdb\u5165 if (uniqueInstance == null) \uff0c\u5e76\u4e14\u6b64\u65f6 uniqueInstance \u4e3a null\uff0c\u90a3\u4e48\u4f1a\u6709\u591a\u4e2a\u7ebf\u7a0b\u6267\u884c uniqueInstance = new Singleton(); \u8bed\u53e5\uff0c\u8fd9\u5c06\u5bfc\u81f4\u5b9e\u4f8b\u5316\u591a\u6b21 uniqueInstance\u3002 public class Singleton { private static Singleton uniqueInstance; private Singleton() { } public static Singleton getUniqueInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; } }","title":"\u2160 \u61d2\u6c49\u5f0f-\u7ebf\u7a0b\u4e0d\u5b89\u5168"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#ii-","text":"\u7ebf\u7a0b\u4e0d\u5b89\u5168\u95ee\u9898\u4e3b\u8981\u662f\u7531\u4e8e uniqueInstance \u88ab\u5b9e\u4f8b\u5316\u591a\u6b21\uff0c\u91c7\u53d6\u76f4\u63a5\u5b9e\u4f8b\u5316 uniqueInstance \u7684\u65b9\u5f0f\u5c31\u4e0d\u4f1a\u4ea7\u751f\u7ebf\u7a0b\u4e0d\u5b89\u5168\u95ee\u9898\u3002 \u4f46\u662f\u76f4\u63a5\u5b9e\u4f8b\u5316\u7684\u65b9\u5f0f\u4e5f\u4e22\u5931\u4e86\u5ef6\u8fdf\u5b9e\u4f8b\u5316\u5e26\u6765\u7684\u8282\u7ea6\u8d44\u6e90\u7684\u597d\u5904\u3002 private static Singleton uniqueInstance = new Singleton();","title":"\u2161 \u997f\u6c49\u5f0f-\u7ebf\u7a0b\u5b89\u5168"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#iii-","text":"\u53ea\u9700\u8981\u5bf9 getUniqueInstance() \u65b9\u6cd5\u52a0\u9501\uff0c\u90a3\u4e48\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8fdb\u5165\u8be5\u65b9\u6cd5\uff0c\u4ece\u800c\u907f\u514d\u4e86\u5b9e\u4f8b\u5316\u591a\u6b21 uniqueInstance\u3002 \u4f46\u662f\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\u8be5\u65b9\u6cd5\u4e4b\u540e\uff0c\u5176\u5b83\u8bd5\u56fe\u8fdb\u5165\u8be5\u65b9\u6cd5\u7684\u7ebf\u7a0b\u90fd\u5fc5\u987b\u7b49\u5f85\uff0c\u5373\u4f7f uniqueInstance \u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e86\u3002\u8fd9\u4f1a\u8ba9\u7ebf\u7a0b\u963b\u585e\u65f6\u95f4\u8fc7\u957f\uff0c\u56e0\u6b64\u8be5\u65b9\u6cd5\u6709\u6027\u80fd\u95ee\u9898\uff0c\u4e0d\u63a8\u8350\u4f7f\u7528\u3002 public static synchronized Singleton getUniqueInstance() { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } return uniqueInstance; }","title":"\u2162 \u61d2\u6c49\u5f0f-\u7ebf\u7a0b\u5b89\u5168"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#iv-","text":"uniqueInstance \u53ea\u9700\u8981\u88ab\u5b9e\u4f8b\u5316\u4e00\u6b21\uff0c\u4e4b\u540e\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u4e86\u3002\u52a0\u9501\u64cd\u4f5c\u53ea\u9700\u8981\u5bf9\u5b9e\u4f8b\u5316\u90a3\u90e8\u5206\u7684\u4ee3\u7801\u8fdb\u884c\uff0c\u53ea\u6709\u5f53 uniqueInstance \u6ca1\u6709\u88ab\u5b9e\u4f8b\u5316\u65f6\uff0c\u624d\u9700\u8981\u8fdb\u884c\u52a0\u9501\u3002 \u53cc\u91cd\u6821\u9a8c\u9501\u5148\u5224\u65ad uniqueInstance \u662f\u5426\u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u5b9e\u4f8b\u5316\uff0c\u90a3\u4e48\u624d\u5bf9\u5b9e\u4f8b\u5316\u8bed\u53e5\u8fdb\u884c\u52a0\u9501\u3002 public class Singleton { private volatile static Singleton uniqueInstance; private Singleton() { } public static Singleton getUniqueInstance() { if (uniqueInstance == null) { synchronized (Singleton.class) { if (uniqueInstance == null) { uniqueInstance = new Singleton(); } } } return uniqueInstance; } } \u8003\u8651\u4e0b\u9762\u7684\u5b9e\u73b0\uff0c\u4e5f\u5c31\u662f\u53ea\u4f7f\u7528\u4e86\u4e00\u4e2a if \u8bed\u53e5\u3002\u5728 uniqueInstance == null \u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u4e86 if \u8bed\u53e5\uff0c\u90a3\u4e48\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u8fdb\u5165 if \u8bed\u53e5\u5757\u5185\u3002\u867d\u7136\u5728 if \u8bed\u53e5\u5757\u5185\u6709\u52a0\u9501\u64cd\u4f5c\uff0c\u4f46\u662f\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u4f1a\u6267\u884c uniqueInstance = new Singleton(); \u8fd9\u6761\u8bed\u53e5\uff0c\u53ea\u662f\u5148\u540e\u7684\u95ee\u9898\uff0c\u90a3\u4e48\u5c31\u4f1a\u8fdb\u884c\u4e24\u6b21\u5b9e\u4f8b\u5316\u3002\u56e0\u6b64\u5fc5\u987b\u4f7f\u7528\u53cc\u91cd\u6821\u9a8c\u9501\uff0c\u4e5f\u5c31\u662f\u9700\u8981\u4f7f\u7528\u4e24\u4e2a if \u8bed\u53e5\uff1a\u7b2c\u4e00\u4e2a if \u8bed\u53e5\u7528\u6765\u907f\u514d uniqueInstance \u5df2\u7ecf\u88ab\u5b9e\u4f8b\u5316\u4e4b\u540e\u7684\u52a0\u9501\u64cd\u4f5c\uff0c\u800c\u7b2c\u4e8c\u4e2a if \u8bed\u53e5\u8fdb\u884c\u4e86\u52a0\u9501\uff0c\u6240\u4ee5\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u8fdb\u5165\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0 uniqueInstance == null \u65f6\u4e24\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fdb\u884c\u5b9e\u4f8b\u5316\u64cd\u4f5c\u3002 if (uniqueInstance == null) { synchronized (Singleton.class) { uniqueInstance = new Singleton(); } } uniqueInstance \u91c7\u7528 volatile \u5173\u952e\u5b57\u4fee\u9970\u4e5f\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c uniqueInstance = new Singleton(); \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u662f\u5206\u4e3a\u4e09\u6b65\u6267\u884c\uff1a \u4e3a uniqueInstance \u5206\u914d\u5185\u5b58\u7a7a\u95f4 \u521d\u59cb\u5316 uniqueInstance \u5c06 uniqueInstance \u6307\u5411\u5206\u914d\u7684\u5185\u5b58\u5730\u5740 \u4f46\u662f\u7531\u4e8e JVM \u5177\u6709\u6307\u4ee4\u91cd\u6392\u7684\u7279\u6027\uff0c\u6267\u884c\u987a\u5e8f\u6709\u53ef\u80fd\u53d8\u6210 1>3>2\u3002\u6307\u4ee4\u91cd\u6392\u5728\u5355\u7ebf\u7a0b\u73af\u5883\u4e0b\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\uff0c\u4f46\u662f\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4f1a\u5bfc\u81f4\u4e00\u4e2a\u7ebf\u7a0b\u83b7\u5f97\u8fd8\u6ca1\u6709\u521d\u59cb\u5316\u7684\u5b9e\u4f8b\u3002\u4f8b\u5982\uff0c\u7ebf\u7a0b T 1 \u6267\u884c\u4e86 1 \u548c 3\uff0c\u6b64\u65f6 T 2 \u8c03\u7528 getUniqueInstance() \u540e\u53d1\u73b0 uniqueInstance \u4e0d\u4e3a\u7a7a\uff0c\u56e0\u6b64\u8fd4\u56de uniqueInstance\uff0c\u4f46\u6b64\u65f6 uniqueInstance \u8fd8\u672a\u88ab\u521d\u59cb\u5316\u3002 \u4f7f\u7528 volatile \u53ef\u4ee5\u7981\u6b62 JVM \u7684\u6307\u4ee4\u91cd\u6392\uff0c\u4fdd\u8bc1\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\u3002","title":"\u2163 \u53cc\u91cd\u6821\u9a8c\u9501-\u7ebf\u7a0b\u5b89\u5168"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#v","text":"\u5f53 Singleton \u7c7b\u88ab\u52a0\u8f7d\u65f6\uff0c\u9759\u6001\u5185\u90e8\u7c7b SingletonHolder \u6ca1\u6709\u88ab\u52a0\u8f7d\u8fdb\u5185\u5b58\u3002\u53ea\u6709\u5f53\u8c03\u7528 getUniqueInstance() \u65b9\u6cd5\u4ece\u800c\u89e6\u53d1 SingletonHolder.INSTANCE \u65f6 SingletonHolder \u624d\u4f1a\u88ab\u52a0\u8f7d\uff0c\u6b64\u65f6\u521d\u59cb\u5316 INSTANCE \u5b9e\u4f8b\uff0c\u5e76\u4e14 JVM \u80fd\u786e\u4fdd INSTANCE \u53ea\u88ab\u5b9e\u4f8b\u5316\u4e00\u6b21\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4ec5\u5177\u6709\u5ef6\u8fdf\u521d\u59cb\u5316\u7684\u597d\u5904\uff0c\u800c\u4e14\u7531 JVM \u63d0\u4f9b\u4e86\u5bf9\u7ebf\u7a0b\u5b89\u5168\u7684\u652f\u6301\u3002 public class Singleton { private Singleton() { } private static class SingletonHolder { private static final Singleton INSTANCE = new Singleton(); } public static Singleton getUniqueInstance() { return SingletonHolder.INSTANCE; } }","title":"\u2164 \u9759\u6001\u5185\u90e8\u7c7b\u5b9e\u73b0"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#vi","text":"public enum Singleton { INSTANCE; private String objName; public String getObjName() { return objName; } public void setObjName(String objName) { this.objName = objName; } public static void main(String[] args) { // \u5355\u4f8b\u6d4b\u8bd5 Singleton firstSingleton = Singleton.INSTANCE; firstSingleton.setObjName(\"firstName\"); System.out.println(firstSingleton.getObjName()); Singleton secondSingleton = Singleton.INSTANCE; secondSingleton.setObjName(\"secondName\"); System.out.println(firstSingleton.getObjName()); System.out.println(secondSingleton.getObjName()); // \u53cd\u5c04\u83b7\u53d6\u5b9e\u4f8b\u6d4b\u8bd5 try { Singleton[] enumConstants = Singleton.class.getEnumConstants(); for (Singleton enumConstant : enumConstants) { System.out.println(enumConstant.getObjName()); } } catch (Exception e) { e.printStackTrace(); } } } firstName secondName secondName secondName \u8be5\u5b9e\u73b0\u53ef\u4ee5\u9632\u6b62\u53cd\u5c04\u653b\u51fb\u3002\u5728\u5176\u5b83\u5b9e\u73b0\u4e2d\uff0c\u901a\u8fc7 setAccessible() \u65b9\u6cd5\u53ef\u4ee5\u5c06\u79c1\u6709\u6784\u9020\u51fd\u6570\u7684\u8bbf\u95ee\u7ea7\u522b\u8bbe\u7f6e\u4e3a public\uff0c\u7136\u540e\u8c03\u7528\u6784\u9020\u51fd\u6570\u4ece\u800c\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5982\u679c\u8981\u9632\u6b62\u8fd9\u79cd\u653b\u51fb\uff0c\u9700\u8981\u5728\u6784\u9020\u51fd\u6570\u4e2d\u6dfb\u52a0\u9632\u6b62\u591a\u6b21\u5b9e\u4f8b\u5316\u7684\u4ee3\u7801\u3002\u8be5\u5b9e\u73b0\u662f\u7531 JVM \u4fdd\u8bc1\u53ea\u4f1a\u5b9e\u4f8b\u5316\u4e00\u6b21\uff0c\u56e0\u6b64\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7684\u53cd\u5c04\u653b\u51fb\u3002 \u8be5\u5b9e\u73b0\u5728\u591a\u6b21\u5e8f\u5217\u5316\u548c\u5e8f\u5217\u5316\u4e4b\u540e\uff0c\u4e0d\u4f1a\u5f97\u5230\u591a\u4e2a\u5b9e\u4f8b\u3002\u800c\u5176\u5b83\u5b9e\u73b0\u9700\u8981\u4f7f\u7528 transient \u4fee\u9970\u6240\u6709\u5b57\u6bb5\uff0c\u5e76\u4e14\u5b9e\u73b0\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7684\u65b9\u6cd5\u3002","title":"\u2165 \u679a\u4e3e\u5b9e\u73b0"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#examples","text":"Logger Classes Configuration Classes Accesing resources in shared mode Factories implemented as Singletons","title":"Examples"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk","text":"java.lang.Runtime#getRuntime() java.awt.Desktop#getDesktop() java.lang.System#getSecurityManager()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#2-simple-factory","text":"","title":"2. \u7b80\u5355\u5de5\u5382\uff08Simple Factory\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_1","text":"\u5728\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u65f6\u4e0d\u5411\u5ba2\u6237\u66b4\u9732\u5185\u90e8\u7ec6\u8282\uff0c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u521b\u5efa\u5bf9\u8c61\u7684\u901a\u7528\u63a5\u53e3\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_1","text":"\u7b80\u5355\u5de5\u5382\u628a\u5b9e\u4f8b\u5316\u7684\u64cd\u4f5c\u5355\u72ec\u653e\u5230\u4e00\u4e2a\u7c7b\u4e2d\uff0c\u8fd9\u4e2a\u7c7b\u5c31\u6210\u4e3a\u7b80\u5355\u5de5\u5382\u7c7b\uff0c\u8ba9\u7b80\u5355\u5de5\u5382\u7c7b\u6765\u51b3\u5b9a\u5e94\u8be5\u7528\u54ea\u4e2a\u5177\u4f53\u5b50\u7c7b\u6765\u5b9e\u4f8b\u5316\u3002 \u8fd9\u6837\u505a\u80fd\u628a\u5ba2\u6237\u7c7b\u548c\u5177\u4f53\u5b50\u7c7b\u7684\u5b9e\u73b0\u89e3\u8026\uff0c\u5ba2\u6237\u7c7b\u4e0d\u518d\u9700\u8981\u77e5\u9053\u6709\u54ea\u4e9b\u5b50\u7c7b\u4ee5\u53ca\u5e94\u5f53\u5b9e\u4f8b\u5316\u54ea\u4e2a\u5b50\u7c7b\u3002\u5ba2\u6237\u7c7b\u5f80\u5f80\u6709\u591a\u4e2a\uff0c\u5982\u679c\u4e0d\u4f7f\u7528\u7b80\u5355\u5de5\u5382\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5ba2\u6237\u7c7b\u90fd\u8981\u77e5\u9053\u6240\u6709\u5b50\u7c7b\u7684\u7ec6\u8282\u3002\u800c\u4e14\u4e00\u65e6\u5b50\u7c7b\u53d1\u751f\u6539\u53d8\uff0c\u4f8b\u5982\u589e\u52a0\u5b50\u7c7b\uff0c\u90a3\u4e48\u6240\u6709\u7684\u5ba2\u6237\u7c7b\u90fd\u8981\u8fdb\u884c\u4fee\u6539\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_1","text":"public interface Product { } public class ConcreteProduct implements Product { } public class ConcreteProduct1 implements Product { } public class ConcreteProduct2 implements Product { } \u4ee5\u4e0b\u7684 Client \u7c7b\u5305\u542b\u4e86\u5b9e\u4f8b\u5316\u7684\u4ee3\u7801\uff0c\u8fd9\u662f\u4e00\u79cd\u9519\u8bef\u7684\u5b9e\u73b0\u3002\u5982\u679c\u5728\u5ba2\u6237\u7c7b\u4e2d\u5b58\u5728\u8fd9\u79cd\u5b9e\u4f8b\u5316\u4ee3\u7801\uff0c\u5c31\u9700\u8981\u8003\u8651\u5c06\u4ee3\u7801\u653e\u5230\u7b80\u5355\u5de5\u5382\u4e2d\u3002 public class Client { public static void main(String[] args) { int type = 1; Product product; if (type == 1) { product = new ConcreteProduct1(); } else if (type == 2) { product = new ConcreteProduct2(); } else { product = new ConcreteProduct(); } // do something with the product } } \u4ee5\u4e0b\u7684 SimpleFactory \u662f\u7b80\u5355\u5de5\u5382\u5b9e\u73b0\uff0c\u5b83\u88ab\u6240\u6709\u9700\u8981\u8fdb\u884c\u5b9e\u4f8b\u5316\u7684\u5ba2\u6237\u7c7b\u8c03\u7528\u3002 public class SimpleFactory { public Product createProduct(int type) { if (type == 1) { return new ConcreteProduct1(); } else if (type == 2) { return new ConcreteProduct2(); } return new ConcreteProduct(); } } public class Client { public static void main(String[] args) { SimpleFactory simpleFactory = new SimpleFactory(); Product product = simpleFactory.createProduct(1); // do something with the product } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#3-factory-method","text":"","title":"3. \u5de5\u5382\u65b9\u6cd5\uff08Factory Method\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_2","text":"\u5b9a\u4e49\u4e86\u4e00\u4e2a\u521b\u5efa\u5bf9\u8c61\u7684\u63a5\u53e3\uff0c\u4f46\u7531\u5b50\u7c7b\u51b3\u5b9a\u8981\u5b9e\u4f8b\u5316\u54ea\u4e2a\u7c7b\u3002\u5de5\u5382\u65b9\u6cd5\u628a\u5b9e\u4f8b\u5316\u64cd\u4f5c\u63a8\u8fdf\u5230\u5b50\u7c7b\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_2","text":"\u5728\u7b80\u5355\u5de5\u5382\u4e2d\uff0c\u521b\u5efa\u5bf9\u8c61\u7684\u662f\u53e6\u4e00\u4e2a\u7c7b\uff0c\u800c\u5728\u5de5\u5382\u65b9\u6cd5\u4e2d\uff0c\u662f\u7531\u5b50\u7c7b\u6765\u521b\u5efa\u5bf9\u8c61\u3002 \u4e0b\u56fe\u4e2d\uff0cFactory \u6709\u4e00\u4e2a doSomething() \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u7528\u5230\u4e00\u4e2a\u4ea7\u54c1\u5bf9\u8c61\uff0c\u8fd9\u4e2a\u4ea7\u54c1\u5bf9\u8c61\u7531 factoryMethod() \u65b9\u6cd5\u521b\u5efa\u3002\u8be5\u65b9\u6cd5\u662f\u62bd\u8c61\u7684\uff0c\u9700\u8981\u7531\u5b50\u7c7b\u53bb\u5b9e\u73b0\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_2","text":"public abstract class Factory { abstract public Product factoryMethod(); public void doSomething() { Product product = factoryMethod(); // do something with the product } } public class ConcreteFactory extends Factory { public Product factoryMethod() { return new ConcreteProduct(); } } public class ConcreteFactory1 extends Factory { public Product factoryMethod() { return new ConcreteProduct1(); } } public class ConcreteFactory2 extends Factory { public Product factoryMethod() { return new ConcreteProduct2(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_1","text":"java.util.Calendar java.util.ResourceBundle java.text.NumberFormat java.nio.charset.Charset java.net.URLStreamHandlerFactory java.util.EnumSet javax.xml.bind.JAXBContext","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#4-abstract-factory","text":"","title":"4. \u62bd\u8c61\u5de5\u5382\uff08Abstract Factory\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_3","text":"\u63d0\u4f9b\u4e00\u4e2a\u63a5\u53e3\uff0c\u7528\u4e8e\u521b\u5efa \u76f8\u5173\u7684\u5bf9\u8c61\u5bb6\u65cf \u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_3","text":"\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u521b\u5efa\u7684\u662f\u5bf9\u8c61\u5bb6\u65cf\uff0c\u4e5f\u5c31\u662f\u5f88\u591a\u5bf9\u8c61\u800c\u4e0d\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5bf9\u8c61\u662f\u76f8\u5173\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5fc5\u987b\u4e00\u8d77\u521b\u5efa\u51fa\u6765\u3002\u800c\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u53ea\u662f\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u548c\u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u6709\u5f88\u5927\u4e0d\u540c\u3002 \u62bd\u8c61\u5de5\u5382\u6a21\u5f0f\u7528\u5230\u4e86\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u6765\u521b\u5efa\u5355\u4e00\u5bf9\u8c61\uff0cAbstractFactory \u4e2d\u7684 createProductA() \u548c createProductB() \u65b9\u6cd5\u90fd\u662f\u8ba9\u5b50\u7c7b\u6765\u5b9e\u73b0\uff0c\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u5355\u72ec\u6765\u770b\u5c31\u662f\u5728\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8fd9\u7b26\u5408\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u7684\u5b9a\u4e49\u3002 \u81f3\u4e8e\u521b\u5efa\u5bf9\u8c61\u7684\u5bb6\u65cf\u8fd9\u4e00\u6982\u5ff5\u662f\u5728 Client \u4f53\u73b0\uff0cClient \u8981\u901a\u8fc7 AbstractFactory \u540c\u65f6\u8c03\u7528\u4e24\u4e2a\u65b9\u6cd5\u6765\u521b\u5efa\u51fa\u4e24\u4e2a\u5bf9\u8c61\uff0c\u5728\u8fd9\u91cc\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u5c31\u6709\u5f88\u5927\u7684\u76f8\u5173\u6027\uff0cClient \u9700\u8981\u540c\u65f6\u521b\u5efa\u51fa\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u3002 \u4ece\u9ad8\u5c42\u6b21\u6765\u770b\uff0c\u62bd\u8c61\u5de5\u5382\u4f7f\u7528\u4e86\u7ec4\u5408\uff0c\u5373 Cilent \u7ec4\u5408\u4e86 AbstractFactory\uff0c\u800c\u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f\u4f7f\u7528\u4e86\u7ee7\u627f\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_3","text":"public class AbstractProductA { } public class AbstractProductB { } public class ProductA1 extends AbstractProductA { } public class ProductA2 extends AbstractProductA { } public class ProductB1 extends AbstractProductB { } public class ProductB2 extends AbstractProductB { } public abstract class AbstractFactory { abstract AbstractProductA createProductA(); abstract AbstractProductB createProductB(); } public class ConcreteFactory1 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA1(); } AbstractProductB createProductB() { return new ProductB1(); } } public class ConcreteFactory2 extends AbstractFactory { AbstractProductA createProductA() { return new ProductA2(); } AbstractProductB createProductB() { return new ProductB2(); } } public class Client { public static void main(String[] args) { AbstractFactory abstractFactory = new ConcreteFactory1(); AbstractProductA productA = abstractFactory.createProductA(); AbstractProductB productB = abstractFactory.createProductB(); // do something with productA and productB } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_2","text":"javax.xml.parsers.DocumentBuilderFactory javax.xml.transform.TransformerFactory javax.xml.xpath.XPathFactory","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#5-builder","text":"","title":"5. \u751f\u6210\u5668\uff08Builder\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_4","text":"\u5c01\u88c5\u4e00\u4e2a\u5bf9\u8c61\u7684\u6784\u9020\u8fc7\u7a0b\uff0c\u5e76\u5141\u8bb8\u6309\u6b65\u9aa4\u6784\u9020\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_4","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_4","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u6613\u7684 StringBuilder \u5b9e\u73b0\uff0c\u53c2\u8003\u4e86 JDK 1.8 \u6e90\u7801\u3002 public class AbstractStringBuilder { protected char[] value; protected int count; public AbstractStringBuilder(int capacity) { count = 0; value = new char[capacity]; } public AbstractStringBuilder append(char c) { ensureCapacityInternal(count + 1); value[count++] = c; return this; } private void ensureCapacityInternal(int minimumCapacity) { // overflow-conscious code if (minimumCapacity - value.length > 0) expandCapacity(minimumCapacity); } void expandCapacity(int minimumCapacity) { int newCapacity = value.length * 2 + 2; if (newCapacity - minimumCapacity < 0) newCapacity = minimumCapacity; if (newCapacity < 0) { if (minimumCapacity < 0) // overflow throw new OutOfMemoryError(); newCapacity = Integer.MAX_VALUE; } value = Arrays.copyOf(value, newCapacity); } } public class StringBuilder extends AbstractStringBuilder { public StringBuilder() { super(16); } @Override public String toString() { // Create a copy, don't share the array return new String(value, 0, count); } } public class Client { public static void main(String[] args) { StringBuilder sb = new StringBuilder(); final int count = 26; for (int i = 0; i < count; i++) { sb.append((char) ('a' + i)); } System.out.println(sb.toString()); } } abcdefghijklmnopqrstuvwxyz","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_3","text":"java.lang.StringBuilder java.nio.ByteBuffer java.lang.StringBuffer java.lang.Appendable Apache Camel builders","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#6-prototype","text":"","title":"6. \u539f\u578b\u6a21\u5f0f\uff08Prototype\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_5","text":"\u4f7f\u7528\u539f\u578b\u5b9e\u4f8b\u6307\u5b9a\u8981\u521b\u5efa\u5bf9\u8c61\u7684\u7c7b\u578b\uff0c\u901a\u8fc7\u590d\u5236\u8fd9\u4e2a\u539f\u578b\u6765\u521b\u5efa\u65b0\u5bf9\u8c61\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_5","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_5","text":"public abstract class Prototype { abstract Prototype myClone(); } public class ConcretePrototype extends Prototype { private String filed; public ConcretePrototype(String filed) { this.filed = filed; } @Override Prototype myClone() { return new ConcretePrototype(filed); } @Override public String toString() { return filed; } } public class Client { public static void main(String[] args) { Prototype prototype = new ConcretePrototype(\"abc\"); Prototype clone = prototype.myClone(); System.out.println(clone.toString()); } } abc","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_4","text":"java.lang.Object#clone()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_3","text":"","title":"\u4e09\u3001\u884c\u4e3a\u578b"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#1-chain-of-responsibility","text":"","title":"1. \u8d23\u4efb\u94fe\uff08Chain Of Responsibility\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_6","text":"\u4f7f\u591a\u4e2a\u5bf9\u8c61\u90fd\u6709\u673a\u4f1a\u5904\u7406\u8bf7\u6c42\uff0c\u4ece\u800c\u907f\u514d\u8bf7\u6c42\u7684\u53d1\u9001\u8005\u548c\u63a5\u6536\u8005\u4e4b\u95f4\u7684\u8026\u5408\u5173\u7cfb\u3002\u5c06\u8fd9\u4e9b\u5bf9\u8c61\u8fde\u6210\u4e00\u6761\u94fe\uff0c\u5e76\u6cbf\u7740\u8fd9\u6761\u94fe\u53d1\u9001\u8be5\u8bf7\u6c42\uff0c\u76f4\u5230\u6709\u4e00\u4e2a\u5bf9\u8c61\u5904\u7406\u5b83\u4e3a\u6b62\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_6","text":"Handler\uff1a\u5b9a\u4e49\u5904\u7406\u8bf7\u6c42\u7684\u63a5\u53e3\uff0c\u5e76\u4e14\u5b9e\u73b0\u540e\u7ee7\u94fe\uff08successor\uff09","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_6","text":"public abstract class Handler { protected Handler successor; public Handler(Handler successor) { this.successor = successor; } protected abstract void handleRequest(Request request); } public class ConcreteHandler1 extends Handler { public ConcreteHandler1(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.getType() == RequestType.TYPE1) { System.out.println(request.getName() + \" is handle by ConcreteHandler1\"); return; } if (successor != null) { successor.handleRequest(request); } } } public class ConcreteHandler2 extends Handler { public ConcreteHandler2(Handler successor) { super(successor); } @Override protected void handleRequest(Request request) { if (request.getType() == RequestType.TYPE2) { System.out.println(request.getName() + \" is handle by ConcreteHandler2\"); return; } if (successor != null) { successor.handleRequest(request); } } } public class Request { private RequestType type; private String name; public Request(RequestType type, String name) { this.type = type; this.name = name; } public RequestType getType() { return type; } public String getName() { return name; } } public enum RequestType { TYPE1, TYPE2 } public class Client { public static void main(String[] args) { Handler handler1 = new ConcreteHandler1(null); Handler handler2 = new ConcreteHandler2(handler1); Request request1 = new Request(RequestType.TYPE1, \"request1\"); handler2.handleRequest(request1); Request request2 = new Request(RequestType.TYPE2, \"request2\"); handler2.handleRequest(request2); } } request1 is handle by ConcreteHandler1 request2 is handle by ConcreteHandler2","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_5","text":"java.util.logging.Logger#log() Apache Commons Chain javax.servlet.Filter#doFilter()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#2-command","text":"","title":"2. \u547d\u4ee4\uff08Command\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_7","text":"\u5c06\u547d\u4ee4\u5c01\u88c5\u6210\u5bf9\u8c61\u4e2d\uff0c\u5177\u6709\u4ee5\u4e0b\u4f5c\u7528\uff1a \u4f7f\u7528\u547d\u4ee4\u6765\u53c2\u6570\u5316\u5176\u5b83\u5bf9\u8c61 \u5c06\u547d\u4ee4\u653e\u5165\u961f\u5217\u4e2d\u8fdb\u884c\u6392\u961f \u5c06\u547d\u4ee4\u7684\u64cd\u4f5c\u8bb0\u5f55\u5230\u65e5\u5fd7\u4e2d \u652f\u6301\u53ef\u64a4\u9500\u7684\u64cd\u4f5c","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_7","text":"Command\uff1a\u547d\u4ee4 Receiver\uff1a\u547d\u4ee4\u63a5\u6536\u8005\uff0c\u4e5f\u5c31\u662f\u547d\u4ee4\u771f\u6b63\u7684\u6267\u884c\u8005 Invoker\uff1a\u901a\u8fc7\u5b83\u6765\u8c03\u7528\u547d\u4ee4 Client\uff1a\u53ef\u4ee5\u8bbe\u7f6e\u547d\u4ee4\u4e0e\u547d\u4ee4\u7684\u63a5\u6536\u8005","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_7","text":"\u8bbe\u8ba1\u4e00\u4e2a\u9065\u63a7\u5668\uff0c\u53ef\u4ee5\u63a7\u5236\u7535\u706f\u5f00\u5173\u3002 public interface Command { void execute(); } public class LightOnCommand implements Command { Light light; public LightOnCommand(Light light) { this.light = light; } @Override public void execute() { light.on(); } } public class LightOffCommand implements Command { Light light; public LightOffCommand(Light light) { this.light = light; } @Override public void execute() { light.off(); } } public class Light { public void on() { System.out.println(\"Light is on!\"); } public void off() { System.out.println(\"Light is off!\"); } } /** * \u9065\u63a7\u5668 */ public class Invoker { private Command[] onCommands; private Command[] offCommands; private final int slotNum = 7; public Invoker() { this.onCommands = new Command[slotNum]; this.offCommands = new Command[slotNum]; } public void setOnCommand(Command command, int slot) { onCommands[slot] = command; } public void setOffCommand(Command command, int slot) { offCommands[slot] = command; } public void onButtonWasPushed(int slot) { onCommands[slot].execute(); } public void offButtonWasPushed(int slot) { offCommands[slot].execute(); } } public class Client { public static void main(String[] args) { Invoker invoker = new Invoker(); Light light = new Light(); Command lightOnCommand = new LightOnCommand(light); Command lightOffCommand = new LightOffCommand(light); invoker.setOnCommand(lightOnCommand, 0); invoker.setOffCommand(lightOffCommand, 0); invoker.onButtonWasPushed(0); invoker.offButtonWasPushed(0); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_6","text":"java.lang.Runnable Netflix Hystrix javax.swing.Action","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#3-interpreter","text":"","title":"3. \u89e3\u91ca\u5668\uff08Interpreter\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_8","text":"\u4e3a\u8bed\u8a00\u521b\u5efa\u89e3\u91ca\u5668\uff0c\u901a\u5e38\u7531\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u8bed\u6cd5\u5206\u6790\u6765\u5b9a\u4e49\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_8","text":"TerminalExpression\uff1a\u7ec8\u7ed3\u7b26\u8868\u8fbe\u5f0f\uff0c\u6bcf\u4e2a\u7ec8\u7ed3\u7b26\u90fd\u9700\u8981\u4e00\u4e2a TerminalExpression\u3002 Context\uff1a\u4e0a\u4e0b\u6587\uff0c\u5305\u542b\u89e3\u91ca\u5668\u4e4b\u5916\u7684\u4e00\u4e9b\u5168\u5c40\u4fe1\u606f\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_8","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u89c4\u5219\u68c0\u9a8c\u5668\u5b9e\u73b0\uff0c\u5177\u6709 and \u548c or \u89c4\u5219\uff0c\u901a\u8fc7\u89c4\u5219\u53ef\u4ee5\u6784\u5efa\u4e00\u9897\u89e3\u6790\u6811\uff0c\u7528\u6765\u68c0\u9a8c\u4e00\u4e2a\u6587\u672c\u662f\u5426\u6ee1\u8db3\u89e3\u6790\u6811\u5b9a\u4e49\u7684\u89c4\u5219\u3002 \u4f8b\u5982\u4e00\u9897\u89e3\u6790\u6811\u4e3a D And (A Or (B C))\uff0c\u6587\u672c \"D A\" \u6ee1\u8db3\u8be5\u89e3\u6790\u6811\u5b9a\u4e49\u7684\u89c4\u5219\u3002 \u8fd9\u91cc\u7684 Context \u6307\u7684\u662f String\u3002 public abstract class Expression { public abstract boolean interpret(String str); } public class TerminalExpression extends Expression { private String literal = null; public TerminalExpression(String str) { literal = str; } public boolean interpret(String str) { StringTokenizer st = new StringTokenizer(str); while (st.hasMoreTokens()) { String test = st.nextToken(); if (test.equals(literal)) { return true; } } return false; } } public class AndExpression extends Expression { private Expression expression1 = null; private Expression expression2 = null; public AndExpression(Expression expression1, Expression expression2) { this.expression1 = expression1; this.expression2 = expression2; } public boolean interpret(String str) { return expression1.interpret(str) && expression2.interpret(str); } } public class OrExpression extends Expression { private Expression expression1 = null; private Expression expression2 = null; public OrExpression(Expression expression1, Expression expression2) { this.expression1 = expression1; this.expression2 = expression2; } public boolean interpret(String str) { return expression1.interpret(str) || expression2.interpret(str); } } public class Client { /** * \u6784\u5efa\u89e3\u6790\u6811 */ public static Expression buildInterpreterTree() { // Literal Expression terminal1 = new TerminalExpression(\"A\"); Expression terminal2 = new TerminalExpression(\"B\"); Expression terminal3 = new TerminalExpression(\"C\"); Expression terminal4 = new TerminalExpression(\"D\"); // B C Expression alternation1 = new OrExpression(terminal2, terminal3); // A Or (B C) Expression alternation2 = new OrExpression(terminal1, alternation1); // D And (A Or (B C)) return new AndExpression(terminal4, alternation2); } public static void main(String[] args) { Expression define = buildInterpreterTree(); String context1 = \"D A\"; String context2 = \"A B\"; System.out.println(define.interpret(context1)); System.out.println(define.interpret(context2)); } } true false","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_7","text":"java.util.Pattern java.text.Normalizer All subclasses of java.text.Format javax.el.ELResolver","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#4-iterator","text":"","title":"4. \u8fed\u4ee3\u5668\uff08Iterator\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_9","text":"\u63d0\u4f9b\u4e00\u79cd\u987a\u5e8f\u8bbf\u95ee\u805a\u5408\u5bf9\u8c61\u5143\u7d20\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e0d\u66b4\u9732\u805a\u5408\u5bf9\u8c61\u7684\u5185\u90e8\u8868\u793a\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_9","text":"Aggregate \u662f\u805a\u5408\u7c7b\uff0c\u5176\u4e2d createIterator() \u65b9\u6cd5\u53ef\u4ee5\u4ea7\u751f\u4e00\u4e2a Iterator\uff1b Iterator \u4e3b\u8981\u5b9a\u4e49\u4e86 hasNext() \u548c next() \u65b9\u6cd5\u3002 Client \u7ec4\u5408\u4e86 Aggregate\uff0c\u4e3a\u4e86\u8fed\u4ee3\u904d\u5386 Aggregate\uff0c\u4e5f\u9700\u8981\u7ec4\u5408 Iterator\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_9","text":"public interface Aggregate { Iterator createIterator(); } public class ConcreteAggregate implements Aggregate { private Integer[] items; public ConcreteAggregate() { items = new Integer[10]; for (int i = 0; i < items.length; i++) { items[i] = i; } } @Override public Iterator createIterator() { return new ConcreteIterator<Integer>(items); } } public interface Iterator<Item> { Item next(); boolean hasNext(); } public class ConcreteIterator<Item> implements Iterator { private Item[] items; private int position = 0; public ConcreteIterator(Item[] items) { this.items = items; } @Override public Object next() { return items[position++]; } @Override public boolean hasNext() { return position < items.length; } } public class Client { public static void main(String[] args) { Aggregate aggregate = new ConcreteAggregate(); Iterator<Integer> iterator = aggregate.createIterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); } } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_8","text":"java.util.Iterator java.util.Enumeration","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#5-mediator","text":"","title":"5. \u4e2d\u4ecb\u8005\uff08Mediator\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_10","text":"\u96c6\u4e2d\u76f8\u5173\u5bf9\u8c61\u4e4b\u95f4\u590d\u6742\u7684\u6c9f\u901a\u548c\u63a7\u5236\u65b9\u5f0f\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_10","text":"Mediator\uff1a\u4e2d\u4ecb\u8005\uff0c\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u7528\u4e8e\u4e0e\u5404\u540c\u4e8b\uff08Colleague\uff09\u5bf9\u8c61\u901a\u4fe1\u3002 Colleague\uff1a\u540c\u4e8b\uff0c\u76f8\u5173\u5bf9\u8c61","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_10","text":"Alarm\uff08\u95f9\u949f\uff09\u3001CoffeePot\uff08\u5496\u5561\u58f6\uff09\u3001Calendar\uff08\u65e5\u5386\uff09\u3001Sprinkler\uff08\u55b7\u5934\uff09\u662f\u4e00\u7ec4\u76f8\u5173\u7684\u5bf9\u8c61\uff0c\u5728\u67d0\u4e2a\u5bf9\u8c61\u7684\u4e8b\u4ef6\u4ea7\u751f\u65f6\u9700\u8981\u53bb\u64cd\u4f5c\u5176\u5b83\u5bf9\u8c61\uff0c\u5f62\u6210\u4e86\u4e0b\u9762\u8fd9\u79cd\u4f9d\u8d56\u7ed3\u6784\uff1a \u4f7f\u7528\u4e2d\u4ecb\u8005\u6a21\u5f0f\u53ef\u4ee5\u5c06\u590d\u6742\u7684\u4f9d\u8d56\u7ed3\u6784\u53d8\u6210\u661f\u5f62\u7ed3\u6784\uff1a public abstract class Colleague { public abstract void onEvent(Mediator mediator); } public class Alarm extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"alarm\"); } public void doAlarm() { System.out.println(\"doAlarm()\"); } } public class CoffeePot extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"coffeePot\"); } public void doCoffeePot() { System.out.println(\"doCoffeePot()\"); } } public class Calender extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"calender\"); } public void doCalender() { System.out.println(\"doCalender()\"); } } public class Sprinkler extends Colleague { @Override public void onEvent(Mediator mediator) { mediator.doEvent(\"sprinkler\"); } public void doSprinkler() { System.out.println(\"doSprinkler()\"); } } public abstract class Mediator { public abstract void doEvent(String eventType); } public class ConcreteMediator extends Mediator { private Alarm alarm; private CoffeePot coffeePot; private Calender calender; private Sprinkler sprinkler; public ConcreteMediator(Alarm alarm, CoffeePot coffeePot, Calender calender, Sprinkler sprinkler) { this.alarm = alarm; this.coffeePot = coffeePot; this.calender = calender; this.sprinkler = sprinkler; } @Override public void doEvent(String eventType) { switch (eventType) { case \"alarm\": doAlarmEvent(); break; case \"coffeePot\": doCoffeePotEvent(); break; case \"calender\": doCalenderEvent(); break; default: doSprinklerEvent(); } } public void doAlarmEvent() { alarm.doAlarm(); coffeePot.doCoffeePot(); calender.doCalender(); sprinkler.doSprinkler(); } public void doCoffeePotEvent() { // ... } public void doCalenderEvent() { // ... } public void doSprinklerEvent() { // ... } } public class Client { public static void main(String[] args) { Alarm alarm = new Alarm(); CoffeePot coffeePot = new CoffeePot(); Calender calender = new Calender(); Sprinkler sprinkler = new Sprinkler(); Mediator mediator = new ConcreteMediator(alarm, coffeePot, calender, sprinkler); // \u95f9\u949f\u4e8b\u4ef6\u5230\u8fbe\uff0c\u8c03\u7528\u4e2d\u4ecb\u8005\u5c31\u53ef\u4ee5\u64cd\u4f5c\u76f8\u5173\u5bf9\u8c61 alarm.onEvent(mediator); } } doAlarm() doCoffeePot() doCalender() doSprinkler()","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_9","text":"All scheduleXXX() methods of java.util.Timer java.util.concurrent.Executor#execute() submit() and invokeXXX() methods of java.util.concurrent.ExecutorService scheduleXXX() methods of java.util.concurrent.ScheduledExecutorService java.lang.reflect.Method#invoke()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#6-memento","text":"","title":"6. \u5907\u5fd8\u5f55\uff08Memento\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_11","text":"\u5728\u4e0d\u8fdd\u53cd\u5c01\u88c5\u7684\u60c5\u51b5\u4e0b\u83b7\u5f97\u5bf9\u8c61\u7684\u5185\u90e8\u72b6\u6001\uff0c\u4ece\u800c\u5728\u9700\u8981\u65f6\u53ef\u4ee5\u5c06\u5bf9\u8c61\u6062\u590d\u5230\u6700\u521d\u72b6\u6001\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_11","text":"Originator\uff1a\u539f\u59cb\u5bf9\u8c61 Caretaker\uff1a\u8d1f\u8d23\u4fdd\u5b58\u597d\u5907\u5fd8\u5f55 Menento\uff1a\u5907\u5fd8\u5f55\uff0c\u5b58\u50a8\u539f\u59cb\u5bf9\u8c61\u7684\u7684\u72b6\u6001\u3002\u5907\u5fd8\u5f55\u5b9e\u9645\u4e0a\u6709\u4e24\u4e2a\u63a5\u53e3\uff0c\u4e00\u4e2a\u662f\u63d0\u4f9b\u7ed9 Caretaker \u7684\u7a84\u63a5\u53e3\uff1a\u5b83\u53ea\u80fd\u5c06\u5907\u5fd8\u5f55\u4f20\u9012\u7ed9\u5176\u5b83\u5bf9\u8c61\uff1b\u4e00\u4e2a\u662f\u63d0\u4f9b\u7ed9 Originator \u7684\u5bbd\u63a5\u53e3\uff0c\u5141\u8bb8\u5b83\u8bbf\u95ee\u5230\u5148\u524d\u72b6\u6001\u6240\u9700\u7684\u6240\u6709\u6570\u636e\u3002\u7406\u60f3\u60c5\u51b5\u662f\u53ea\u5141\u8bb8 Originator \u8bbf\u95ee\u672c\u5907\u5fd8\u5f55\u7684\u5185\u90e8\u72b6\u6001\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_11","text":"\u4ee5\u4e0b\u5b9e\u73b0\u4e86\u4e00\u4e2a\u7b80\u5355\u8ba1\u7b97\u5668\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u8f93\u5165\u4e24\u4e2a\u503c\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e24\u4e2a\u503c\u7684\u548c\u3002\u5907\u5fd8\u5f55\u6a21\u5f0f\u5141\u8bb8\u5c06\u8fd9\u4e24\u4e2a\u503c\u5b58\u50a8\u8d77\u6765\uff0c\u7136\u540e\u5728\u67d0\u4e2a\u65f6\u523b\u7528\u5b58\u50a8\u7684\u72b6\u6001\u8fdb\u884c\u6062\u590d\u3002 \u5b9e\u73b0\u53c2\u8003\uff1a Memento Pattern - Calculator Example - Java Sourcecode /** * Originator Interface */ public interface Calculator { // Create Memento PreviousCalculationToCareTaker backupLastCalculation(); // setMemento void restorePreviousCalculation(PreviousCalculationToCareTaker memento); int getCalculationResult(); void setFirstNumber(int firstNumber); void setSecondNumber(int secondNumber); } /** * Originator Implementation */ public class CalculatorImp implements Calculator { private int firstNumber; private int secondNumber; @Override public PreviousCalculationToCareTaker backupLastCalculation() { // create a memento object used for restoring two numbers return new PreviousCalculationImp(firstNumber, secondNumber); } @Override public void restorePreviousCalculation(PreviousCalculationToCareTaker memento) { this.firstNumber = ((PreviousCalculationToOriginator) memento).getFirstNumber(); this.secondNumber = ((PreviousCalculationToOriginator) memento).getSecondNumber(); } @Override public int getCalculationResult() { // result is adding two numbers return firstNumber + secondNumber; } @Override public void setFirstNumber(int firstNumber) { this.firstNumber = firstNumber; } @Override public void setSecondNumber(int secondNumber) { this.secondNumber = secondNumber; } } /** * Memento Interface to Originator * * This interface allows the originator to restore its state */ public interface PreviousCalculationToOriginator { int getFirstNumber(); int getSecondNumber(); } /** * Memento interface to CalculatorOperator (Caretaker) */ public interface PreviousCalculationToCareTaker { // no operations permitted for the caretaker } /** * Memento Object Implementation * <p> * Note that this object implements both interfaces to Originator and CareTaker */ public class PreviousCalculationImp implements PreviousCalculationToCareTaker, PreviousCalculationToOriginator { private int firstNumber; private int secondNumber; public PreviousCalculationImp(int firstNumber, int secondNumber) { this.firstNumber = firstNumber; this.secondNumber = secondNumber; } @Override public int getFirstNumber() { return firstNumber; } @Override public int getSecondNumber() { return secondNumber; } } /** * CareTaker object */ public class Client { public static void main(String[] args) { // program starts Calculator calculator = new CalculatorImp(); // assume user enters two numbers calculator.setFirstNumber(10); calculator.setSecondNumber(100); // find result System.out.println(calculator.getCalculationResult()); // Store result of this calculation in case of error PreviousCalculationToCareTaker memento = calculator.backupLastCalculation(); // user enters a number calculator.setFirstNumber(17); // user enters a wrong second number and calculates result calculator.setSecondNumber(-290); // calculate result System.out.println(calculator.getCalculationResult()); // user hits CTRL + Z to undo last operation and see last result calculator.restorePreviousCalculation(memento); // result restored System.out.println(calculator.getCalculationResult()); } } 110 -273 110","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_10","text":"java.io.Serializable","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#7-observer","text":"","title":"7. \u89c2\u5bdf\u8005\uff08Observer\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_12","text":"\u5b9a\u4e49\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u5bf9\u591a\u4f9d\u8d56\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u72b6\u6001\u6539\u53d8\u65f6\uff0c\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u90fd\u4f1a\u6536\u5230\u901a\u77e5\u5e76\u4e14\u81ea\u52a8\u66f4\u65b0\u72b6\u6001\u3002 \u4e3b\u9898\uff08Subject\uff09\u662f\u88ab\u89c2\u5bdf\u7684\u5bf9\u8c61\uff0c\u800c\u5176\u6240\u6709\u4f9d\u8d56\u8005\uff08Observer\uff09\u79f0\u4e3a\u89c2\u5bdf\u8005\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_12","text":"\u4e3b\u9898\uff08Subject\uff09\u5177\u6709\u6ce8\u518c\u548c\u79fb\u9664\u89c2\u5bdf\u8005\u3001\u5e76\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u8005\u7684\u529f\u80fd\uff0c\u4e3b\u9898\u662f\u901a\u8fc7\u7ef4\u62a4\u4e00\u5f20\u89c2\u5bdf\u8005\u5217\u8868\u6765\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\u7684\u3002 \u89c2\u5bdf\u8005\uff08Observer\uff09\u7684\u6ce8\u518c\u529f\u80fd\u9700\u8981\u8c03\u7528\u4e3b\u9898\u7684 registerObserver() \u65b9\u6cd5\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_12","text":"\u5929\u6c14\u6570\u636e\u5e03\u544a\u677f\u4f1a\u5728\u5929\u6c14\u4fe1\u606f\u53d1\u751f\u6539\u53d8\u65f6\u66f4\u65b0\u5176\u5185\u5bb9\uff0c\u5e03\u544a\u677f\u6709\u591a\u4e2a\uff0c\u5e76\u4e14\u5728\u5c06\u6765\u4f1a\u7ee7\u7eed\u589e\u52a0\u3002 public interface Subject { void registerObserver(Observer o); void removeObserver(Observer o); void notifyObserver(); } public class WeatherData implements Subject { private List<Observer> observers; private float temperature; private float humidity; private float pressure; public WeatherData() { observers = new ArrayList<>(); } public void setMeasurements(float temperature, float humidity, float pressure) { this.temperature = temperature; this.humidity = humidity; this.pressure = pressure; notifyObserver(); } @Override public void registerObserver(Observer o) { observers.add(o); } @Override public void removeObserver(Observer o) { int i = observers.indexOf(o); if (i >= 0) { observers.remove(i); } } @Override public void notifyObserver() { for (Observer o : observers) { o.update(temperature, humidity, pressure); } } } public interface Observer { void update(float temp, float humidity, float pressure); } public class StatisticsDisplay implements Observer { public StatisticsDisplay(Subject weatherData) { weatherData.reisterObserver(this); } @Override public void update(float temp, float humidity, float pressure) { System.out.println(\"StatisticsDisplay.update: \" + temp + \" \" + humidity + \" \" + pressure); } } public class CurrentConditionsDisplay implements Observer { public CurrentConditionsDisplay(Subject weatherData) { weatherData.registerObserver(this); } @Override public void update(float temp, float humidity, float pressure) { System.out.println(\"CurrentConditionsDisplay.update: \" + temp + \" \" + humidity + \" \" + pressure); } } public class WeatherStation { public static void main(String[] args) { WeatherData weatherData = new WeatherData(); CurrentConditionsDisplay currentConditionsDisplay = new CurrentConditionsDisplay(weatherData); StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData); weatherData.setMeasurements(0, 0, 0); weatherData.setMeasurements(1, 1, 1); } } CurrentConditionsDisplay.update: 0.0 0.0 0.0 StatisticsDisplay.update: 0.0 0.0 0.0 CurrentConditionsDisplay.update: 1.0 1.0 1.0 StatisticsDisplay.update: 1.0 1.0 1.0","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_11","text":"java.util.Observer java.util.EventListener javax.servlet.http.HttpSessionBindingListener RxJava","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#8-state","text":"","title":"8. \u72b6\u6001\uff08State\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_13","text":"\u5141\u8bb8\u5bf9\u8c61\u5728\u5185\u90e8\u72b6\u6001\u6539\u53d8\u65f6\u6539\u53d8\u5b83\u7684\u884c\u4e3a\uff0c\u5bf9\u8c61\u770b\u8d77\u6765\u597d\u50cf\u4fee\u6539\u4e86\u5b83\u6240\u5c5e\u7684\u7c7b\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_13","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_13","text":"\u7cd6\u679c\u9500\u552e\u673a\u6709\u591a\u79cd\u72b6\u6001\uff0c\u6bcf\u79cd\u72b6\u6001\u4e0b\u9500\u552e\u673a\u6709\u4e0d\u540c\u7684\u884c\u4e3a\uff0c\u72b6\u6001\u53ef\u4ee5\u53d1\u751f\u8f6c\u79fb\uff0c\u4f7f\u5f97\u9500\u552e\u673a\u7684\u884c\u4e3a\u4e5f\u53d1\u751f\u6539\u53d8\u3002 public interface State { /** * \u6295\u5165 25 \u5206\u94b1 */ void insertQuarter(); /** * \u9000\u56de 25 \u5206\u94b1 */ void ejectQuarter(); /** * \u8f6c\u52a8\u66f2\u67c4 */ void turnCrank(); /** * \u53d1\u653e\u7cd6\u679c */ void dispense(); } public class HasQuarterState implements State { private GumballMachine gumballMachine; public HasQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You can't insert another quarter\"); } @Override public void ejectQuarter() { System.out.println(\"Quarter returned\"); gumballMachine.setState(gumballMachine.getNoQuarterState()); } @Override public void turnCrank() { System.out.println(\"You turned...\"); gumballMachine.setState(gumballMachine.getSoldState()); } @Override public void dispense() { System.out.println(\"No gumball dispensed\"); } } public class NoQuarterState implements State { GumballMachine gumballMachine; public NoQuarterState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You insert a quarter\"); gumballMachine.setState(gumballMachine.getHasQuarterState()); } @Override public void ejectQuarter() { System.out.println(\"You haven't insert a quarter\"); } @Override public void turnCrank() { System.out.println(\"You turned, but there's no quarter\"); } @Override public void dispense() { System.out.println(\"You need to pay first\"); } } public class SoldOutState implements State { GumballMachine gumballMachine; public SoldOutState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"You can't insert a quarter, the machine is sold out\"); } @Override public void ejectQuarter() { System.out.println(\"You can't eject, you haven't inserted a quarter yet\"); } @Override public void turnCrank() { System.out.println(\"You turned, but there are no gumballs\"); } @Override public void dispense() { System.out.println(\"No gumball dispensed\"); } } public class SoldState implements State { GumballMachine gumballMachine; public SoldState(GumballMachine gumballMachine) { this.gumballMachine = gumballMachine; } @Override public void insertQuarter() { System.out.println(\"Please wait, we're already giving you a gumball\"); } @Override public void ejectQuarter() { System.out.println(\"Sorry, you already turned the crank\"); } @Override public void turnCrank() { System.out.println(\"Turning twice doesn't get you another gumball!\"); } @Override public void dispense() { gumballMachine.releaseBall(); if (gumballMachine.getCount() > 0) { gumballMachine.setState(gumballMachine.getNoQuarterState()); } else { System.out.println(\"Oops, out of gumballs\"); gumballMachine.setState(gumballMachine.getSoldOutState()); } } } public class GumballMachine { private State soldOutState; private State noQuarterState; private State hasQuarterState; private State soldState; private State state; private int count = 0; public GumballMachine(int numberGumballs) { count = numberGumballs; soldOutState = new SoldOutState(this); noQuarterState = new NoQuarterState(this); hasQuarterState = new HasQuarterState(this); soldState = new SoldState(this); if (numberGumballs > 0) { state = noQuarterState; } else { state = soldOutState; } } public void insertQuarter() { state.insertQuarter(); } public void ejectQuarter() { state.ejectQuarter(); } public void turnCrank() { state.turnCrank(); state.dispense(); } public void setState(State state) { this.state = state; } public void releaseBall() { System.out.println(\"A gumball comes rolling out the slot...\"); if (count != 0) { count -= 1; } } public State getSoldOutState() { return soldOutState; } public State getNoQuarterState() { return noQuarterState; } public State getHasQuarterState() { return hasQuarterState; } public State getSoldState() { return soldState; } public int getCount() { return count; } } public class Client { public static void main(String[] args) { GumballMachine gumballMachine = new GumballMachine(5); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.ejectQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.ejectQuarter(); gumballMachine.insertQuarter(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); gumballMachine.insertQuarter(); gumballMachine.turnCrank(); } } You insert a quarter You turned... A gumball comes rolling out the slot... You insert a quarter Quarter returned You turned, but there's no quarter You need to pay first You insert a quarter You turned... A gumball comes rolling out the slot... You insert a quarter You turned... A gumball comes rolling out the slot... You haven't insert a quarter You insert a quarter You can't insert another quarter You turned... A gumball comes rolling out the slot... You insert a quarter You turned... A gumball comes rolling out the slot... Oops, out of gumballs You can't insert a quarter, the machine is sold out You turned, but there are no gumballs No gumball dispensed","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#9-strategy","text":"","title":"9. \u7b56\u7565\uff08Strategy\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_14","text":"\u5b9a\u4e49\u4e00\u7cfb\u5217\u7b97\u6cd5\uff0c\u5c01\u88c5\u6bcf\u4e2a\u7b97\u6cd5\uff0c\u5e76\u4f7f\u5b83\u4eec\u53ef\u4ee5\u4e92\u6362\u3002 \u7b56\u7565\u6a21\u5f0f\u53ef\u4ee5\u8ba9\u7b97\u6cd5\u72ec\u7acb\u4e8e\u4f7f\u7528\u5b83\u7684\u5ba2\u6237\u7aef\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_14","text":"Strategy \u63a5\u53e3\u5b9a\u4e49\u4e86\u4e00\u4e2a\u7b97\u6cd5\u65cf\uff0c\u5b83\u4eec\u90fd\u5b9e\u73b0\u4e86 behavior() \u65b9\u6cd5\u3002 Context \u662f\u4f7f\u7528\u5230\u8be5\u7b97\u6cd5\u65cf\u7684\u7c7b\uff0c\u5176\u4e2d\u7684 doSomething() \u65b9\u6cd5\u4f1a\u8c03\u7528 behavior()\uff0csetStrategy(Strategy) \u65b9\u6cd5\u53ef\u4ee5\u52a8\u6001\u5730\u6539\u53d8 strategy \u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u80fd\u52a8\u6001\u5730\u6539\u53d8 Context \u6240\u4f7f\u7528\u7684\u7b97\u6cd5\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_4","text":"\u72b6\u6001\u6a21\u5f0f\u7684\u7c7b\u56fe\u548c\u7b56\u7565\u6a21\u5f0f\u7c7b\u4f3c\uff0c\u5e76\u4e14\u90fd\u662f\u80fd\u591f\u52a8\u6001\u6539\u53d8\u5bf9\u8c61\u7684\u884c\u4e3a\u3002\u4f46\u662f\u72b6\u6001\u6a21\u5f0f\u662f\u901a\u8fc7\u72b6\u6001\u8f6c\u79fb\u6765\u6539\u53d8 Context \u6240\u7ec4\u5408\u7684 State \u5bf9\u8c61\uff0c\u800c\u7b56\u7565\u6a21\u5f0f\u662f\u901a\u8fc7 Context \u672c\u8eab\u7684\u51b3\u7b56\u6765\u6539\u53d8\u7ec4\u5408\u7684 Strategy \u5bf9\u8c61\u3002\u6240\u8c13\u7684\u72b6\u6001\u8f6c\u79fb\uff0c\u662f\u6307 Context \u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u7531\u4e8e\u4e00\u4e9b\u6761\u4ef6\u53d1\u751f\u6539\u53d8\u800c\u4f7f\u5f97 State \u5bf9\u8c61\u53d1\u751f\u6539\u53d8\uff0c\u6ce8\u610f\u5fc5\u987b\u8981\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u3002 \u72b6\u6001\u6a21\u5f0f\u4e3b\u8981\u662f\u7528\u6765\u89e3\u51b3\u72b6\u6001\u8f6c\u79fb\u7684\u95ee\u9898\uff0c\u5f53\u72b6\u6001\u53d1\u751f\u8f6c\u79fb\u4e86\uff0c\u90a3\u4e48 Context \u5bf9\u8c61\u5c31\u4f1a\u6539\u53d8\u5b83\u7684\u884c\u4e3a\uff1b\u800c\u7b56\u7565\u6a21\u5f0f\u4e3b\u8981\u662f\u7528\u6765\u5c01\u88c5\u4e00\u7ec4\u53ef\u4ee5\u4e92\u76f8\u66ff\u4ee3\u7684\u7b97\u6cd5\u65cf\uff0c\u5e76\u4e14\u53ef\u4ee5\u6839\u636e\u9700\u8981\u52a8\u6001\u5730\u53bb\u66ff\u6362 Context \u4f7f\u7528\u7684\u7b97\u6cd5\u3002","title":"\u4e0e\u72b6\u6001\u6a21\u5f0f\u7684\u6bd4\u8f83"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_14","text":"\u8bbe\u8ba1\u4e00\u4e2a\u9e2d\u5b50\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u6539\u53d8\u53eb\u58f0\u3002\u8fd9\u91cc\u7684\u7b97\u6cd5\u65cf\u662f\u9e2d\u5b50\u7684\u53eb\u58f0\u884c\u4e3a\u3002 public interface QuackBehavior { void quack(); } public class Quack implements QuackBehavior { @Override public void quack() { System.out.println(\"quack!\"); } } public class Squeak implements QuackBehavior{ @Override public void quack() { System.out.println(\"squeak!\"); } } public class Duck { private QuackBehavior quackBehavior; public void performQuack() { if (quackBehavior != null) { quackBehavior.quack(); } } public void setQuackBehavior(QuackBehavior quackBehavior) { this.quackBehavior = quackBehavior; } } public class Client { public static void main(String[] args) { Duck duck = new Duck(); duck.setQuackBehavior(new Squeak()); duck.performQuack(); duck.setQuackBehavior(new Quack()); duck.performQuack(); } } squeak! quack!","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_12","text":"java.util.Comparator#compare() javax.servlet.http.HttpServlet javax.servlet.Filter#doFilter()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#10-template-method","text":"","title":"10. \u6a21\u677f\u65b9\u6cd5\uff08Template Method\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_15","text":"\u5b9a\u4e49\u7b97\u6cd5\u6846\u67b6\uff0c\u5e76\u5c06\u4e00\u4e9b\u6b65\u9aa4\u7684\u5b9e\u73b0\u5ef6\u8fdf\u5230\u5b50\u7c7b\u3002 \u901a\u8fc7\u6a21\u677f\u65b9\u6cd5\uff0c\u5b50\u7c7b\u53ef\u4ee5\u91cd\u65b0\u5b9a\u4e49\u7b97\u6cd5\u7684\u67d0\u4e9b\u6b65\u9aa4\uff0c\u800c\u4e0d\u7528\u6539\u53d8\u7b97\u6cd5\u7684\u7ed3\u6784\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_15","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_15","text":"\u51b2\u5496\u5561\u548c\u51b2\u8336\u90fd\u6709\u7c7b\u4f3c\u7684\u6d41\u7a0b\uff0c\u4f46\u662f\u67d0\u4e9b\u6b65\u9aa4\u4f1a\u6709\u70b9\u4e0d\u4e00\u6837\uff0c\u8981\u6c42\u590d\u7528\u90a3\u4e9b\u76f8\u540c\u6b65\u9aa4\u7684\u4ee3\u7801\u3002 public abstract class CaffeineBeverage { final void prepareRecipe() { boilWater(); brew(); pourInCup(); addCondiments(); } abstract void brew(); abstract void addCondiments(); void boilWater() { System.out.println(\"boilWater\"); } void pourInCup() { System.out.println(\"pourInCup\"); } } public class Coffee extends CaffeineBeverage { @Override void brew() { System.out.println(\"Coffee.brew\"); } @Override void addCondiments() { System.out.println(\"Coffee.addCondiments\"); } } public class Tea extends CaffeineBeverage { @Override void brew() { System.out.println(\"Tea.brew\"); } @Override void addCondiments() { System.out.println(\"Tea.addCondiments\"); } } public class Client { public static void main(String[] args) { CaffeineBeverage caffeineBeverage = new Coffee(); caffeineBeverage.prepareRecipe(); System.out.println(\"-----------\"); caffeineBeverage = new Tea(); caffeineBeverage.prepareRecipe(); } } boilWater Coffee.brew pourInCup Coffee.addCondiments ----------- boilWater Tea.brew pourInCup Tea.addCondiments","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_13","text":"java.util.Collections#sort() java.io.InputStream#skip() java.io.InputStream#read() java.util.AbstractList#indexOf()","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#11-visitor","text":"","title":"11. \u8bbf\u95ee\u8005\uff08Visitor\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_16","text":"\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u7ed3\u6784\uff08\u6bd4\u5982\u7ec4\u5408\u7ed3\u6784\uff09\u589e\u52a0\u65b0\u80fd\u529b\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_16","text":"Visitor\uff1a\u8bbf\u95ee\u8005\uff0c\u4e3a\u6bcf\u4e00\u4e2a ConcreteElement \u58f0\u660e\u4e00\u4e2a visit \u64cd\u4f5c ConcreteVisitor\uff1a\u5177\u4f53\u8bbf\u95ee\u8005\uff0c\u5b58\u50a8\u904d\u5386\u8fc7\u7a0b\u4e2d\u7684\u7d2f\u8ba1\u7ed3\u679c ObjectStructure\uff1a\u5bf9\u8c61\u7ed3\u6784\uff0c\u53ef\u4ee5\u662f\u7ec4\u5408\u7ed3\u6784\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u96c6\u5408\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_16","text":"public interface Element { void accept(Visitor visitor); } class CustomerGroup { private List<Customer> customers = new ArrayList<>(); void accept(Visitor visitor) { for (Customer customer : customers) { customer.accept(visitor); } } void addCustomer(Customer customer) { customers.add(customer); } } public class Customer implements Element { private String name; private List<Order> orders = new ArrayList<>(); Customer(String name) { this.name = name; } String getName() { return name; } void addOrder(Order order) { orders.add(order); } public void accept(Visitor visitor) { visitor.visit(this); for (Order order : orders) { order.accept(visitor); } } } public class Order implements Element { private String name; private List<Item> items = new ArrayList(); Order(String name) { this.name = name; } Order(String name, String itemName) { this.name = name; this.addItem(new Item(itemName)); } String getName() { return name; } void addItem(Item item) { items.add(item); } public void accept(Visitor visitor) { visitor.visit(this); for (Item item : items) { item.accept(visitor); } } } public class Item implements Element { private String name; Item(String name) { this.name = name; } String getName() { return name; } public void accept(Visitor visitor) { visitor.visit(this); } } public interface Visitor { void visit(Customer customer); void visit(Order order); void visit(Item item); } public class GeneralReport implements Visitor { private int customersNo; private int ordersNo; private int itemsNo; public void visit(Customer customer) { System.out.println(customer.getName()); customersNo++; } public void visit(Order order) { System.out.println(order.getName()); ordersNo++; } public void visit(Item item) { System.out.println(item.getName()); itemsNo++; } public void displayResults() { System.out.println(\"Number of customers: \" + customersNo); System.out.println(\"Number of orders: \" + ordersNo); System.out.println(\"Number of items: \" + itemsNo); } } public class Client { public static void main(String[] args) { Customer customer1 = new Customer(\"customer1\"); customer1.addOrder(new Order(\"order1\", \"item1\")); customer1.addOrder(new Order(\"order2\", \"item1\")); customer1.addOrder(new Order(\"order3\", \"item1\")); Order order = new Order(\"order_a\"); order.addItem(new Item(\"item_a1\")); order.addItem(new Item(\"item_a2\")); order.addItem(new Item(\"item_a3\")); Customer customer2 = new Customer(\"customer2\"); customer2.addOrder(order); CustomerGroup customers = new CustomerGroup(); customers.addCustomer(customer1); customers.addCustomer(customer2); GeneralReport visitor = new GeneralReport(); customers.accept(visitor); visitor.displayResults(); } } customer1 order1 item1 order2 item1 order3 item1 customer2 order_a item_a1 item_a2 item_a3 Number of customers: 2 Number of orders: 4 Number of items: 6","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_14","text":"javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#12-null","text":"","title":"12. \u7a7a\u5bf9\u8c61\uff08Null\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_17","text":"\u4f7f\u7528\u4ec0\u4e48\u90fd\u4e0d\u505a\u7684\u7a7a\u5bf9\u8c61\u6765\u4ee3\u66ff NULL\u3002 \u4e00\u4e2a\u65b9\u6cd5\u8fd4\u56de NULL\uff0c\u610f\u5473\u7740\u65b9\u6cd5\u7684\u8c03\u7528\u7aef\u9700\u8981\u53bb\u68c0\u67e5\u8fd4\u56de\u503c\u662f\u5426\u662f NULL\uff0c\u8fd9\u4e48\u505a\u4f1a\u5bfc\u81f4\u975e\u5e38\u591a\u7684\u5197\u4f59\u7684\u68c0\u67e5\u4ee3\u7801\u3002\u5e76\u4e14\u5982\u679c\u67d0\u4e00\u4e2a\u8c03\u7528\u7aef\u5fd8\u8bb0\u4e86\u505a\u8fd9\u4e2a\u68c0\u67e5\u8fd4\u56de\u503c\uff0c\u800c\u76f4\u63a5\u4f7f\u7528\u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u90a3\u4e48\u5c31\u6709\u53ef\u80fd\u629b\u51fa\u7a7a\u6307\u9488\u5f02\u5e38\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_17","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_17","text":"public abstract class AbstractOperation { abstract void request(); } public class RealOperation extends AbstractOperation { @Override void request() { System.out.println(\"do something\"); } } public class NullOperation extends AbstractOperation{ @Override void request() { // do nothing } } public class Client { public static void main(String[] args) { AbstractOperation abstractOperation = func(-1); abstractOperation.request(); } public static AbstractOperation func(int para) { if (para < 0) { return new NullOperation(); } return new RealOperation(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_5","text":"","title":"\u56db\u3001\u7ed3\u6784\u578b"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#1-adapter","text":"","title":"1. \u9002\u914d\u5668\uff08Adapter\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_18","text":"\u628a\u4e00\u4e2a\u7c7b\u63a5\u53e3\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u7528\u6237\u9700\u8981\u7684\u63a5\u53e3\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_18","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_18","text":"\u9e2d\u5b50\uff08Duck\uff09\u548c\u706b\u9e21\uff08Turkey\uff09\u62e5\u6709\u4e0d\u540c\u7684\u53eb\u58f0\uff0cDuck \u7684\u53eb\u58f0\u8c03\u7528 quack() \u65b9\u6cd5\uff0c\u800c Turkey \u8c03\u7528 gobble() \u65b9\u6cd5\u3002 \u8981\u6c42\u5c06 Turkey \u7684 gobble() \u65b9\u6cd5\u9002\u914d\u6210 Duck \u7684 quack() \u65b9\u6cd5\uff0c\u4ece\u800c\u8ba9\u706b\u9e21\u5192\u5145\u9e2d\u5b50\uff01 public interface Duck { void quack(); } public interface Turkey { void gobble(); } public class WildTurkey implements Turkey { @Override public void gobble() { System.out.println(\"gobble!\"); } } public class TurkeyAdapter implements Duck { Turkey turkey; public TurkeyAdapter(Turkey turkey) { this.turkey = turkey; } @Override public void quack() { turkey.gobble(); } } public class Client { public static void main(String[] args) { Turkey turkey = new WildTurkey(); Duck duck = new TurkeyAdapter(turkey); duck.quack(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_15","text":"java.util.Arrays#asList() java.util.Collections#list() java.util.Collections#enumeration() javax.xml.bind.annotation.adapters.XMLAdapter","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#2-bridge","text":"","title":"2. \u6865\u63a5\uff08Bridge\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_19","text":"\u5c06\u62bd\u8c61\u4e0e\u5b9e\u73b0\u5206\u79bb\u5f00\u6765\uff0c\u4f7f\u5b83\u4eec\u53ef\u4ee5\u72ec\u7acb\u53d8\u5316\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_19","text":"Abstraction\uff1a\u5b9a\u4e49\u62bd\u8c61\u7c7b\u7684\u63a5\u53e3 Implementor\uff1a\u5b9a\u4e49\u5b9e\u73b0\u7c7b\u63a5\u53e3","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_19","text":"RemoteControl \u8868\u793a\u9065\u63a7\u5668\uff0c\u6307\u4ee3 Abstraction\u3002 TV \u8868\u793a\u7535\u89c6\uff0c\u6307\u4ee3 Implementor\u3002 \u6865\u63a5\u6a21\u5f0f\u5c06\u9065\u63a7\u5668\u548c\u7535\u89c6\u5206\u79bb\u5f00\u6765\uff0c\u4ece\u800c\u53ef\u4ee5\u72ec\u7acb\u6539\u53d8\u9065\u63a7\u5668\u6216\u8005\u7535\u89c6\u7684\u5b9e\u73b0\u3002 public abstract class TV { public abstract void on(); public abstract void off(); public abstract void tuneChannel(); } public class Sony extends TV { @Override public void on() { System.out.println(\"Sony.on()\"); } @Override public void off() { System.out.println(\"Sony.off()\"); } @Override public void tuneChannel() { System.out.println(\"Sony.tuneChannel()\"); } } public class RCA extends TV { @Override public void on() { System.out.println(\"RCA.on()\"); } @Override public void off() { System.out.println(\"RCA.off()\"); } @Override public void tuneChannel() { System.out.println(\"RCA.tuneChannel()\"); } } public abstract class RemoteControl { protected TV tv; public RemoteControl(TV tv) { this.tv = tv; } public abstract void on(); public abstract void off(); public abstract void tuneChannel(); } public class ConcreteRemoteControl1 extends RemoteControl { public ConcreteRemoteControl1(TV tv) { super(tv); } @Override public void on() { System.out.println(\"ConcreteRemoteControl1.on()\"); tv.on(); } @Override public void off() { System.out.println(\"ConcreteRemoteControl1.off()\"); tv.off(); } @Override public void tuneChannel() { System.out.println(\"ConcreteRemoteControl1.tuneChannel()\"); tv.tuneChannel(); } } public class ConcreteRemoteControl2 extends RemoteControl { public ConcreteRemoteControl2(TV tv) { super(tv); } @Override public void on() { System.out.println(\"ConcreteRemoteControl2.on()\"); tv.on(); } @Override public void off() { System.out.println(\"ConcreteRemoteControl2.off()\"); tv.off(); } @Override public void tuneChannel() { System.out.println(\"ConcreteRemoteControl2.tuneChannel()\"); tv.tuneChannel(); } } public class Client { public static void main(String[] args) { RemoteControl remoteControl1 = new ConcreteRemoteControl1(new RCA()); remoteControl1.on(); remoteControl1.off(); remoteControl1.tuneChannel(); RemoteControl remoteControl2 = new ConcreteRemoteControl2(new Sony()); remoteControl2.on(); remoteControl2.off(); remoteControl2.tuneChannel(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_16","text":"AWT (It provides an abstraction layer which maps onto the native OS the windowing support.) JDBC","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#3-composite","text":"","title":"3. \u7ec4\u5408\uff08Composite\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_20","text":"\u5c06\u5bf9\u8c61\u7ec4\u5408\u6210\u6811\u5f62\u7ed3\u6784\u6765\u8868\u793a\u201c\u6574\u4f53/\u90e8\u5206\u201d\u5c42\u6b21\u5173\u7cfb\uff0c\u5141\u8bb8\u7528\u6237\u4ee5\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u5355\u72ec\u5bf9\u8c61\u548c\u7ec4\u5408\u5bf9\u8c61\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_20","text":"\u7ec4\u4ef6\uff08Component\uff09\u7c7b\u662f\u7ec4\u5408\u7c7b\uff08Composite\uff09\u548c\u53f6\u5b50\u7c7b\uff08Leaf\uff09\u7684\u7236\u7c7b\uff0c\u53ef\u4ee5\u628a\u7ec4\u5408\u7c7b\u770b\u6210\u662f\u6811\u7684\u4e2d\u95f4\u8282\u70b9\u3002 \u7ec4\u5408\u5bf9\u8c61\u62e5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u7ec4\u4ef6\u5bf9\u8c61\uff0c\u56e0\u6b64\u7ec4\u5408\u5bf9\u8c61\u7684\u64cd\u4f5c\u53ef\u4ee5\u59d4\u6258\u7ed9\u7ec4\u4ef6\u5bf9\u8c61\u53bb\u5904\u7406\uff0c\u800c\u7ec4\u4ef6\u5bf9\u8c61\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u7ec4\u5408\u5bf9\u8c61\u6216\u8005\u53f6\u5b50\u5bf9\u8c61\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_20","text":"public abstract class Component { protected String name; public Component(String name) { this.name = name; } public void print() { print(0); } abstract void print(int level); abstract public void add(Component component); abstract public void remove(Component component); } public class Composite extends Component { private List<Component> child; public Composite(String name) { super(name); child = new ArrayList<>(); } @Override void print(int level) { for (int i = 0; i < level; i++) { System.out.print(\"--\"); } System.out.println(\"Composite:\" + name); for (Component component : child) { component.print(level + 1); } } @Override public void add(Component component) { child.add(component); } @Override public void remove(Component component) { child.remove(component); } } public class Leaf extends Component { public Leaf(String name) { super(name); } @Override void print(int level) { for (int i = 0; i < level; i++) { System.out.print(\"--\"); } System.out.println(\"left:\" + name); } @Override public void add(Component component) { throw new UnsupportedOperationException(); // \u727a\u7272\u900f\u660e\u6027\u6362\u53d6\u5355\u4e00\u804c\u8d23\u539f\u5219\uff0c\u8fd9\u6837\u5c31\u4e0d\u7528\u8003\u8651\u662f\u53f6\u5b50\u8282\u70b9\u8fd8\u662f\u7ec4\u5408\u8282\u70b9 } @Override public void remove(Component component) { throw new UnsupportedOperationException(); } } public class Client { public static void main(String[] args) { Composite root = new Composite(\"root\"); Component node1 = new Leaf(\"1\"); Component node2 = new Composite(\"2\"); Component node3 = new Leaf(\"3\"); root.add(node1); root.add(node2); root.add(node3); Component node21 = new Leaf(\"21\"); Component node22 = new Composite(\"22\"); node2.add(node21); node2.add(node22); Component node221 = new Leaf(\"221\"); node22.add(node221); root.print(); } } Composite:root --left:1 --Composite:2 ----left:21 ----Composite:22 ------left:221 --left:3","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_17","text":"javax.swing.JComponent#add(Component) java.awt.Container#add(Component) java.util.Map#putAll(Map) java.util.List#addAll(Collection) java.util.Set#addAll(Collection)","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#4-decorator","text":"","title":"4. \u88c5\u9970\uff08Decorator\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_21","text":"\u4e3a\u5bf9\u8c61\u52a8\u6001\u6dfb\u52a0\u529f\u80fd\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_21","text":"\u88c5\u9970\u8005\uff08Decorator\uff09\u548c\u5177\u4f53\u7ec4\u4ef6\uff08ConcreteComponent\uff09\u90fd\u7ee7\u627f\u81ea\u7ec4\u4ef6\uff08Component\uff09\uff0c\u5177\u4f53\u7ec4\u4ef6\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u9700\u8981\u4f9d\u8d56\u4e8e\u5176\u5b83\u5bf9\u8c61\uff0c\u800c\u88c5\u9970\u8005\u7ec4\u5408\u4e86\u4e00\u4e2a\u7ec4\u4ef6\uff0c\u8fd9\u6837\u5b83\u53ef\u4ee5\u88c5\u9970\u5176\u5b83\u88c5\u9970\u8005\u6216\u8005\u5177\u4f53\u7ec4\u4ef6\u3002\u6240\u8c13\u88c5\u9970\uff0c\u5c31\u662f\u628a\u8fd9\u4e2a\u88c5\u9970\u8005\u5957\u5728\u88ab\u88c5\u9970\u8005\u4e4b\u4e0a\uff0c\u4ece\u800c\u52a8\u6001\u6269\u5c55\u88ab\u88c5\u9970\u8005\u7684\u529f\u80fd\u3002\u88c5\u9970\u8005\u7684\u65b9\u6cd5\u6709\u4e00\u90e8\u5206\u662f\u81ea\u5df1\u7684\uff0c\u8fd9\u5c5e\u4e8e\u5b83\u7684\u529f\u80fd\uff0c\u7136\u540e\u8c03\u7528\u88ab\u88c5\u9970\u8005\u7684\u65b9\u6cd5\u5b9e\u73b0\uff0c\u4ece\u800c\u4e5f\u4fdd\u7559\u4e86\u88ab\u88c5\u9970\u8005\u7684\u529f\u80fd\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u5177\u4f53\u7ec4\u4ef6\u5e94\u5f53\u662f\u88c5\u9970\u5c42\u6b21\u7684\u6700\u4f4e\u5c42\uff0c\u56e0\u4e3a\u53ea\u6709\u5177\u4f53\u7ec4\u4ef6\u7684\u65b9\u6cd5\u5b9e\u73b0\u4e0d\u9700\u8981\u4f9d\u8d56\u4e8e\u5176\u5b83\u5bf9\u8c61\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_21","text":"\u8bbe\u8ba1\u4e0d\u540c\u79cd\u7c7b\u7684\u996e\u6599\uff0c\u996e\u6599\u53ef\u4ee5\u6dfb\u52a0\u914d\u6599\uff0c\u6bd4\u5982\u53ef\u4ee5\u6dfb\u52a0\u725b\u5976\uff0c\u5e76\u4e14\u652f\u6301\u52a8\u6001\u6dfb\u52a0\u65b0\u914d\u6599\u3002\u6bcf\u589e\u52a0\u4e00\u79cd\u914d\u6599\uff0c\u8be5\u996e\u6599\u7684\u4ef7\u683c\u5c31\u4f1a\u589e\u52a0\uff0c\u8981\u6c42\u8ba1\u7b97\u4e00\u79cd\u996e\u6599\u7684\u4ef7\u683c\u3002 \u4e0b\u56fe\u8868\u793a\u5728 DarkRoast \u996e\u6599\u4e0a\u65b0\u589e\u65b0\u6dfb\u52a0 Mocha \u914d\u6599\uff0c\u4e4b\u540e\u53c8\u6dfb\u52a0\u4e86 Whip \u914d\u6599\u3002DarkRoast \u88ab Mocha \u5305\u88f9\uff0cMocha \u53c8\u88ab Whip \u5305\u88f9\u3002\u5b83\u4eec\u90fd\u7ee7\u627f\u81ea\u76f8\u540c\u7236\u7c7b\uff0c\u90fd\u6709 cost() \u65b9\u6cd5\uff0c\u5916\u5c42\u7c7b\u7684 cost() \u65b9\u6cd5\u8c03\u7528\u4e86\u5185\u5c42\u7c7b\u7684 cost() \u65b9\u6cd5\u3002 public interface Beverage { double cost(); } public class DarkRoast implements Beverage { @Override public double cost() { return 1; } } public class HouseBlend implements Beverage { @Override public double cost() { return 1; } } public abstract class CondimentDecorator implements Beverage { protected Beverage beverage; } public class Milk extends CondimentDecorator { public Milk(Beverage beverage) { this.beverage = beverage; } @Override public double cost() { return 1 + beverage.cost(); } } public class Mocha extends CondimentDecorator { public Mocha(Beverage beverage) { this.beverage = beverage; } @Override public double cost() { return 1 + beverage.cost(); } } public class Client { public static void main(String[] args) { Beverage beverage = new HouseBlend(); beverage = new Mocha(beverage); beverage = new Milk(beverage); System.out.println(beverage.cost()); } } 3.0","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_6","text":"\u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\uff1a\u4e5f\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002\u996e\u6599\u53ef\u4ee5\u52a8\u6001\u6dfb\u52a0\u65b0\u7684\u914d\u6599\uff0c\u800c\u4e0d\u9700\u8981\u53bb\u4fee\u6539\u996e\u6599\u7684\u4ee3\u7801\u3002 \u4e0d\u53ef\u80fd\u628a\u6240\u6709\u7684\u7c7b\u8bbe\u8ba1\u6210\u90fd\u6ee1\u8db3\u8fd9\u4e00\u539f\u5219\uff0c\u5e94\u5f53\u628a\u8be5\u539f\u5219\u5e94\u7528\u4e8e\u6700\u6709\u53ef\u80fd\u53d1\u751f\u6539\u53d8\u7684\u5730\u65b9\u3002","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_18","text":"java.io.BufferedInputStream(InputStream) java.io.DataInputStream(InputStream) java.io.BufferedOutputStream(OutputStream) java.util.zip.ZipOutputStream(OutputStream) java.util.Collections#checked List|Map|Set|SortedSet|SortedMap","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#5-facade","text":"","title":"5. \u5916\u89c2\uff08Facade\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_22","text":"\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684\u63a5\u53e3\uff0c\u7528\u6765\u8bbf\u95ee\u5b50\u7cfb\u7edf\u4e2d\u7684\u4e00\u7fa4\u63a5\u53e3\uff0c\u4ece\u800c\u8ba9\u5b50\u7cfb\u7edf\u66f4\u5bb9\u6613\u4f7f\u7528\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_22","text":"","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_22","text":"\u89c2\u770b\u7535\u5f71\u9700\u8981\u64cd\u4f5c\u5f88\u591a\u7535\u5668\uff0c\u4f7f\u7528\u5916\u89c2\u6a21\u5f0f\u5b9e\u73b0\u4e00\u952e\u770b\u7535\u5f71\u529f\u80fd\u3002 public class SubSystem { public void turnOnTV() { System.out.println(\"turnOnTV()\"); } public void setCD(String cd) { System.out.println(\"setCD( \" + cd + \" )\"); } public void startWatching(){ System.out.println(\"startWatching()\"); } } public class Facade { private SubSystem subSystem = new SubSystem(); public void watchMovie() { subSystem.turnOnTV(); subSystem.setCD(\"a movie\"); subSystem.startWatching(); } } public class Client { public static void main(String[] args) { Facade facade = new Facade(); facade.watchMovie(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_7","text":"\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff1a\u53ea\u548c\u4f60\u7684\u5bc6\u53cb\u8c08\u8bdd\u3002\u4e5f\u5c31\u662f\u8bf4\u5ba2\u6237\u5bf9\u8c61\u6240\u9700\u8981\u4ea4\u4e92\u7684\u5bf9\u8c61\u5e94\u5f53\u5c3d\u53ef\u80fd\u5c11\u3002","title":"\u8bbe\u8ba1\u539f\u5219"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#6-flyweight","text":"","title":"6. \u4eab\u5143\uff08Flyweight\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_23","text":"\u5229\u7528\u5171\u4eab\u7684\u65b9\u5f0f\u6765\u652f\u6301\u5927\u91cf\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u4e00\u90e8\u5206\u5185\u90e8\u72b6\u6001\u662f\u76f8\u540c\u7684\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_23","text":"Flyweight\uff1a\u4eab\u5143\u5bf9\u8c61 IntrinsicState\uff1a\u5185\u90e8\u72b6\u6001\uff0c\u4eab\u5143\u5bf9\u8c61\u5171\u4eab\u5185\u90e8\u72b6\u6001 ExtrinsicState\uff1a\u5916\u90e8\u72b6\u6001\uff0c\u6bcf\u4e2a\u4eab\u5143\u5bf9\u8c61\u7684\u5916\u90e8\u72b6\u6001\u4e0d\u540c","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_23","text":"public interface Flyweight { void doOperation(String extrinsicState); } public class ConcreteFlyweight implements Flyweight { private String intrinsicState; public ConcreteFlyweight(String intrinsicState) { this.intrinsicState = intrinsicState; } @Override public void doOperation(String extrinsicState) { System.out.println(\"Object address: \" + System.identityHashCode(this)); System.out.println(\"IntrinsicState: \" + intrinsicState); System.out.println(\"ExtrinsicState: \" + extrinsicState); } } public class FlyweightFactory { private HashMap<String, Flyweight> flyweights = new HashMap<>(); Flyweight getFlyweight(String intrinsicState) { if (!flyweights.containsKey(intrinsicState)) { Flyweight flyweight = new ConcreteFlyweight(intrinsicState); flyweights.put(intrinsicState, flyweight); } return flyweights.get(intrinsicState); } } public class Client { public static void main(String[] args) { FlyweightFactory factory = new FlyweightFactory(); Flyweight flyweight1 = factory.getFlyweight(\"aa\"); Flyweight flyweight2 = factory.getFlyweight(\"aa\"); flyweight1.doOperation(\"x\"); flyweight2.doOperation(\"y\"); } } Object address: 1163157884 IntrinsicState: aa ExtrinsicState: x Object address: 1163157884 IntrinsicState: aa ExtrinsicState: y","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_19","text":"Java \u5229\u7528\u7f13\u5b58\u6765\u52a0\u901f\u5927\u91cf\u5c0f\u5bf9\u8c61\u7684\u8bbf\u95ee\u65f6\u95f4\u3002 java.lang.Integer#valueOf(int) java.lang.Boolean#valueOf(boolean) java.lang.Byte#valueOf(byte) java.lang.Character#valueOf(char)","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#7-proxy","text":"","title":"7. \u4ee3\u7406\uff08Proxy\uff09"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#intent_24","text":"\u63a7\u5236\u5bf9\u5176\u5b83\u5bf9\u8c61\u7684\u8bbf\u95ee\u3002","title":"Intent"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#class-diagram_24","text":"\u4ee3\u7406\u6709\u4ee5\u4e0b\u56db\u7c7b\uff1a \u8fdc\u7a0b\u4ee3\u7406\uff08Remote Proxy\uff09\uff1a\u63a7\u5236\u5bf9\u8fdc\u7a0b\u5bf9\u8c61\uff08\u4e0d\u540c\u5730\u5740\u7a7a\u95f4\uff09\u7684\u8bbf\u95ee\uff0c\u5b83\u8d1f\u8d23\u5c06\u8bf7\u6c42\u53ca\u5176\u53c2\u6570\u8fdb\u884c\u7f16\u7801\uff0c\u5e76\u5411\u4e0d\u540c\u5730\u5740\u7a7a\u95f4\u4e2d\u7684\u5bf9\u8c61\u53d1\u9001\u5df2\u7ecf\u7f16\u7801\u7684\u8bf7\u6c42\u3002 \u865a\u62df\u4ee3\u7406\uff08Virtual Proxy\uff09\uff1a\u6839\u636e\u9700\u8981\u521b\u5efa\u5f00\u9500\u5f88\u5927\u7684\u5bf9\u8c61\uff0c\u5b83\u53ef\u4ee5\u7f13\u5b58\u5b9e\u4f53\u7684\u9644\u52a0\u4fe1\u606f\uff0c\u4ee5\u4fbf\u5ef6\u8fdf\u5bf9\u5b83\u7684\u8bbf\u95ee\uff0c\u4f8b\u5982\u5728\u7f51\u7ad9\u52a0\u8f7d\u4e00\u4e2a\u5f88\u5927\u56fe\u7247\u65f6\uff0c\u4e0d\u80fd\u9a6c\u4e0a\u5b8c\u6210\uff0c\u53ef\u4ee5\u7528\u865a\u62df\u4ee3\u7406\u7f13\u5b58\u56fe\u7247\u7684\u5927\u5c0f\u4fe1\u606f\uff0c\u7136\u540e\u751f\u6210\u4e00\u5f20\u4e34\u65f6\u56fe\u7247\u4ee3\u66ff\u539f\u59cb\u56fe\u7247\u3002 \u4fdd\u62a4\u4ee3\u7406\uff08Protection Proxy\uff09\uff1a\u6309\u6743\u9650\u63a7\u5236\u5bf9\u8c61\u7684\u8bbf\u95ee\uff0c\u5b83\u8d1f\u8d23\u68c0\u67e5\u8c03\u7528\u8005\u662f\u5426\u5177\u6709\u5b9e\u73b0\u4e00\u4e2a\u8bf7\u6c42\u6240\u5fc5\u987b\u7684\u8bbf\u95ee\u6743\u9650\u3002 \u667a\u80fd\u4ee3\u7406\uff08Smart Reference\uff09\uff1a\u53d6\u4ee3\u4e86\u7b80\u5355\u7684\u6307\u9488\uff0c\u5b83\u5728\u8bbf\u95ee\u5bf9\u8c61\u65f6\u6267\u884c\u4e00\u4e9b\u9644\u52a0\u64cd\u4f5c\uff1a\u8bb0\u5f55\u5bf9\u8c61\u7684\u5f15\u7528\u6b21\u6570\uff1b\u5f53\u7b2c\u4e00\u6b21\u5f15\u7528\u4e00\u4e2a\u5bf9\u8c61\u65f6\uff0c\u5c06\u5b83\u88c5\u5165\u5185\u5b58\uff1b\u5728\u8bbf\u95ee\u4e00\u4e2a\u5b9e\u9645\u5bf9\u8c61\u524d\uff0c\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u9501\u5b9a\u4e86\u5b83\uff0c\u4ee5\u786e\u4fdd\u5176\u5b83\u5bf9\u8c61\u4e0d\u80fd\u6539\u53d8\u5b83\u3002","title":"Class Diagram"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#implementation_24","text":"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u865a\u62df\u4ee3\u7406\u7684\u5b9e\u73b0\uff0c\u6a21\u62df\u4e86\u56fe\u7247\u5ef6\u8fdf\u52a0\u8f7d\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528\u4e0e\u56fe\u7247\u5927\u5c0f\u76f8\u7b49\u7684\u4e34\u65f6\u5185\u5bb9\u53bb\u66ff\u6362\u539f\u59cb\u56fe\u7247\uff0c\u76f4\u5230\u56fe\u7247\u52a0\u8f7d\u5b8c\u6210\u624d\u5c06\u56fe\u7247\u663e\u793a\u51fa\u6765\u3002 public interface Image { void showImage(); } public class HighResolutionImage implements Image { private URL imageURL; private long startTime; private int height; private int width; public int getHeight() { return height; } public int getWidth() { return width; } public HighResolutionImage(URL imageURL) { this.imageURL = imageURL; this.startTime = System.currentTimeMillis(); this.width = 600; this.height = 600; } public boolean isLoad() { // \u6a21\u62df\u56fe\u7247\u52a0\u8f7d\uff0c\u5ef6\u8fdf 3s \u52a0\u8f7d\u5b8c\u6210 long endTime = System.currentTimeMillis(); return endTime - startTime > 3000; } @Override public void showImage() { System.out.println(\"Real Image: \" + imageURL); } } public class ImageProxy implements Image { private HighResolutionImage highResolutionImage; public ImageProxy(HighResolutionImage highResolutionImage) { this.highResolutionImage = highResolutionImage; } @Override public void showImage() { while (!highResolutionImage.isLoad()) { try { System.out.println(\"Temp Image: \" + highResolutionImage.getWidth() + \" \" + highResolutionImage.getHeight()); Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } } highResolutionImage.showImage(); } } public class ImageViewer { public static void main(String[] args) throws Exception { String image = \"http://image.jpg\"; URL url = new URL(image); HighResolutionImage highResolutionImage = new HighResolutionImage(url); ImageProxy imageProxy = new ImageProxy(highResolutionImage); imageProxy.showImage(); } }","title":"Implementation"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#jdk_20","text":"java.lang.reflect.Proxy RMI","title":"JDK"},{"location":"bbb/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/#_8","text":"\u5f17\u91cc\u66fc. Head First \u8bbe\u8ba1\u6a21\u5f0f [M]. \u4e2d\u56fd\u7535\u529b\u51fa\u7248\u793e, 2007. Gamma E. \u8bbe\u8ba1\u6a21\u5f0f: \u53ef\u590d\u7528\u9762\u5411\u5bf9\u8c61\u8f6f\u4ef6\u7684\u57fa\u7840 [M]. \u673a\u68b0\u5de5\u4e1a\u51fa\u7248\u793e, 2007. Bloch J. Effective java[M]. Addison-Wesley Professional, 2017. Design Patterns Design patterns implemented in Java The breakdown of design patterns in JDK","title":"\u53c2\u8003\u8d44\u6599"},{"location":"ccc/c1/","text":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001 \u4e8c\u3001\u7c7b\u56fe \u6cdb\u5316\u5173\u7cfb (Generalization) \u5b9e\u73b0\u5173\u7cfb (Realization) \u805a\u5408\u5173\u7cfb (Aggregation) \u7ec4\u5408\u5173\u7cfb (Composition) \u5173\u8054\u5173\u7cfb (Association) \u4f9d\u8d56\u5173\u7cfb (Dependency) \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u53c2\u8003\u8d44\u6599 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u5229\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5c06\u6570\u636e\u548c\u57fa\u4e8e\u6570\u636e\u7684\u64cd\u4f5c\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6784\u6210\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u72ec\u7acb\u5b9e\u4f53\u3002\u6570\u636e\u88ab\u4fdd\u62a4\u5728\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5185\u90e8\uff0c\u5c3d\u53ef\u80fd\u5730\u9690\u85cf\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u53ea\u4fdd\u7559\u4e00\u4e9b\u5bf9\u5916\u7684\u63a5\u53e3\u4f7f\u5176\u4e0e\u5916\u90e8\u53d1\u751f\u8054\u7cfb\u3002\u7528\u6237\u65e0\u9700\u5173\u5fc3\u5bf9\u8c61\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u8be5\u5bf9\u8c61\u3002 \u4f18\u70b9\uff1a \u51cf\u5c11\u8026\u5408\uff1a\u53ef\u4ee5\u72ec\u7acb\u5730\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u4f18\u5316\u3001\u4f7f\u7528\u3001\u7406\u89e3\u548c\u4fee\u6539 \u51cf\u8f7b\u7ef4\u62a4\u7684\u8d1f\u62c5\uff1a\u53ef\u4ee5\u66f4\u5bb9\u6613\u88ab\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u5f71\u54cd\u5176\u4ed6\u6a21\u5757 \u6709\u6548\u5730\u8c03\u8282\u6027\u80fd\uff1a\u53ef\u4ee5\u901a\u8fc7\u5256\u6790\u6765\u786e\u5b9a\u54ea\u4e9b\u6a21\u5757\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6027\u80fd \u63d0\u9ad8\u8f6f\u4ef6\u7684\u53ef\u91cd\u7528\u6027 \u964d\u4f4e\u4e86\u6784\u5efa\u5927\u578b\u7cfb\u7edf\u7684\u98ce\u9669\uff1a\u5373\u4f7f\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u4f46\u662f\u8fd9\u4e9b\u72ec\u7acb\u7684\u6a21\u5757\u5374\u6709\u53ef\u80fd\u662f\u53ef\u7528\u7684 \u4ee5\u4e0b Person \u7c7b\u5c01\u88c5 name\u3001gender\u3001age \u7b49\u5c5e\u6027\uff0c\u5916\u754c\u53ea\u80fd\u901a\u8fc7 get() \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a Person \u5bf9\u8c61\u7684 name \u5c5e\u6027\u548c gender \u5c5e\u6027\uff0c\u800c\u65e0\u6cd5\u83b7\u53d6 age \u5c5e\u6027\uff0c\u4f46\u662f age \u5c5e\u6027\u53ef\u4ee5\u4f9b work() \u65b9\u6cd5\u4f7f\u7528\u3002 \u6ce8\u610f\u5230 gender \u5c5e\u6027\u4f7f\u7528 int \u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5c01\u88c5\u4f7f\u5f97\u7528\u6237\u6ce8\u610f\u4e0d\u5230\u8fd9\u79cd\u5b9e\u73b0\u7ec6\u8282\u3002\u5e76\u4e14\u5728\u9700\u8981\u4fee\u6539 gender \u5c5e\u6027\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \"man\" : \"woman\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \" is working very hard!\"); } else { System.out.println(name + \" can't work any more!\"); } } } \u7ee7\u627f \u7ee7\u627f\u5b9e\u73b0\u4e86 IS-A \u5173\u7cfb\uff0c\u4f8b\u5982 Cat \u548c Animal \u5c31\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u56e0\u6b64 Cat \u53ef\u4ee5\u7ee7\u627f\u81ea Animal\uff0c\u4ece\u800c\u83b7\u5f97 Animal \u975e private \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u7ee7\u627f\u5e94\u8be5\u9075\u5faa\u91cc\u6c0f\u66ff\u6362\u539f\u5219\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 Cat \u53ef\u4ee5\u5f53\u505a Animal \u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 Animal \u5f15\u7528 Cat \u5bf9\u8c61\u3002\u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u79f0\u4e3a \u5411\u4e0a\u8f6c\u578b \u3002 Animal animal = new Cat(); \u591a\u6001 \u591a\u6001\u5206\u4e3a\u7f16\u8bd1\u65f6\u591a\u6001\u548c\u8fd0\u884c\u65f6\u591a\u6001\uff1a \u7f16\u8bd1\u65f6\u591a\u6001\u4e3b\u8981\u6307\u65b9\u6cd5\u7684\u91cd\u8f7d \u8fd0\u884c\u65f6\u591a\u6001\u6307\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u5f15\u7528\u6240\u6307\u5411\u7684\u5177\u4f53\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u95f4\u624d\u786e\u5b9a \u8fd0\u884c\u65f6\u591a\u6001\u6709\u4e09\u4e2a\u6761\u4ef6\uff1a \u7ee7\u627f \u8986\u76d6\uff08\u91cd\u5199\uff09 \u5411\u4e0a\u8f6c\u578b \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4e50\u5668\u7c7b\uff08Instrument\uff09\u6709\u4e24\u4e2a\u5b50\u7c7b\uff1aWind \u548c Percussion\uff0c\u5b83\u4eec\u90fd\u8986\u76d6\u4e86\u7236\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728 main() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u7236\u7c7b Instrument \u6765\u5f15\u7528 Wind \u548c Percussion \u5bf9\u8c61\u3002\u5728 Instrument \u5f15\u7528\u8c03\u7528 play() \u65b9\u6cd5\u65f6\uff0c\u4f1a\u6267\u884c\u5b9e\u9645\u5f15\u7528\u5bf9\u8c61\u6240\u5728\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u800c\u4e0d\u662f Instrument \u7c7b\u7684\u65b9\u6cd5\u3002 public class Instrument { public void play() { System.out.println(\"Instument is playing...\"); } } public class Wind extends Instrument { public void play() { System.out.println(\"Wind is playing...\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\"Percussion is playing...\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } Wind is playing... Percussion is playing... \u4e8c\u3001\u7c7b\u56fe \u4ee5\u4e0b\u7c7b\u56fe\u4f7f\u7528 PlantUML \u7ed8\u5236\uff0c\u66f4\u591a\u8bed\u6cd5\u53ca\u4f7f\u7528\u8bf7\u53c2\u8003\uff1ahttp://plantuml.com/ \u3002 \u6cdb\u5316\u5173\u7cfb (Generalization) \u7528\u6765\u63cf\u8ff0\u7ee7\u627f\u5173\u7cfb\uff0c\u5728 Java \u4e2d\u4f7f\u7528 extends \u5173\u952e\u5b57\u3002 @startuml title Generalization class Vihical class Car class Trunck Vihical <|-- Car Vihical <|-- Trunck @enduml \u5b9e\u73b0\u5173\u7cfb (Realization) \u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728 Java \u4e2d\u4f7f\u7528 implements \u5173\u952e\u5b57\u3002 @startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml \u805a\u5408\u5173\u7cfb (Aggregation) \u8868\u793a\u6574\u4f53\u7531\u90e8\u5206\u7ec4\u6210\uff0c\u4f46\u662f\u6574\u4f53\u548c\u90e8\u5206\u4e0d\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u8fd8\u662f\u4f1a\u5b58\u5728\u3002 @startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml \u7ec4\u5408\u5173\u7cfb (Composition) \u548c\u805a\u5408\u4e0d\u540c\uff0c\u7ec4\u5408\u4e2d\u6574\u4f53\u548c\u90e8\u5206\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u4e5f\u4e0d\u5b58\u5728\u4e86\u3002\u6bd4\u5982\u516c\u53f8\u548c\u90e8\u95e8\uff0c\u516c\u53f8\u6ca1\u4e86\u90e8\u95e8\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u4f46\u662f\u516c\u53f8\u548c\u5458\u5de5\u5c31\u5c5e\u4e8e\u805a\u5408\u5173\u7cfb\u4e86\uff0c\u56e0\u4e3a\u516c\u53f8\u6ca1\u4e86\u5458\u5de5\u8fd8\u5728\u3002 @startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml \u5173\u8054\u5173\u7cfb (Association) \u8868\u793a\u4e0d\u540c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u6709\u5173\u8054\uff0c\u8fd9\u662f\u4e00\u79cd\u9759\u6001\u5173\u7cfb\uff0c\u4e0e\u8fd0\u884c\u8fc7\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff0c\u5728\u6700\u5f00\u59cb\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 1 \u5bf9 1\u3001\u591a\u5bf9 1\u3001\u591a\u5bf9\u591a\u8fd9\u79cd\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u3002\u6bd4\u5982\u5b66\u751f\u548c\u5b66\u6821\u5c31\u662f\u4e00\u79cd\u5173\u8054\u5173\u7cfb\uff0c\u4e00\u4e2a\u5b66\u6821\u53ef\u4ee5\u6709\u5f88\u591a\u5b66\u751f\uff0c\u4f46\u662f\u4e00\u4e2a\u5b66\u751f\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u5b66\u6821\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u5728\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002 @startuml title Association class School class Student School \"1\" - \"n\" Student @enduml \u4f9d\u8d56\u5173\u7cfb (Dependency) \u548c\u5173\u8054\u5173\u7cfb\u4e0d\u540c\u7684\u662f\uff0c\u4f9d\u8d56\u5173\u7cfb\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8d77\u4f5c\u7528\u7684\u3002A \u7c7b\u548c B \u7c7b\u662f\u4f9d\u8d56\u5173\u7cfb\u4e3b\u8981\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\uff1b A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\uff1b A \u7c7b\u5411 B \u7c7b\u53d1\u9001\u6d88\u606f\uff0c\u4ece\u800c\u5f71\u54cd B \u7c7b\u53d1\u751f\u53d8\u5316\u3002 @startuml title Dependency class Vihicle { move(MoveBehavior) } interface MoveBehavior { move() } note \"MoveBehavior.move()\" as N Vihicle ..> MoveBehavior Vihicle .. N @enduml \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 SRP The Single Responsibility Principle \u5355\u4e00\u8d23\u4efb\u539f\u5219 OCP The Open Closed Principle \u5f00\u653e\u5c01\u95ed\u539f\u5219 LSP The Liskov Substitution Principle \u91cc\u6c0f\u66ff\u6362\u539f\u5219 ISP The Interface Segregation Principle \u63a5\u53e3\u5206\u79bb\u539f\u5219 DIP The Dependency Inversion Principle \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 1. \u5355\u4e00\u8d23\u4efb\u539f\u5219 \u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u3002 \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u8ba9\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4ef6\u4e8b\uff0c\u5f53\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u8fc7\u591a\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5206\u89e3\u8fd9\u4e2a\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u7b49\u4e8e\u628a\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e86\u4e00\u8d77\uff0c\u4e00\u4e2a\u804c\u8d23\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u524a\u5f31\u8fd9\u4e2a\u7c7b\u5b8c\u6210\u5176\u5b83\u804c\u8d23\u7684\u80fd\u529b\u3002 2. \u5f00\u653e\u5c01\u95ed\u539f\u5219 \u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6269\u5c55\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u7684\u610f\u601d\uff0c\u56e0\u6b64\u8be5\u539f\u5219\u8981\u6c42\u5728\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002 \u7b26\u5408\u5f00\u95ed\u539f\u5219\u6700\u5178\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u662f\u88c5\u9970\u8005\u6a21\u5f0f\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u5c06\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\uff0c\u800c\u4e0d\u7528\u53bb\u4fee\u6539\u7c7b\u7684\u4ee3\u7801\u3002 3. \u91cc\u6c0f\u66ff\u6362\u539f\u5219 \u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 \u7ee7\u627f\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u5b50\u7c7b\u9700\u8981\u80fd\u591f\u5f53\u6210\u7236\u7c7b\u6765\u4f7f\u7528\uff0c\u5e76\u4e14\u9700\u8981\u6bd4\u7236\u7c7b\u66f4\u7279\u6b8a\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u539f\u5219\uff0c\u90a3\u4e48\u5404\u4e2a\u5b50\u7c7b\u7684\u884c\u4e3a\u4e0a\u5c31\u4f1a\u6709\u5f88\u5927\u5dee\u5f02\uff0c\u589e\u52a0\u7ee7\u627f\u4f53\u7cfb\u7684\u590d\u6742\u5ea6\u3002 4. \u63a5\u53e3\u5206\u79bb\u539f\u5219 \u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u4f9d\u8d56\u4e8e\u5b83\u4eec\u4e0d\u7528\u7684\u65b9\u6cd5\u3002 \u56e0\u6b64\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\u6bd4\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\u8981\u597d\u3002 5. \u4f9d\u8d56\u5012\u7f6e\u539f\u5219 \u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u4e8c\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\uff1b \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u9ad8\u5c42\u6a21\u5757\u5305\u542b\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u8981\u7684\u7b56\u7565\u9009\u62e9\u548c\u4e1a\u52a1\u6a21\u5757\uff0c\u5982\u679c\u9ad8\u5c42\u6a21\u5757\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u90a3\u4e48\u4f4e\u5c42\u6a21\u5757\u7684\u6539\u52a8\u5c31\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u9ad8\u5c42\u6a21\u5757\uff0c\u4ece\u800c\u8feb\u4f7f\u9ad8\u5c42\u6a21\u5757\u4e5f\u9700\u8981\u6539\u52a8\u3002 \u4f9d\u8d56\u4e8e\u62bd\u8c61\u610f\u5473\u7740\uff1a \u4efb\u4f55\u53d8\u91cf\u90fd\u4e0d\u5e94\u8be5\u6301\u6709\u4e00\u4e2a\u6307\u5411\u5177\u4f53\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\uff1b \u4efb\u4f55\u7c7b\u90fd\u4e0d\u5e94\u8be5\u4ece\u5177\u4f53\u7c7b\u6d3e\u751f\uff1b \u4efb\u4f55\u65b9\u6cd5\u90fd\u4e0d\u5e94\u8be5\u8986\u5199\u5b83\u7684\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7684\u5df2\u7ecf\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002 \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u9664\u4e86\u4e0a\u8ff0\u7684\u7ecf\u5178\u539f\u5219\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8fd8\u6709\u4e0b\u9762\u8fd9\u4e9b\u5e38\u89c1\u7684\u8bbe\u8ba1\u539f\u5219\u3002 \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 LOD The Law of Demeter \u8fea\u7c73\u7279\u6cd5\u5219 CRP The Composite Reuse Principle \u5408\u6210\u590d\u7528\u539f\u5219 CCP The Common Closure Principle \u5171\u540c\u5c01\u95ed\u539f\u5219 SAP The Stable Abstractions Principle \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 SDP The Stable Dependencies Principle \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219 1. \u8fea\u7c73\u7279\u6cd5\u5219 \u8fea\u7c73\u7279\u6cd5\u5219\u53c8\u53eb\u4f5c\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff08Least Knowledge Principle\uff0c\u7b80\u5199 LKP\uff09\uff0c\u5c31\u662f\u8bf4\u4e00\u4e2a\u5bf9\u8c61\u5e94\u5f53\u5bf9\u5176\u4ed6\u5bf9\u8c61\u6709\u5c3d\u53ef\u80fd\u5c11\u7684\u4e86\u89e3\uff0c\u4e0d\u548c\u964c\u751f\u4eba\u8bf4\u8bdd\u3002 2. \u5408\u6210\u590d\u7528\u539f\u5219 \u5c3d\u91cf\u4f7f\u7528\u5bf9\u8c61\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002 3. \u5171\u540c\u5c01\u95ed\u539f\u5219 \u4e00\u8d77\u4fee\u6539\u7684\u7c7b\uff0c\u5e94\u8be5\u7ec4\u5408\u5728\u4e00\u8d77\uff08\u540c\u4e00\u4e2a\u5305\u91cc\uff09\u3002\u5982\u679c\u5fc5\u987b\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4fee\u6539\u90fd\u53d1\u751f\u5728\u4e00\u4e2a\u5305\u91cc\uff08\u4fee\u6539\u5173\u95ed\uff09\uff0c\u800c\u4e0d\u662f\u904d\u5e03\u5728\u5f88\u591a\u5305\u91cc\u3002 4. \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 \u6700\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u6700\u62bd\u8c61\u7684\u5305\uff0c\u4e0d\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u5177\u4f53\u7684\u5305\uff0c\u5373\u5305\u7684\u62bd\u8c61\u7a0b\u5ea6\u8ddf\u5b83\u7684\u7a33\u5b9a\u6027\u6210\u6b63\u6bd4\u3002 5. \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219 \u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u5e94\u8be5\u662f\u7a33\u5b9a\u65b9\u5411\u4f9d\u8d56\u7684\uff0c\u5305\u8981\u4f9d\u8d56\u7684\u5305\u8981\u6bd4\u81ea\u5df1\u66f4\u5177\u6709\u7a33\u5b9a\u6027\u3002 \u53c2\u8003\u8d44\u6599 Java \u7f16\u7a0b\u601d\u60f3 \u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\uff1a\u539f\u5219\u3001\u6a21\u5f0f\u4e0e\u5b9e\u8df5 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684 SOLID \u539f\u5219 \u770b\u61c2 UML \u7c7b\u56fe\u548c\u65f6\u5e8f\u56fe UML \u7cfb\u5217\u2014\u2014\u65f6\u5e8f\u56fe\uff08\u987a\u5e8f\u56fe\uff09sequence diagram \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e09\u5927\u7279\u6027 ------ \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001","title":"\u6d4b\u8bd5.1.1.1"},{"location":"ccc/c1/#_1","text":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3 \u4e00\u3001\u4e09\u5927\u7279\u6027 \u5c01\u88c5 \u7ee7\u627f \u591a\u6001 \u4e8c\u3001\u7c7b\u56fe \u6cdb\u5316\u5173\u7cfb (Generalization) \u5b9e\u73b0\u5173\u7cfb (Realization) \u805a\u5408\u5173\u7cfb (Aggregation) \u7ec4\u5408\u5173\u7cfb (Composition) \u5173\u8054\u5173\u7cfb (Association) \u4f9d\u8d56\u5173\u7cfb (Dependency) \u4e09\u3001\u8bbe\u8ba1\u539f\u5219 S.O.L.I.D \u5176\u4ed6\u5e38\u89c1\u539f\u5219 \u53c2\u8003\u8d44\u6599","title":"\u9762\u5411\u5bf9\u8c61\u601d\u60f3"},{"location":"ccc/c1/#_2","text":"","title":"\u4e00\u3001\u4e09\u5927\u7279\u6027"},{"location":"ccc/c1/#_3","text":"\u5229\u7528\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u5c06\u6570\u636e\u548c\u57fa\u4e8e\u6570\u636e\u7684\u64cd\u4f5c\u5c01\u88c5\u5728\u4e00\u8d77\uff0c\u4f7f\u5176\u6784\u6210\u4e00\u4e2a\u4e0d\u53ef\u5206\u5272\u7684\u72ec\u7acb\u5b9e\u4f53\u3002\u6570\u636e\u88ab\u4fdd\u62a4\u5728\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u7684\u5185\u90e8\uff0c\u5c3d\u53ef\u80fd\u5730\u9690\u85cf\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u53ea\u4fdd\u7559\u4e00\u4e9b\u5bf9\u5916\u7684\u63a5\u53e3\u4f7f\u5176\u4e0e\u5916\u90e8\u53d1\u751f\u8054\u7cfb\u3002\u7528\u6237\u65e0\u9700\u5173\u5fc3\u5bf9\u8c61\u5185\u90e8\u7684\u7ec6\u8282\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u5bf9\u5916\u63d0\u4f9b\u7684\u63a5\u53e3\u6765\u8bbf\u95ee\u8be5\u5bf9\u8c61\u3002 \u4f18\u70b9\uff1a \u51cf\u5c11\u8026\u5408\uff1a\u53ef\u4ee5\u72ec\u7acb\u5730\u5f00\u53d1\u3001\u6d4b\u8bd5\u3001\u4f18\u5316\u3001\u4f7f\u7528\u3001\u7406\u89e3\u548c\u4fee\u6539 \u51cf\u8f7b\u7ef4\u62a4\u7684\u8d1f\u62c5\uff1a\u53ef\u4ee5\u66f4\u5bb9\u6613\u88ab\u7406\u89e3\uff0c\u5e76\u4e14\u5728\u8c03\u8bd5\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u5f71\u54cd\u5176\u4ed6\u6a21\u5757 \u6709\u6548\u5730\u8c03\u8282\u6027\u80fd\uff1a\u53ef\u4ee5\u901a\u8fc7\u5256\u6790\u6765\u786e\u5b9a\u54ea\u4e9b\u6a21\u5757\u5f71\u54cd\u4e86\u7cfb\u7edf\u7684\u6027\u80fd \u63d0\u9ad8\u8f6f\u4ef6\u7684\u53ef\u91cd\u7528\u6027 \u964d\u4f4e\u4e86\u6784\u5efa\u5927\u578b\u7cfb\u7edf\u7684\u98ce\u9669\uff1a\u5373\u4f7f\u6574\u4e2a\u7cfb\u7edf\u4e0d\u53ef\u7528\uff0c\u4f46\u662f\u8fd9\u4e9b\u72ec\u7acb\u7684\u6a21\u5757\u5374\u6709\u53ef\u80fd\u662f\u53ef\u7528\u7684 \u4ee5\u4e0b Person \u7c7b\u5c01\u88c5 name\u3001gender\u3001age \u7b49\u5c5e\u6027\uff0c\u5916\u754c\u53ea\u80fd\u901a\u8fc7 get() \u65b9\u6cd5\u83b7\u53d6\u4e00\u4e2a Person \u5bf9\u8c61\u7684 name \u5c5e\u6027\u548c gender \u5c5e\u6027\uff0c\u800c\u65e0\u6cd5\u83b7\u53d6 age \u5c5e\u6027\uff0c\u4f46\u662f age \u5c5e\u6027\u53ef\u4ee5\u4f9b work() \u65b9\u6cd5\u4f7f\u7528\u3002 \u6ce8\u610f\u5230 gender \u5c5e\u6027\u4f7f\u7528 int \u6570\u636e\u7c7b\u578b\u8fdb\u884c\u5b58\u50a8\uff0c\u5c01\u88c5\u4f7f\u5f97\u7528\u6237\u6ce8\u610f\u4e0d\u5230\u8fd9\u79cd\u5b9e\u73b0\u7ec6\u8282\u3002\u5e76\u4e14\u5728\u9700\u8981\u4fee\u6539 gender \u5c5e\u6027\u4f7f\u7528\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0d\u5f71\u54cd\u5ba2\u6237\u7aef\u4ee3\u7801\u7684\u60c5\u51b5\u4e0b\u8fdb\u884c\u3002 public class Person { private String name; private int gender; private int age; public String getName() { return name; } public String getGender() { return gender == 0 ? \"man\" : \"woman\"; } public void work() { if (18 <= age && age <= 50) { System.out.println(name + \" is working very hard!\"); } else { System.out.println(name + \" can't work any more!\"); } } }","title":"\u5c01\u88c5"},{"location":"ccc/c1/#_4","text":"\u7ee7\u627f\u5b9e\u73b0\u4e86 IS-A \u5173\u7cfb\uff0c\u4f8b\u5982 Cat \u548c Animal \u5c31\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u56e0\u6b64 Cat \u53ef\u4ee5\u7ee7\u627f\u81ea Animal\uff0c\u4ece\u800c\u83b7\u5f97 Animal \u975e private \u7684\u5c5e\u6027\u548c\u65b9\u6cd5\u3002 \u7ee7\u627f\u5e94\u8be5\u9075\u5faa\u91cc\u6c0f\u66ff\u6362\u539f\u5219\uff0c\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 Cat \u53ef\u4ee5\u5f53\u505a Animal \u6765\u4f7f\u7528\uff0c\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u4f7f\u7528 Animal \u5f15\u7528 Cat \u5bf9\u8c61\u3002\u7236\u7c7b\u5f15\u7528\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u79f0\u4e3a \u5411\u4e0a\u8f6c\u578b \u3002 Animal animal = new Cat();","title":"\u7ee7\u627f"},{"location":"ccc/c1/#_5","text":"\u591a\u6001\u5206\u4e3a\u7f16\u8bd1\u65f6\u591a\u6001\u548c\u8fd0\u884c\u65f6\u591a\u6001\uff1a \u7f16\u8bd1\u65f6\u591a\u6001\u4e3b\u8981\u6307\u65b9\u6cd5\u7684\u91cd\u8f7d \u8fd0\u884c\u65f6\u591a\u6001\u6307\u7a0b\u5e8f\u4e2d\u5b9a\u4e49\u7684\u5bf9\u8c61\u5f15\u7528\u6240\u6307\u5411\u7684\u5177\u4f53\u7c7b\u578b\u5728\u8fd0\u884c\u671f\u95f4\u624d\u786e\u5b9a \u8fd0\u884c\u65f6\u591a\u6001\u6709\u4e09\u4e2a\u6761\u4ef6\uff1a \u7ee7\u627f \u8986\u76d6\uff08\u91cd\u5199\uff09 \u5411\u4e0a\u8f6c\u578b \u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u4e50\u5668\u7c7b\uff08Instrument\uff09\u6709\u4e24\u4e2a\u5b50\u7c7b\uff1aWind \u548c Percussion\uff0c\u5b83\u4eec\u90fd\u8986\u76d6\u4e86\u7236\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u5e76\u4e14\u5728 main() \u65b9\u6cd5\u4e2d\u4f7f\u7528\u7236\u7c7b Instrument \u6765\u5f15\u7528 Wind \u548c Percussion \u5bf9\u8c61\u3002\u5728 Instrument \u5f15\u7528\u8c03\u7528 play() \u65b9\u6cd5\u65f6\uff0c\u4f1a\u6267\u884c\u5b9e\u9645\u5f15\u7528\u5bf9\u8c61\u6240\u5728\u7c7b\u7684 play() \u65b9\u6cd5\uff0c\u800c\u4e0d\u662f Instrument \u7c7b\u7684\u65b9\u6cd5\u3002 public class Instrument { public void play() { System.out.println(\"Instument is playing...\"); } } public class Wind extends Instrument { public void play() { System.out.println(\"Wind is playing...\"); } } public class Percussion extends Instrument { public void play() { System.out.println(\"Percussion is playing...\"); } } public class Music { public static void main(String[] args) { List<Instrument> instruments = new ArrayList<>(); instruments.add(new Wind()); instruments.add(new Percussion()); for(Instrument instrument : instruments) { instrument.play(); } } } Wind is playing... Percussion is playing...","title":"\u591a\u6001"},{"location":"ccc/c1/#_6","text":"\u4ee5\u4e0b\u7c7b\u56fe\u4f7f\u7528 PlantUML \u7ed8\u5236\uff0c\u66f4\u591a\u8bed\u6cd5\u53ca\u4f7f\u7528\u8bf7\u53c2\u8003\uff1ahttp://plantuml.com/ \u3002","title":"\u4e8c\u3001\u7c7b\u56fe"},{"location":"ccc/c1/#generalization","text":"\u7528\u6765\u63cf\u8ff0\u7ee7\u627f\u5173\u7cfb\uff0c\u5728 Java \u4e2d\u4f7f\u7528 extends \u5173\u952e\u5b57\u3002 @startuml title Generalization class Vihical class Car class Trunck Vihical <|-- Car Vihical <|-- Trunck @enduml","title":"\u6cdb\u5316\u5173\u7cfb (Generalization)"},{"location":"ccc/c1/#realization","text":"\u7528\u6765\u5b9e\u73b0\u4e00\u4e2a\u63a5\u53e3\uff0c\u5728 Java \u4e2d\u4f7f\u7528 implements \u5173\u952e\u5b57\u3002 @startuml title Realization interface MoveBehavior class Fly class Run MoveBehavior <|.. Fly MoveBehavior <|.. Run @enduml","title":"\u5b9e\u73b0\u5173\u7cfb (Realization)"},{"location":"ccc/c1/#aggregation","text":"\u8868\u793a\u6574\u4f53\u7531\u90e8\u5206\u7ec4\u6210\uff0c\u4f46\u662f\u6574\u4f53\u548c\u90e8\u5206\u4e0d\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u8fd8\u662f\u4f1a\u5b58\u5728\u3002 @startuml title Aggregation class Computer class Keyboard class Mouse class Screen Computer o-- Keyboard Computer o-- Mouse Computer o-- Screen @enduml","title":"\u805a\u5408\u5173\u7cfb (Aggregation)"},{"location":"ccc/c1/#composition","text":"\u548c\u805a\u5408\u4e0d\u540c\uff0c\u7ec4\u5408\u4e2d\u6574\u4f53\u548c\u90e8\u5206\u662f\u5f3a\u4f9d\u8d56\u7684\uff0c\u6574\u4f53\u4e0d\u5b58\u5728\u4e86\u90e8\u5206\u4e5f\u4e0d\u5b58\u5728\u4e86\u3002\u6bd4\u5982\u516c\u53f8\u548c\u90e8\u95e8\uff0c\u516c\u53f8\u6ca1\u4e86\u90e8\u95e8\u5c31\u4e0d\u5b58\u5728\u4e86\u3002\u4f46\u662f\u516c\u53f8\u548c\u5458\u5de5\u5c31\u5c5e\u4e8e\u805a\u5408\u5173\u7cfb\u4e86\uff0c\u56e0\u4e3a\u516c\u53f8\u6ca1\u4e86\u5458\u5de5\u8fd8\u5728\u3002 @startuml title Composition class Company class DepartmentA class DepartmentB Company *-- DepartmentA Company *-- DepartmentB @enduml","title":"\u7ec4\u5408\u5173\u7cfb (Composition)"},{"location":"ccc/c1/#association","text":"\u8868\u793a\u4e0d\u540c\u7c7b\u5bf9\u8c61\u4e4b\u95f4\u6709\u5173\u8054\uff0c\u8fd9\u662f\u4e00\u79cd\u9759\u6001\u5173\u7cfb\uff0c\u4e0e\u8fd0\u884c\u8fc7\u7a0b\u7684\u72b6\u6001\u65e0\u5173\uff0c\u5728\u6700\u5f00\u59cb\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002\u56e0\u6b64\u4e5f\u53ef\u4ee5\u7528 1 \u5bf9 1\u3001\u591a\u5bf9 1\u3001\u591a\u5bf9\u591a\u8fd9\u79cd\u5173\u8054\u5173\u7cfb\u6765\u8868\u793a\u3002\u6bd4\u5982\u5b66\u751f\u548c\u5b66\u6821\u5c31\u662f\u4e00\u79cd\u5173\u8054\u5173\u7cfb\uff0c\u4e00\u4e2a\u5b66\u6821\u53ef\u4ee5\u6709\u5f88\u591a\u5b66\u751f\uff0c\u4f46\u662f\u4e00\u4e2a\u5b66\u751f\u53ea\u5c5e\u4e8e\u4e00\u4e2a\u5b66\u6821\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u79cd\u591a\u5bf9\u4e00\u7684\u5173\u7cfb\uff0c\u5728\u8fd0\u884c\u5f00\u59cb\u4e4b\u524d\u5c31\u53ef\u4ee5\u786e\u5b9a\u3002 @startuml title Association class School class Student School \"1\" - \"n\" Student @enduml","title":"\u5173\u8054\u5173\u7cfb (Association)"},{"location":"ccc/c1/#dependency","text":"\u548c\u5173\u8054\u5173\u7cfb\u4e0d\u540c\u7684\u662f\uff0c\u4f9d\u8d56\u5173\u7cfb\u662f\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u8d77\u4f5c\u7528\u7684\u3002A \u7c7b\u548c B \u7c7b\u662f\u4f9d\u8d56\u5173\u7cfb\u4e3b\u8981\u6709\u4e09\u79cd\u5f62\u5f0f\uff1a A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u5c40\u90e8\u53d8\u91cf\uff1b A \u7c7b\u662f B \u7c7b\u65b9\u6cd5\u7684\u53c2\u6570\uff1b A \u7c7b\u5411 B \u7c7b\u53d1\u9001\u6d88\u606f\uff0c\u4ece\u800c\u5f71\u54cd B \u7c7b\u53d1\u751f\u53d8\u5316\u3002 @startuml title Dependency class Vihicle { move(MoveBehavior) } interface MoveBehavior { move() } note \"MoveBehavior.move()\" as N Vihicle ..> MoveBehavior Vihicle .. N @enduml","title":"\u4f9d\u8d56\u5173\u7cfb (Dependency)"},{"location":"ccc/c1/#_7","text":"","title":"\u4e09\u3001\u8bbe\u8ba1\u539f\u5219"},{"location":"ccc/c1/#solid","text":"\u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 SRP The Single Responsibility Principle \u5355\u4e00\u8d23\u4efb\u539f\u5219 OCP The Open Closed Principle \u5f00\u653e\u5c01\u95ed\u539f\u5219 LSP The Liskov Substitution Principle \u91cc\u6c0f\u66ff\u6362\u539f\u5219 ISP The Interface Segregation Principle \u63a5\u53e3\u5206\u79bb\u539f\u5219 DIP The Dependency Inversion Principle \u4f9d\u8d56\u5012\u7f6e\u539f\u5219","title":"S.O.L.I.D"},{"location":"ccc/c1/#1","text":"\u4fee\u6539\u4e00\u4e2a\u7c7b\u7684\u539f\u56e0\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u3002 \u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u8ba9\u4e00\u4e2a\u7c7b\u53ea\u8d1f\u8d23\u4e00\u4ef6\u4e8b\uff0c\u5f53\u8fd9\u4e2a\u7c7b\u9700\u8981\u505a\u8fc7\u591a\u4e8b\u60c5\u7684\u65f6\u5019\uff0c\u5c31\u9700\u8981\u5206\u89e3\u8fd9\u4e2a\u7c7b\u3002 \u5982\u679c\u4e00\u4e2a\u7c7b\u627f\u62c5\u7684\u804c\u8d23\u8fc7\u591a\uff0c\u5c31\u7b49\u4e8e\u628a\u8fd9\u4e9b\u804c\u8d23\u8026\u5408\u5728\u4e86\u4e00\u8d77\uff0c\u4e00\u4e2a\u804c\u8d23\u7684\u53d8\u5316\u53ef\u80fd\u4f1a\u524a\u5f31\u8fd9\u4e2a\u7c7b\u5b8c\u6210\u5176\u5b83\u804c\u8d23\u7684\u80fd\u529b\u3002","title":"1. \u5355\u4e00\u8d23\u4efb\u539f\u5219"},{"location":"ccc/c1/#2","text":"\u7c7b\u5e94\u8be5\u5bf9\u6269\u5c55\u5f00\u653e\uff0c\u5bf9\u4fee\u6539\u5173\u95ed\u3002 \u6269\u5c55\u5c31\u662f\u6dfb\u52a0\u65b0\u529f\u80fd\u7684\u610f\u601d\uff0c\u56e0\u6b64\u8be5\u539f\u5219\u8981\u6c42\u5728\u6dfb\u52a0\u65b0\u529f\u80fd\u65f6\u4e0d\u9700\u8981\u4fee\u6539\u4ee3\u7801\u3002 \u7b26\u5408\u5f00\u95ed\u539f\u5219\u6700\u5178\u578b\u7684\u8bbe\u8ba1\u6a21\u5f0f\u662f\u88c5\u9970\u8005\u6a21\u5f0f\uff0c\u5b83\u53ef\u4ee5\u52a8\u6001\u5730\u5c06\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\uff0c\u800c\u4e0d\u7528\u53bb\u4fee\u6539\u7c7b\u7684\u4ee3\u7801\u3002","title":"2. \u5f00\u653e\u5c01\u95ed\u539f\u5219"},{"location":"ccc/c1/#3","text":"\u5b50\u7c7b\u5bf9\u8c61\u5fc5\u987b\u80fd\u591f\u66ff\u6362\u6389\u6240\u6709\u7236\u7c7b\u5bf9\u8c61\u3002 \u7ee7\u627f\u662f\u4e00\u79cd IS-A \u5173\u7cfb\uff0c\u5b50\u7c7b\u9700\u8981\u80fd\u591f\u5f53\u6210\u7236\u7c7b\u6765\u4f7f\u7528\uff0c\u5e76\u4e14\u9700\u8981\u6bd4\u7236\u7c7b\u66f4\u7279\u6b8a\u3002 \u5982\u679c\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u539f\u5219\uff0c\u90a3\u4e48\u5404\u4e2a\u5b50\u7c7b\u7684\u884c\u4e3a\u4e0a\u5c31\u4f1a\u6709\u5f88\u5927\u5dee\u5f02\uff0c\u589e\u52a0\u7ee7\u627f\u4f53\u7cfb\u7684\u590d\u6742\u5ea6\u3002","title":"3. \u91cc\u6c0f\u66ff\u6362\u539f\u5219"},{"location":"ccc/c1/#4","text":"\u4e0d\u5e94\u8be5\u5f3a\u8feb\u5ba2\u6237\u4f9d\u8d56\u4e8e\u5b83\u4eec\u4e0d\u7528\u7684\u65b9\u6cd5\u3002 \u56e0\u6b64\u4f7f\u7528\u591a\u4e2a\u4e13\u95e8\u7684\u63a5\u53e3\u6bd4\u4f7f\u7528\u5355\u4e00\u7684\u603b\u63a5\u53e3\u8981\u597d\u3002","title":"4. \u63a5\u53e3\u5206\u79bb\u539f\u5219"},{"location":"ccc/c1/#5","text":"\u9ad8\u5c42\u6a21\u5757\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u4e8c\u8005\u90fd\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\uff1b \u62bd\u8c61\u4e0d\u5e94\u8be5\u4f9d\u8d56\u4e8e\u7ec6\u8282\uff0c\u7ec6\u8282\u5e94\u8be5\u4f9d\u8d56\u4e8e\u62bd\u8c61\u3002 \u9ad8\u5c42\u6a21\u5757\u5305\u542b\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u91cd\u8981\u7684\u7b56\u7565\u9009\u62e9\u548c\u4e1a\u52a1\u6a21\u5757\uff0c\u5982\u679c\u9ad8\u5c42\u6a21\u5757\u4f9d\u8d56\u4e8e\u4f4e\u5c42\u6a21\u5757\uff0c\u90a3\u4e48\u4f4e\u5c42\u6a21\u5757\u7684\u6539\u52a8\u5c31\u4f1a\u76f4\u63a5\u5f71\u54cd\u5230\u9ad8\u5c42\u6a21\u5757\uff0c\u4ece\u800c\u8feb\u4f7f\u9ad8\u5c42\u6a21\u5757\u4e5f\u9700\u8981\u6539\u52a8\u3002 \u4f9d\u8d56\u4e8e\u62bd\u8c61\u610f\u5473\u7740\uff1a \u4efb\u4f55\u53d8\u91cf\u90fd\u4e0d\u5e94\u8be5\u6301\u6709\u4e00\u4e2a\u6307\u5411\u5177\u4f53\u7c7b\u7684\u6307\u9488\u6216\u8005\u5f15\u7528\uff1b \u4efb\u4f55\u7c7b\u90fd\u4e0d\u5e94\u8be5\u4ece\u5177\u4f53\u7c7b\u6d3e\u751f\uff1b \u4efb\u4f55\u65b9\u6cd5\u90fd\u4e0d\u5e94\u8be5\u8986\u5199\u5b83\u7684\u4efb\u4f55\u57fa\u7c7b\u4e2d\u7684\u5df2\u7ecf\u5b9e\u73b0\u7684\u65b9\u6cd5\u3002","title":"5. \u4f9d\u8d56\u5012\u7f6e\u539f\u5219"},{"location":"ccc/c1/#_8","text":"\u9664\u4e86\u4e0a\u8ff0\u7684\u7ecf\u5178\u539f\u5219\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\u8fd8\u6709\u4e0b\u9762\u8fd9\u4e9b\u5e38\u89c1\u7684\u8bbe\u8ba1\u539f\u5219\u3002 \u7b80\u5199 \u5168\u62fc \u4e2d\u6587\u7ffb\u8bd1 LOD The Law of Demeter \u8fea\u7c73\u7279\u6cd5\u5219 CRP The Composite Reuse Principle \u5408\u6210\u590d\u7528\u539f\u5219 CCP The Common Closure Principle \u5171\u540c\u5c01\u95ed\u539f\u5219 SAP The Stable Abstractions Principle \u7a33\u5b9a\u62bd\u8c61\u539f\u5219 SDP The Stable Dependencies Principle \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219","title":"\u5176\u4ed6\u5e38\u89c1\u539f\u5219"},{"location":"ccc/c1/#1_1","text":"\u8fea\u7c73\u7279\u6cd5\u5219\u53c8\u53eb\u4f5c\u6700\u5c11\u77e5\u8bc6\u539f\u5219\uff08Least Knowledge Principle\uff0c\u7b80\u5199 LKP\uff09\uff0c\u5c31\u662f\u8bf4\u4e00\u4e2a\u5bf9\u8c61\u5e94\u5f53\u5bf9\u5176\u4ed6\u5bf9\u8c61\u6709\u5c3d\u53ef\u80fd\u5c11\u7684\u4e86\u89e3\uff0c\u4e0d\u548c\u964c\u751f\u4eba\u8bf4\u8bdd\u3002","title":"1. \u8fea\u7c73\u7279\u6cd5\u5219"},{"location":"ccc/c1/#2_1","text":"\u5c3d\u91cf\u4f7f\u7528\u5bf9\u8c61\u7ec4\u5408\uff0c\u800c\u4e0d\u662f\u901a\u8fc7\u7ee7\u627f\u6765\u8fbe\u5230\u590d\u7528\u7684\u76ee\u7684\u3002","title":"2. \u5408\u6210\u590d\u7528\u539f\u5219"},{"location":"ccc/c1/#3_1","text":"\u4e00\u8d77\u4fee\u6539\u7684\u7c7b\uff0c\u5e94\u8be5\u7ec4\u5408\u5728\u4e00\u8d77\uff08\u540c\u4e00\u4e2a\u5305\u91cc\uff09\u3002\u5982\u679c\u5fc5\u987b\u4fee\u6539\u5e94\u7528\u7a0b\u5e8f\u91cc\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5e0c\u671b\u6240\u6709\u7684\u4fee\u6539\u90fd\u53d1\u751f\u5728\u4e00\u4e2a\u5305\u91cc\uff08\u4fee\u6539\u5173\u95ed\uff09\uff0c\u800c\u4e0d\u662f\u904d\u5e03\u5728\u5f88\u591a\u5305\u91cc\u3002","title":"3. \u5171\u540c\u5c01\u95ed\u539f\u5219"},{"location":"ccc/c1/#4_1","text":"\u6700\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u6700\u62bd\u8c61\u7684\u5305\uff0c\u4e0d\u7a33\u5b9a\u7684\u5305\u5e94\u8be5\u662f\u5177\u4f53\u7684\u5305\uff0c\u5373\u5305\u7684\u62bd\u8c61\u7a0b\u5ea6\u8ddf\u5b83\u7684\u7a33\u5b9a\u6027\u6210\u6b63\u6bd4\u3002","title":"4. \u7a33\u5b9a\u62bd\u8c61\u539f\u5219"},{"location":"ccc/c1/#5_1","text":"\u5305\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u90fd\u5e94\u8be5\u662f\u7a33\u5b9a\u65b9\u5411\u4f9d\u8d56\u7684\uff0c\u5305\u8981\u4f9d\u8d56\u7684\u5305\u8981\u6bd4\u81ea\u5df1\u66f4\u5177\u6709\u7a33\u5b9a\u6027\u3002","title":"5. \u7a33\u5b9a\u4f9d\u8d56\u539f\u5219"},{"location":"ccc/c1/#_9","text":"Java \u7f16\u7a0b\u601d\u60f3 \u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\uff1a\u539f\u5219\u3001\u6a21\u5f0f\u4e0e\u5b9e\u8df5 \u9762\u5411\u5bf9\u8c61\u8bbe\u8ba1\u7684 SOLID \u539f\u5219 \u770b\u61c2 UML \u7c7b\u56fe\u548c\u65f6\u5e8f\u56fe UML \u7cfb\u5217\u2014\u2014\u65f6\u5e8f\u56fe\uff08\u987a\u5e8f\u56fe\uff09sequence diagram \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u4e09\u5927\u7279\u6027 ------ \u5c01\u88c5\u3001\u7ee7\u627f\u3001\u591a\u6001","title":"\u53c2\u8003\u8d44\u6599"}]}